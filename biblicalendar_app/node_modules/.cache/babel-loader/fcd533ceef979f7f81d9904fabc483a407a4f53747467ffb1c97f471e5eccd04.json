{"ast":null,"code":"import 'temporal-polyfill/global';\n/**\n * java.lang.Math.toRadians\n * @private\n * @param degrees\n */\nfunction degreesToRadians(degrees) {\n  return degrees * Math.PI / 180;\n}\n/**\n * java.lang.Math.toDegrees\n * @private\n * @param radians\n */\nfunction radiansToDegrees(radians) {\n  return radians * 180 / Math.PI;\n}\n/**\n * A class that contains location information such as latitude and longitude required for astronomical calculations. The\n * elevation field may not be used by some calculation engines and would be ignored if set.\n *\n * @author &copy; Eliyahu Hershfeld 2004 - 2016\n * @version 1.1\n */\nexport class GeoLocation {\n  /**\n   * GeoLocation constructor with parameters for all required fields.\n   *\n   * @param {string} name\n   *            The location name for display use such as &quot;Lakewood, NJ&quot;\n   * @param {number} latitude\n   *            the latitude in a double format such as 40.095965 for Lakewood, NJ.\n   *            <b>Note: </b> For latitudes south of the equator, a negative value should be used.\n   * @param {number} longitude\n   *            double the longitude in a double format such as -74.222130 for Lakewood, NJ.\n   *            <b>Note: </b> For longitudes west of the <a href=\"http://en.wikipedia.org/wiki/Prime_Meridian\">Prime\n   *            Meridian </a> (Greenwich), a negative value should be used.\n   * @param {number} elevation\n   *            the elevation above sea level in Meters. Elevation is not used in most algorithms used for calculating\n   *            sunrise and set.\n   * @param {string} timeZoneId\n   *            the <code>TimeZone</code> for the location.\n   */\n  constructor(name, latitude, longitude, elevation, timeZoneId) {\n    /**\n     * @private\n     */\n    this.locationName = null;\n    this.setLocationName(name);\n    this.setLatitude(latitude);\n    this.setLongitude(longitude);\n    this.setElevation(elevation);\n    this.setTimeZone(timeZoneId);\n  }\n  /**\n   * Method to get the elevation in Meters.\n   *\n   * @return {number} Returns the elevation in Meters.\n   */\n  getElevation() {\n    return this.elevation;\n  }\n  /**\n   * Method to set the elevation in Meters <b>above </b> sea level.\n   *\n   * @param {number} elevation\n   *            The elevation to set in Meters. An Error will be thrown if the value is a negative.\n   */\n  setElevation(elevation) {\n    if (typeof elevation !== 'number') throw new TypeError('Invalid elevation');\n    if (elevation < 0) {\n      throw new RangeError(`elevation ${elevation} must be zero or positive`);\n    }\n    this.elevation = elevation;\n  }\n  setLatitude(latitude) {\n    if (typeof latitude !== 'number') throw new TypeError('Invalid latitude');\n    if (latitude < -90 || latitude > 90) {\n      throw new RangeError(`Latitude ${latitude} out of range [-90,90]`);\n    }\n    this.latitude = latitude;\n  }\n  /**\n   * @return {number} Returns the latitude.\n   */\n  getLatitude() {\n    return this.latitude;\n  }\n  setLongitude(longitude) {\n    if (typeof longitude !== 'number') throw new TypeError('Invalid longitude');\n    if (longitude < -180 || longitude > 180) {\n      throw new RangeError(`Longitude ${longitude} out of range [-180,180]`);\n    }\n    this.longitude = longitude;\n  }\n  /**\n   * @return {number} Returns the longitude.\n   */\n  getLongitude() {\n    return this.longitude;\n  }\n  /**\n   * @return {string|null} Returns the location name.\n   */\n  getLocationName() {\n    return this.locationName;\n  }\n  /**\n   * @param {string|null} name\n   *            The setter method for the display name.\n   */\n  setLocationName(name) {\n    this.locationName = name;\n  }\n  /**\n   * @return {string} Returns the timeZone.\n   */\n  getTimeZone() {\n    return this.timeZoneId;\n  }\n  /**\n   * Method to set the TimeZone.\n   * @param {string} timeZoneId\n   *            The timeZone to set.\n   */\n  setTimeZone(timeZoneId) {\n    this.timeZoneId = timeZoneId;\n  }\n}\n/**\n * The commonly used average solar refraction. Calendrical Calculations lists a more accurate global average of\n * 34.478885263888294\n * @private\n */\nconst refraction = 34 / 60;\n// private double refraction = 34.478885263888294 / 60d;\n/**\n * The commonly used average solar radius in minutes of a degree.\n * @private\n */\nconst solarRadius = 16 / 60;\n/**\n * The commonly used average earth radius in KM. At this time, this only affects elevation adjustment and not the\n * sunrise and sunset calculations. The value currently defaults to 6356.9 KM.\n * @private\n */\nconst earthRadius = 6356.9; // in KM\n/**\n * Implementation of sunrise and sunset methods to calculate astronomical times based on the <a\n * href=\"http://noaa.gov\">NOAA</a> algorithm. This calculator uses the Java algorithm based on the implementation by <a\n * href=\"http://noaa.gov\">NOAA - National Oceanic and Atmospheric Administration</a>'s <a href =\n * \"http://www.srrb.noaa.gov/highlights/sunrise/sunrise.html\">Surface Radiation Research Branch</a>. NOAA's <a\n * href=\"http://www.srrb.noaa.gov/highlights/sunrise/solareqns.PDF\">implementation</a> is based on equations from <a\n * href=\"http://www.willbell.com/math/mc1.htm\">Astronomical Algorithms</a> by <a\n * href=\"http://en.wikipedia.org/wiki/Jean_Meeus\">Jean Meeus</a>. Added to the algorithm is an adjustment of the zenith\n * to account for elevation. The algorithm can be found in the <a\n * href=\"http://en.wikipedia.org/wiki/Sunrise_equation\">Wikipedia Sunrise Equation</a> article.\n *\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\n */\nexport class NOAACalculator {\n  /**\n   * A constructor that takes in <a href=\"http://en.wikipedia.org/wiki/Geolocation\">geolocation</a> information as a\n   * parameter.\n   *\n   * @param {GeoLocation} geoLocation\n   *            The location information used for calculating astronomical sun times.\n   * @param {Temporal.PlainDate} date\n   */\n  constructor(geoLocation, date) {\n    this.date = date;\n    this.geoLocation = geoLocation;\n  }\n  /**\n   * The getSunrise method Returns a `Date` representing the\n   * {@link getElevationAdjustment elevation adjusted} sunrise time. The zenith used\n   * for the calculation uses {@link GEOMETRIC_ZENITH geometric zenith} of 90&deg; plus\n   * {@link getElevationAdjustment}. This is adjusted\n   * to add approximately 50/60 of a degree to account for 34 archminutes of refraction\n   * and 16 archminutes for the sun's radius for a total of {@link adjustZenith 90.83333&deg;}.\n   *\n   * @return {Temporal.ZonedDateTime | null} the `Date` representing the exact sunrise time. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a null will be returned. See detailed explanation on top of the page.\n   * @see adjustZenith\n   * @see getSeaLevelSunrise()\n   * @see getUTCSunrise\n   */\n  getSunrise() {\n    const sunrise = this.getUTCSunrise0(NOAACalculator.GEOMETRIC_ZENITH);\n    if (isNaN(sunrise)) return null;\n    return this.getDateFromTime(sunrise, true);\n  }\n  /**\n   * A method that returns the sunrise without {@link getElevationAdjustment elevation\n   * adjustment}. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible light,\n   * something that is not affected by elevation. This method returns sunrise calculated at sea level. This forms the\n   * base for dawn calculations that are calculated as a dip below the horizon before sunrise.\n   *\n   * @return {Temporal.ZonedDateTime | null} the `Date` representing the exact sea-level sunrise time. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a null will be returned. See detailed explanation on top of the page.\n   * @see getSunrise\n   * @see getUTCSeaLevelSunrise\n   * @see getSeaLevelSunset()\n   */\n  getSeaLevelSunrise() {\n    const sunrise = this.getUTCSeaLevelSunrise(NOAACalculator.GEOMETRIC_ZENITH);\n    if (isNaN(sunrise)) return null;\n    return this.getDateFromTime(sunrise, true);\n  }\n  /**\n   * A method that returns the beginning of civil twilight (dawn) using a zenith of {@link CIVIL_ZENITH 96&deg;}.\n   *\n   * @return {Temporal.ZonedDateTime | null} The `Date` of the beginning of civil twilight using a zenith of 96&deg;. If the calculation\n   *         can't be computed, null will be returned. See detailed explanation on top of the page.\n   * @see CIVIL_ZENITH\n   */\n  getBeginCivilTwilight() {\n    return this.getSunriseOffsetByDegrees(NOAACalculator.CIVIL_ZENITH);\n  }\n  /**\n   * A method that returns the beginning of nautical twilight using a zenith of {@link NAUTICAL_ZENITH 102&deg;}.\n   *\n   * @return {Temporal.ZonedDateTime | null} The `Date` of the beginning of nautical twilight using a zenith of 102&deg;. If the\n   *         calculation can't be computed null will be returned. See detailed explanation on top of the page.\n   * @see NAUTICAL_ZENITH\n   */\n  getBeginNauticalTwilight() {\n    return this.getSunriseOffsetByDegrees(NOAACalculator.NAUTICAL_ZENITH);\n  }\n  /**\n   * A method that returns the beginning of astronomical twilight using a zenith of {@link ASTRONOMICAL_ZENITH\n   * 108&deg;}.\n   *\n   * @return {Temporal.ZonedDateTime | null} The `Date` of the beginning of astronomical twilight using a zenith of 108&deg;. If the\n   *         calculation can't be computed, null will be returned. See detailed explanation on top of the page.\n   * @see ASTRONOMICAL_ZENITH\n   */\n  getBeginAstronomicalTwilight() {\n    return this.getSunriseOffsetByDegrees(NOAACalculator.ASTRONOMICAL_ZENITH);\n  }\n  /**\n   * The getSunset method Returns a `Date` representing the\n   * {@link getElevationAdjustment elevation adjusted} sunset time. The zenith used for\n   * the calculation uses {@link GEOMETRIC_ZENITH geometric zenith} of 90&deg; plus\n   * {@link getElevationAdjustment}. This is adjusted\n   * to add approximately 50/60 of a degree to account for 34 archminutes of refraction\n   * and 16 archminutes for the sun's radius for a total of {@link adjustZenith 90.83333&deg;}.\n   * Note:\n   * In certain cases the calculates sunset will occur before sunrise. This will typically happen when a timezone\n   * other than the local timezone is used (calculating Los Angeles sunset using a GMT timezone for example). In this\n   * case the sunset date will be incremented to the following date.\n   *\n   * @return {Temporal.ZonedDateTime | null} The `Date` representing the exact sunset time. If the calculation can't be computed such as in\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a null will be returned. See detailed explanation on top of the page.\n   * @see adjustZenith\n   * @see getSeaLevelSunset()\n   * @see getUTCSunset\n   */\n  getSunset() {\n    const sunset = this.getUTCSunset0(NOAACalculator.GEOMETRIC_ZENITH);\n    if (isNaN(sunset)) return null;\n    return this.getDateFromTime(sunset, false);\n  }\n  /**\n   * A method that returns the sunset without {@link getElevationAdjustment elevation\n   * adjustment}. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible light,\n   * something that is not affected by elevation. This method returns sunset calculated at sea level. This forms the\n   * base for dusk calculations that are calculated as a dip below the horizon after sunset.\n   *\n   * @return {Temporal.ZonedDateTime | null} The `Date` representing the exact sea-level sunset time. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a null will be returned. See detailed explanation on top of the page.\n   * @see getSunset\n   * @see getUTCSeaLevelSunset\n   */\n  getSeaLevelSunset() {\n    const sunset = this.getUTCSeaLevelSunset(NOAACalculator.GEOMETRIC_ZENITH);\n    if (isNaN(sunset)) return null;\n    return this.getDateFromTime(sunset, false);\n  }\n  /**\n   * A method that returns the end of civil twilight using a zenith of {@link CIVIL_ZENITH 96&deg;}.\n   *\n   * @return {Temporal.ZonedDateTime | null} The `Date` of the end of civil twilight using a zenith of {@link CIVIL_ZENITH 96&deg;}. If\n   *         the calculation can't be computed, null will be returned. See detailed explanation on top of the page.\n   * @see CIVIL_ZENITH\n   */\n  getEndCivilTwilight() {\n    return this.getSunsetOffsetByDegrees(NOAACalculator.CIVIL_ZENITH);\n  }\n  /**\n   * A method that returns the end of nautical twilight using a zenith of {@link NAUTICAL_ZENITH 102&deg;}.\n   *\n   * @return {Temporal.ZonedDateTime | null} The `Date` of the end of nautical twilight using a zenith of {@link NAUTICAL_ZENITH 102&deg;}\n   *         . If the calculation can't be computed, null will be returned. See detailed explanation on top of the\n   *         page.\n   * @see NAUTICAL_ZENITH\n   */\n  getEndNauticalTwilight() {\n    return this.getSunsetOffsetByDegrees(NOAACalculator.NAUTICAL_ZENITH);\n  }\n  /**\n   * A method that returns the end of astronomical twilight using a zenith of {@link ASTRONOMICAL_ZENITH 108&deg;}.\n   *\n   * @return {Temporal.ZonedDateTime | null} The `Date` of the end of astronomical twilight using a zenith of {@link ASTRONOMICAL_ZENITH\n   *         108&deg;}. If the calculation can't be computed, null will be returned. See detailed explanation on top\n   *         of the page.\n   * @see ASTRONOMICAL_ZENITH\n   */\n  getEndAstronomicalTwilight() {\n    return this.getSunsetOffsetByDegrees(NOAACalculator.ASTRONOMICAL_ZENITH);\n  }\n  /**\n   * A utility method that returns a date offset by the offset time passed in. Please note that the level of light\n   * during twilight is not affected by elevation, so if this is being used to calculate an offset before sunrise or\n   * after sunset with the intent of getting a rough \"level of light\" calculation, the sunrise or sunset time passed\n   * to this method should be sea level sunrise and sunset.\n   *\n   * @param {Temporal.ZonedDateTime | null} time\n   *            the start time\n   * @param {number} offset\n   *            the offset in milliseconds to add to the time.\n   * @return {Temporal.ZonedDateTime | null} the `Date` with the offset in milliseconds added to it\n   */\n  static getTimeOffset(time, offset) {\n    if (time === null || isNaN(offset)) {\n      return null;\n    }\n    return time.add({\n      milliseconds: offset\n    });\n  }\n  /**\n   * A utility method that returns the time of an offset by degrees below or above the horizon of\n   * {@link getSunrise() sunrise}. Note that the degree offset is from the vertical, so for a calculation of 14&deg;\n   * before sunrise, an offset of 14 + {@link GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\n   *\n   * @param {number} offsetZenith\n   *            the degrees before {@link getSunrise} to use in the calculation. For time after sunrise use\n   *            negative numbers. Note that the degree offset is from the vertical, so for a calculation of 14&deg;\n   *            before sunrise, an offset of 14 + {@link GEOMETRIC_ZENITH} = 104 would have to be passed as a\n   *            parameter.\n   * @return {Temporal.ZonedDateTime | null} The `Date` of the offset after (or before) {@link getSunrise}. If the calculation\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\n   *         not rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\n   *         page.\n   */\n  getSunriseOffsetByDegrees(offsetZenith) {\n    const dawn = this.getUTCSunrise0(offsetZenith);\n    if (isNaN(dawn)) return null;\n    return this.getDateFromTime(dawn, true);\n  }\n  /**\n   * A utility method that returns the time of an offset by degrees below or above the horizon of {@link getSunset()\n   * sunset}. Note that the degree offset is from the vertical, so for a calculation of 14&deg; after sunset, an\n   * offset of 14 + {@link GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\n   *\n   * @param {number} offsetZenith\n   *            the degrees after {@link getSunset} to use in the calculation. For time before sunset use negative\n   *            numbers. Note that the degree offset is from the vertical, so for a calculation of 14&deg; after\n   *            sunset, an offset of 14 + {@link GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\n   * @return {Temporal.ZonedDateTime | null} The `Date`of the offset after (or before) {@link getSunset}. If the calculation can't\n   *         be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\n   *         rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\n   *         page.\n   */\n  getSunsetOffsetByDegrees(offsetZenith) {\n    const sunset = this.getUTCSunset0(offsetZenith);\n    if (isNaN(sunset)) return null;\n    return this.getDateFromTime(sunset, false);\n  }\n  /**\n   * A method that returns the sunrise in UTC time without correction for time zone offset from GMT and without using\n   * daylight savings time.\n   *\n   * @param {number} zenith\n   *            the degrees below the horizon. For time after sunrise use negative numbers.\n   * @return {number} The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, `NaN` will be returned. See detailed explanation on top of the page.\n   */\n  getUTCSunrise0(zenith) {\n    return this.getUTCSunrise(this.getAdjustedDate(), this.geoLocation, zenith, true);\n  }\n  /**\n   * A method that returns the sunrise in UTC time without correction for time zone offset from GMT and without using\n   * daylight savings time. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible\n   * light, something that is not affected by elevation. This method returns UTC sunrise calculated at sea level. This\n   * forms the base for dawn calculations that are calculated as a dip below the horizon before sunrise.\n   *\n   * @param {number} zenith\n   *            the degrees below the horizon. For time after sunrise use negative numbers.\n   * @return {number} The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, `NaN` will be returned. See detailed explanation on top of the page.\n   * @see getUTCSunrise\n   * @see getUTCSeaLevelSunset\n   */\n  getUTCSeaLevelSunrise(zenith) {\n    return this.getUTCSunrise(this.getAdjustedDate(), this.geoLocation, zenith, false);\n  }\n  /**\n   * A method that returns the sunset in UTC time without correction for time zone offset from GMT and without using\n   * daylight savings time.\n   *\n   * @param {number} zenith\n   *            the degrees below the horizon. For time after sunset use negative numbers.\n   * @return {number} The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, `NaN` will be returned. See detailed explanation on top of the page.\n   * @see getUTCSeaLevelSunset\n   */\n  getUTCSunset0(zenith) {\n    return this.getUTCSunset(this.getAdjustedDate(), this.geoLocation, zenith, true);\n  }\n  /**\n   * A method that returns the sunset in UTC time without correction for elevation, time zone offset from GMT and\n   * without using daylight savings time. Non-sunrise and sunset calculations such as dawn and dusk, depend on the\n   * amount of visible light, something that is not affected by elevation. This method returns UTC sunset calculated\n   * at sea level. This forms the base for dusk calculations that are calculated as a dip below the horizon after\n   * sunset.\n   *\n   * @param {number} zenith\n   *            the degrees below the horizon. For time before sunset use negative numbers.\n   * @return {number} The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, `NaN` will be returned. See detailed explanation on top of the page.\n   * @see getUTCSunset\n   * @see getUTCSeaLevelSunrise\n   */\n  getUTCSeaLevelSunset(zenith) {\n    return this.getUTCSunset(this.getAdjustedDate(), this.geoLocation, zenith, false);\n  }\n  /**\n   * Adjusts the <code>Calendar</code> to deal with edge cases where the location crosses the antimeridian.\n   * @private\n   * @see GeoLocation#getAntimeridianAdjustment()\n   * @return the adjusted Calendar\n   */\n  getAdjustedDate() {\n    return this.date;\n  }\n  /**\n   * Method to return the adjustment to the zenith required to account for the elevation. Since a person at a higher\n   * elevation can see farther below the horizon, the calculation for sunrise / sunset is calculated below the horizon\n   * used at sea level. This is only used for sunrise and sunset and not times before or after it such as\n   * {@link getBeginNauticalTwilight() nautical twilight} since those\n   * calculations are based on the level of available light at the given dip below the horizon, something that is not\n   * affected by elevation, the adjustment should only made if the zenith == 90&deg; {@link adjustZenith adjusted}\n   * for refraction and solar radius. The algorithm used is\n   *\n   * <pre>\n   * elevationAdjustment = Math.toDegrees(Math.acos(earthRadiusInMeters / (earthRadiusInMeters + elevationMeters)));\n   * </pre>\n   *\n   * The source of this algorithm is <a href=\"http://www.calendarists.com\">Calendrical Calculations</a> by Edward M.\n   * Reingold and Nachum Dershowitz. An alternate algorithm that produces an almost identical (but not accurate)\n   * result found in Ma'aglay Tzedek by Moishe Kosower and other sources is:\n   *\n   * <pre>\n   * elevationAdjustment = 0.0347 * Math.sqrt(elevationMeters);\n   * </pre>\n   *\n   * @param {number} elevation\n   *            elevation in Meters.\n   * @return {number} the adjusted zenith\n   */\n  getElevationAdjustment(elevation) {\n    // double elevationAdjustment = 0.0347 * Math.sqrt(elevation);\n    const elevationAdjustment = radiansToDegrees(Math.acos(earthRadius / (earthRadius + elevation / 1000)));\n    return elevationAdjustment;\n  }\n  /**\n   * Adjusts the zenith of astronomical sunrise and sunset to account for solar refraction, solar radius and\n   * elevation. The value for Sun's zenith and true rise/set Zenith (used in this class and subclasses) is the angle\n   * that the center of the Sun makes to a line perpendicular to the Earth's surface. If the Sun were a point and the\n   * Earth were without an atmosphere, true sunset and sunrise would correspond to a 90&deg; zenith. Because the Sun\n   * is not a point, and because the atmosphere refracts light, this 90&deg; zenith does not, in fact, correspond to\n   * true sunset or sunrise, instead the centre of the Sun's disk must lie just below the horizon for the upper edge\n   * to be obscured. This means that a zenith of just above 90&deg; must be used. The Sun subtends an angle of 16\n   * minutes of arc, and atmospheric refraction\n   * accounts for 34 minutes or so, giving a total\n   * of 50 arcminutes. The total value for ZENITH is 90+(5/6) or 90.8333333&deg; for true sunrise/sunset. Since a\n   * person at an elevation can see blow the horizon of a person at sea level, this will also adjust the zenith to\n   * account for elevation if available. Note that this will only adjust the value if the zenith is exactly 90 degrees.\n   * For values below and above this no correction is done. As an example, astronomical twilight is when the sun is\n   * 18&deg; below the horizon or {@link ASTRONOMICAL_ZENITH 108&deg;\n   * below the zenith}. This is traditionally calculated with none of the above mentioned adjustments. The same goes\n   * for various <em>tzais</em> and <em>alos</em> times such as the\n   * {@link ZmanimCalendar#ZENITH_16_POINT_1 16.1&deg;} dip used in\n   * {@link ComplexZmanimCalendar#getAlos16Point1Degrees}.\n   *\n   * @param {number} zenith\n   *            the azimuth below the vertical zenith of 90&deg;. For sunset typically the {@link adjustZenith\n   *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link adjustZenith adjusts}\n   *            this slightly to account for solar refraction and the sun's radius. Another example would be\n   *            {@link getEndNauticalTwilight} that passes\n   *            {@link NAUTICAL_ZENITH} to this method.\n   * @param {number} elevation\n   *            elevation in Meters.\n   * @return {number} The zenith adjusted to include the sun's radius, refracton\n   *         and {@link getElevationAdjustment elevation} adjustment. This will only be adjusted for\n   *         sunrise and sunset (if the zenith == 90&deg;)\n   * @see getElevationAdjustment\n   */\n  adjustZenith(zenith, elevation) {\n    let adjustedZenith = zenith;\n    if (zenith === NOAACalculator.GEOMETRIC_ZENITH) {\n      // only adjust if it is exactly sunrise or sunset\n      adjustedZenith = zenith + (solarRadius + refraction + this.getElevationAdjustment(elevation));\n    }\n    return adjustedZenith;\n  }\n  /**\n   * A method that calculates UTC sunrise as well as any time based on an angle above or below sunrise.\n   * @param date\n   *            Used to calculate day of year.\n   * @param geoLocation\n   *            The location information used for astronomical calculating sun times.\n   * @param zenith\n   *            the azimuth below the vertical zenith of 90 degrees. for sunrise typically the {@link adjustZenith\n   *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link adjustZenith adjusts}\n   *            this slightly to account for solar refraction and the sun's radius. Another example would be\n   *            {@link getBeginNauticalTwilight} that passes\n   *            {@link NAUTICAL_ZENITH} to this method.\n   * @param adjustForElevation\n   *            Should the time be adjusted for elevation\n   * @return The UTC time of sunrise in 24 hour format. 5:45:00 AM will return 5.75.0. If an error was encountered in\n   *         the calculation (expected behavior for some locations such as near the poles,\n   *         `NaN` will be returned.\n   */\n  getUTCSunrise(date, geoLocation, zenith, adjustForElevation) {\n    const elevation = adjustForElevation ? geoLocation.getElevation() : 0;\n    const adjustedZenith = this.adjustZenith(zenith, elevation);\n    let sunrise = NOAACalculator.getSunriseUTC(NOAACalculator.getJulianDay(date), geoLocation.getLatitude(), -geoLocation.getLongitude(), adjustedZenith);\n    sunrise = sunrise / 60;\n    // ensure that the time is >= 0 and < 24\n    while (sunrise < 0) {\n      sunrise += 24;\n    }\n    while (sunrise >= 24) {\n      sunrise -= 24;\n    }\n    return sunrise;\n  }\n  /**\n   * A method that calculates UTC sunset as well as any time based on an angle above or below sunset.\n   * @param date\n   *            Used to calculate day of year.\n   * @param geoLocation\n   *            The location information used for astronomical calculating sun times.\n   * @param zenith\n   *            the azimuth below the vertical zenith of 90&deg;. For sunset typically the {@link adjustZenith\n   *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link adjustZenith adjusts}\n   *            this slightly to account for solar refraction and the sun's radius. Another example would be\n   *            {@link getEndNauticalTwilight} that passes\n   *            {@link NAUTICAL_ZENITH} to this method.\n   * @param adjustForElevation\n   *            Should the time be adjusted for elevation\n   * @return The UTC time of sunset in 24 hour format. 5:45:00 AM will return 5.75.0. If an error was encountered in\n   *         the calculation (expected behavior for some locations such as near the poles,\n   *         `NaN` will be returned.\n   */\n  getUTCSunset(date, geoLocation, zenith, adjustForElevation) {\n    const elevation = adjustForElevation ? geoLocation.getElevation() : 0;\n    const adjustedZenith = this.adjustZenith(zenith, elevation);\n    let sunset = NOAACalculator.getSunsetUTC(NOAACalculator.getJulianDay(date), geoLocation.getLatitude(), -geoLocation.getLongitude(), adjustedZenith);\n    sunset = sunset / 60;\n    // ensure that the time is >= 0 and < 24\n    while (sunset < 0) {\n      sunset += 24;\n    }\n    while (sunset >= 24) {\n      sunset -= 24;\n    }\n    return sunset;\n  }\n  /**\n   * A utility method that will allow the calculation of a temporal (solar) hour based on the sunrise and sunset\n   * passed as parameters to this method. An example of the use of this method would be the calculation of a\n   * non-elevation adjusted temporal hour by passing in {@link getSeaLevelSunrise() sea level sunrise} and\n   * {@link getSeaLevelSunset() sea level sunset} as parameters.\n   *\n   * @param {Temporal.ZonedDateTime | null} startOfDay\n   *            The start of the day.\n   * @param {Temporal.ZonedDateTime | null} endOfDay\n   *            The end of the day.\n   *\n   * @return {number} the <code>long</code> millisecond length of the temporal hour. If the calculation can't be computed a\n   *         `NaN` will be returned. See detailed explanation on top of the page.\n   *\n   * @see getTemporalHour()\n   */\n  getTemporalHour(startOfDay = this.getSeaLevelSunrise(), endOfDay = this.getSeaLevelSunset()) {\n    if (startOfDay === null || endOfDay === null) {\n      return NaN;\n    }\n    const delta = endOfDay.epochMilliseconds - startOfDay.epochMilliseconds;\n    return Math.floor(delta / 12);\n  }\n  /**\n   * A method that returns sundial or solar noon. It occurs when the Sun is <a href\n   * =\"http://en.wikipedia.org/wiki/Transit_%28astronomy%29\">transiting</a> the <a\n   * href=\"http://en.wikipedia.org/wiki/Meridian_%28astronomy%29\">celestial meridian</a>. In this class it is\n   * calculated as halfway between the sunrise and sunset passed to this method. This time can be slightly off the\n   * real transit time due to changes in declination (the lengthening or shortening day).\n   *\n   * @param {Temporal.ZonedDateTime | null} startOfDay\n   *            the start of day for calculating the sun's transit. This can be sea level sunrise, visual sunrise (or\n   *            any arbitrary start of day) passed to this method.\n   * @param {Temporal.ZonedDateTime | null} endOfDay\n   *            the end of day for calculating the sun's transit. This can be sea level sunset, visual sunset (or any\n   *            arbitrary end of day) passed to this method.\n   *\n   * @return {Temporal.ZonedDateTime | null} The `Date` representing Sun's transit. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, null will be returned. See detailed explanation on top of the page.\n   */\n  getSunTransit(startOfDay = this.getSeaLevelSunrise(), endOfDay = this.getSeaLevelSunset()) {\n    const temporalHour = this.getTemporalHour(startOfDay, endOfDay);\n    return NOAACalculator.getTimeOffset(startOfDay, temporalHour * 6);\n  }\n  /**\n   * A method that returns a `Date` from the time passed in as a parameter.\n   * @protected\n   * @param {number} time\n   *            The time to be set as the time for the `Date`. The time expected is in the format: 18.75\n   *            for 6:45:00 PM.\n   * @param {boolean} isSunrise true if the time is sunrise, and false if it is sunset\n   * @return {Temporal.ZonedDateTime | null} The Date.\n   */\n  getDateFromTime(time, isSunrise) {\n    if (isNaN(time)) {\n      return null;\n    }\n    let calculatedTime = time;\n    let cal = this.getAdjustedDate();\n    //    let cal = new Temporal.PlainDate(adj.year, adj.month, adj.day);\n    const hours = Math.trunc(calculatedTime); // retain only the hours\n    calculatedTime -= hours;\n    const minutes = Math.trunc(calculatedTime *= 60); // retain only the minutes\n    calculatedTime -= minutes;\n    const seconds = Math.trunc(calculatedTime *= 60); // retain only the seconds\n    calculatedTime -= seconds; // remaining milliseconds\n    // Check if a date transition has occurred, or is about to occur - this indicates the date of the event is\n    // actually not the target date, but the day prior or after\n    const localTimeHours = Math.trunc(this.geoLocation.getLongitude() / 15);\n    if (isSunrise && localTimeHours + hours > 18) {\n      cal = cal.add({\n        days: -1\n      });\n      //      cal = cal.minus({days: 1});\n    } else if (!isSunrise && localTimeHours + hours < 6) {\n      cal = cal.add({\n        days: 1\n      });\n    }\n    return cal.toZonedDateTime({\n      timeZone: 'UTC',\n      plainTime: new Temporal.PlainTime(hours, minutes, seconds, Math.trunc(calculatedTime * 1000))\n    }).withTimeZone(this.geoLocation.getTimeZone());\n  }\n  /**\n   * Return the <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> from a Java Calendar\n   * @private\n   * @param {Temporal.ZonedDateTime} date\n   *            The Java Calendar\n   * @return the Julian day corresponding to the date Note: Number is returned for start of day. Fractional days\n   *         should be added later.\n   */\n  static getJulianDay(date) {\n    let {\n      year,\n      month\n    } = date;\n    const {\n      day\n    } = date;\n    if (month <= 2) {\n      year -= 1;\n      month += 12;\n    }\n    const a = Math.trunc(year / 100);\n    const b = Math.trunc(2 - a + a / 4);\n    return Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\n  }\n  /**\n   * Convert <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> to centuries since J2000.0.\n   * @private\n   * @param julianDay\n   *            the Julian Day to convert\n   * @return the centuries since 2000 Julian corresponding to the Julian Day\n   */\n  static getJulianCenturiesFromJulianDay(julianDay) {\n    return (julianDay - NOAACalculator.JULIAN_DAY_JAN_1_2000) / NOAACalculator.JULIAN_DAYS_PER_CENTURY;\n  }\n  /**\n   * Convert centuries since J2000.0 to <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a>.\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return the Julian Day corresponding to the Julian centuries passed in\n   */\n  static getJulianDayFromJulianCenturies(julianCenturies) {\n    return julianCenturies * NOAACalculator.JULIAN_DAYS_PER_CENTURY + NOAACalculator.JULIAN_DAY_JAN_1_2000;\n  }\n  /**\n   * Returns the Geometric <a href=\"http://en.wikipedia.org/wiki/Mean_longitude\">Mean Longitude</a> of the Sun.\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return the Geometric Mean Longitude of the Sun in degrees\n   */\n  static getSunGeometricMeanLongitude(julianCenturies) {\n    let longitude = 280.46646 + julianCenturies * (36000.76983 + 0.0003032 * julianCenturies);\n    while (longitude > 360) {\n      longitude -= 360;\n    }\n    while (longitude < 0) {\n      longitude += 360;\n    }\n    return longitude; // in degrees\n  }\n  /**\n   * Returns the Geometric <a href=\"http://en.wikipedia.org/wiki/Mean_anomaly\">Mean Anomaly</a> of the Sun.\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return the Geometric Mean Anomaly of the Sun in degrees\n   */\n  static getSunGeometricMeanAnomaly(julianCenturies) {\n    return 357.52911 + julianCenturies * (35999.05029 - 0.0001537 * julianCenturies); // in degrees\n  }\n  /**\n   * Return the <a href=\"http://en.wikipedia.org/wiki/Eccentricity_%28orbit%29\">eccentricity of earth's orbit</a>.\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return the unitless eccentricity\n   */\n  static getEarthOrbitEccentricity(julianCenturies) {\n    return 0.016708634 - julianCenturies * (0.000042037 + 0.0000001267 * julianCenturies); // unitless\n  }\n  /**\n   * Returns the <a href=\"http://en.wikipedia.org/wiki/Equation_of_the_center\">equation of center</a> for the sun.\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return the equation of center for the sun in degrees\n   */\n  static getSunEquationOfCenter(julianCenturies) {\n    const m = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\n    const mrad = degreesToRadians(m);\n    const sinm = Math.sin(mrad);\n    const sin2m = Math.sin(mrad + mrad);\n    const sin3m = Math.sin(mrad + mrad + mrad);\n    return sinm * (1.914602 - julianCenturies * (0.004817 + 0.000014 * julianCenturies)) + sin2m * (0.019993 - 0.000101 * julianCenturies) + sin3m * 0.000289; // in degrees\n  }\n  /**\n   * Return the true longitude of the sun\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return the sun's true longitude in degrees\n   */\n  static getSunTrueLongitude(julianCenturies) {\n    const sunLongitude = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\n    const center = NOAACalculator.getSunEquationOfCenter(julianCenturies);\n    return sunLongitude + center; // in degrees\n  }\n  /**\n   * Return the apparent longitude of the sun\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return sun's apparent longitude in degrees\n   */\n  static getSunApparentLongitude(julianCenturies) {\n    const sunTrueLongitude = NOAACalculator.getSunTrueLongitude(julianCenturies);\n    const omega = 125.04 - 1934.136 * julianCenturies;\n    const lambda = sunTrueLongitude - 0.00569 - 0.00478 * Math.sin(degreesToRadians(omega));\n    return lambda; // in degrees\n  }\n  /**\n   * Returns the mean <a href=\"http://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial tilt).\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return the mean obliquity in degrees\n   */\n  static getMeanObliquityOfEcliptic(julianCenturies) {\n    const seconds = 21.448 - julianCenturies * (46.815 + julianCenturies * (0.00059 - julianCenturies * 0.001813));\n    return 23 + (26 + seconds / 60) / 60; // in degrees\n  }\n  /**\n   * Returns the corrected <a href=\"http://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial\n   * tilt).\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return the corrected obliquity in degrees\n   */\n  static getObliquityCorrection(julianCenturies) {\n    const obliquityOfEcliptic = NOAACalculator.getMeanObliquityOfEcliptic(julianCenturies);\n    const omega = 125.04 - 1934.136 * julianCenturies;\n    return obliquityOfEcliptic + 0.00256 * Math.cos(degreesToRadians(omega)); // in degrees\n  }\n  /**\n   * Return the <a href=\"http://en.wikipedia.org/wiki/Declination\">declination</a> of the sun.\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return\n   *            the sun's declination in degrees\n   */\n  static getSunDeclination(julianCenturies) {\n    const obliquityCorrection = NOAACalculator.getObliquityCorrection(julianCenturies);\n    const lambda = NOAACalculator.getSunApparentLongitude(julianCenturies);\n    const sint = Math.sin(degreesToRadians(obliquityCorrection)) * Math.sin(degreesToRadians(lambda));\n    const theta = radiansToDegrees(Math.asin(sint));\n    return theta; // in degrees\n  }\n  /**\n   * Return the <a href=\"http://en.wikipedia.org/wiki/Equation_of_time\">Equation of Time</a> - the difference between\n   * true solar time and mean solar time\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @return equation of time in minutes of time\n   */\n  static getEquationOfTime(julianCenturies) {\n    const epsilon = NOAACalculator.getObliquityCorrection(julianCenturies);\n    const geomMeanLongSun = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\n    const eccentricityEarthOrbit = NOAACalculator.getEarthOrbitEccentricity(julianCenturies);\n    const geomMeanAnomalySun = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\n    let y = Math.tan(degreesToRadians(epsilon) / 2);\n    y *= y;\n    const sin2l0 = Math.sin(2 * degreesToRadians(geomMeanLongSun));\n    const sinm = Math.sin(degreesToRadians(geomMeanAnomalySun));\n    const cos2l0 = Math.cos(2 * degreesToRadians(geomMeanLongSun));\n    const sin4l0 = Math.sin(4 * degreesToRadians(geomMeanLongSun));\n    const sin2m = Math.sin(2 * degreesToRadians(geomMeanAnomalySun));\n    const equationOfTime = y * sin2l0 - 2 * eccentricityEarthOrbit * sinm + 4 * eccentricityEarthOrbit * y * sinm * cos2l0 - 0.5 * y * y * sin4l0 - 1.25 * eccentricityEarthOrbit * eccentricityEarthOrbit * sin2m;\n    return radiansToDegrees(equationOfTime) * 4; // in minutes of time\n  }\n  /**\n   * Return the <a href=\"http://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun at sunrise for the\n   * latitude.\n   * @private\n   * @param {number} lat\n   *            , the latitude of observer in degrees\n   * @param solarDec\n   *            the declination angle of sun in degrees\n   * @param {number} zenith\n   *            the zenith\n   * @return hour angle of sunrise in radians\n   */\n  static getSunHourAngleAtSunrise(lat, solarDec, zenith) {\n    const latRad = degreesToRadians(lat);\n    const sdRad = degreesToRadians(solarDec);\n    return Math.acos(Math.cos(degreesToRadians(zenith)) / (Math.cos(latRad) * Math.cos(sdRad)) - Math.tan(latRad) * Math.tan(sdRad)); // in radians\n  }\n  /**\n   * Returns the <a href=\"http://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun at sunset for the\n   * latitude.\n   * @private\n   * @param {number} lat\n   *            the latitude of observer in degrees\n   * @param solarDec\n   *            the declination angle of sun in degrees\n   * @param {number} zenith\n   *            the zenith\n   * @return the hour angle of sunset in radians\n   */\n  static getSunHourAngleAtSunset(lat, solarDec, zenith) {\n    const latRad = degreesToRadians(lat);\n    const sdRad = degreesToRadians(solarDec);\n    const hourAngle = Math.acos(Math.cos(degreesToRadians(zenith)) / (Math.cos(latRad) * Math.cos(sdRad)) - Math.tan(latRad) * Math.tan(sdRad));\n    return -hourAngle; // in radians\n  }\n  /**\n   * Return the <a href=\"http://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Elevation</a> for the\n   * horizontal coordinate system at the given location at the given time. Can be negative if the sun is below the\n   * horizon. Not corrected for altitude.\n   *\n   * @param {Temporal.ZonedDateTime} date\n   *            time of calculation\n   * @param {number} lat\n   *            latitude of location for calculation\n   * @param {number} lon\n   *            longitude of location for calculation\n   * @return {number} solar elevation in degrees - horizon is 0 degrees, civil twilight is -6 degrees\n   */\n  static getSolarElevation(date, lat, lon) {\n    const julianDay = NOAACalculator.getJulianDay(date.toPlainDate());\n    const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n    const equationOfTime = NOAACalculator.getEquationOfTime(julianCenturies);\n    let longitude = date.hour + 12 + (date.minute + equationOfTime + date.second / 60) / 60;\n    longitude = -(longitude * 360 / 24) % 360;\n    const hourAngleRad = degreesToRadians(lon - longitude);\n    const declination = NOAACalculator.getSunDeclination(julianCenturies);\n    const decRad = degreesToRadians(declination);\n    const latRad = degreesToRadians(lat);\n    return radiansToDegrees(Math.asin(Math.sin(latRad) * Math.sin(decRad) + Math.cos(latRad) * Math.cos(decRad) * Math.cos(hourAngleRad)));\n  }\n  /**\n   * Return the <a href=\"http://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Azimuth</a> for the\n   * horizontal coordinate system at the given location at the given time. Not corrected for altitude. True south is 0\n   * degrees.\n   *\n   * @param {Temporal.ZonedDateTime} date\n   *            time of calculation\n   * @param {number} latitude\n   *            latitude of location for calculation\n   * @param {number} lon\n   *            longitude of location for calculation\n   * @return {number}\n   */\n  static getSolarAzimuth(date, latitude, lon) {\n    const julianDay = NOAACalculator.getJulianDay(date.toPlainDate());\n    const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n    const equationOfTime = NOAACalculator.getEquationOfTime(julianCenturies);\n    let longitude = date.hour + 12 + (date.minute + equationOfTime + date.second / 60) / 60;\n    longitude = -(longitude * 360 / 24) % 360;\n    const hourAngleRad = degreesToRadians(lon - longitude);\n    const declination = NOAACalculator.getSunDeclination(julianCenturies);\n    const decRad = degreesToRadians(declination);\n    const latRad = degreesToRadians(latitude);\n    return radiansToDegrees(Math.atan(Math.sin(hourAngleRad) / (Math.cos(hourAngleRad) * Math.sin(latRad) - Math.tan(decRad) * Math.cos(latRad)))) + 180;\n  }\n  /**\n   * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n   * of sunrise for the given day at the given location on earth\n   * @private\n   * @param julianDay\n   *            the Julian day\n   * @param {number} latitude\n   *            the latitude of observer in degrees\n   * @param {number} longitude\n   *            the longitude of observer in degrees\n   * @param {number} zenith\n   *            the zenith\n   * @return the time in minutes from zero UTC\n   */\n  static getSunriseUTC(julianDay, latitude, longitude, zenith) {\n    const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n    // Find the time of solar noon at the location, and use that declination. This is better than start of the\n    // Julian day\n    const noonmin = NOAACalculator.getSolarNoonUTC(julianCenturies, longitude);\n    const tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440);\n    // First pass to approximate sunrise (using solar noon)\n    let eqTime = NOAACalculator.getEquationOfTime(tnoon);\n    let solarDec = NOAACalculator.getSunDeclination(tnoon);\n    let hourAngle = NOAACalculator.getSunHourAngleAtSunrise(latitude, solarDec, zenith);\n    let delta = longitude - radiansToDegrees(hourAngle);\n    let timeDiff = 4 * delta; // in minutes of time\n    let timeUTC = 720 + timeDiff - eqTime; // in minutes\n    // Second pass includes fractional Julian Day in gamma calc\n    const newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + timeUTC / 1440);\n    eqTime = NOAACalculator.getEquationOfTime(newt);\n    solarDec = NOAACalculator.getSunDeclination(newt);\n    hourAngle = NOAACalculator.getSunHourAngleAtSunrise(latitude, solarDec, zenith);\n    delta = longitude - radiansToDegrees(hourAngle);\n    timeDiff = 4 * delta;\n    timeUTC = 720 + timeDiff - eqTime; // in minutes\n    return timeUTC;\n  }\n  /**\n   * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n   * of <a href=\"http://en.wikipedia.org/wiki/Noon#Solar_noon\">solar noon</a> for the given day at the given location\n   * on earth.\n   * @private\n   * @param julianCenturies\n   *            the number of Julian centuries since J2000.0\n   * @param {number} longitude\n   *            the longitude of observer in degrees\n   * @return the time in minutes from zero UTC\n   */\n  static getSolarNoonUTC(julianCenturies, longitude) {\n    // First pass uses approximate solar noon to calculate eqtime\n    const tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + longitude / 360);\n    let eqTime = NOAACalculator.getEquationOfTime(tnoon);\n    const solNoonUTC = 720 + longitude * 4 - eqTime; // min\n    const newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) - 0.5 + solNoonUTC / 1440);\n    eqTime = NOAACalculator.getEquationOfTime(newt);\n    return 720 + longitude * 4 - eqTime; // min\n  }\n  /**\n   * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n   * of sunset for the given day at the given location on earth\n   * @private\n   * @param julianDay\n   *            the Julian day\n   * @param {number} latitude\n   *            the latitude of observer in degrees\n   * @param {number} longitude\n   *            : longitude of observer in degrees\n   * @param {number} zenith\n   *            the zenith\n   * @return the time in minutes from zero Universal Coordinated Time (UTC)\n   */\n  static getSunsetUTC(julianDay, latitude, longitude, zenith) {\n    const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n    // Find the time of solar noon at the location, and use that declination. This is better than start of the\n    // Julian day\n    const noonmin = NOAACalculator.getSolarNoonUTC(julianCenturies, longitude);\n    const tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440);\n    // First calculates sunrise and approx length of day\n    let eqTime = NOAACalculator.getEquationOfTime(tnoon);\n    let solarDec = NOAACalculator.getSunDeclination(tnoon);\n    let hourAngle = NOAACalculator.getSunHourAngleAtSunset(latitude, solarDec, zenith);\n    let delta = longitude - radiansToDegrees(hourAngle);\n    let timeDiff = 4 * delta;\n    let timeUTC = 720 + timeDiff - eqTime;\n    // Second pass includes fractional Julian Day in gamma calc\n    const newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + timeUTC / 1440);\n    eqTime = NOAACalculator.getEquationOfTime(newt);\n    solarDec = NOAACalculator.getSunDeclination(newt);\n    hourAngle = NOAACalculator.getSunHourAngleAtSunset(latitude, solarDec, zenith);\n    delta = longitude - radiansToDegrees(hourAngle);\n    timeDiff = 4 * delta;\n    timeUTC = 720 + timeDiff - eqTime; // in minutes\n    return timeUTC;\n  }\n}\n/**\n * The zenith of astronomical sunrise and sunset. The sun is 90&deg; from the vertical 0&deg;\n * @private\n */\nNOAACalculator.GEOMETRIC_ZENITH = 90;\n/**\n * Default value for Sun's zenith and true rise/set Zenith (used in this class and subclasses) is the angle that the\n * center of the Sun makes to a line perpendicular to the Earth's surface. If the Sun were a point and the Earth\n * were without an atmosphere, true sunset and sunrise would correspond to a 90&deg; zenith. Because the Sun is not\n * a point, and because the atmosphere refracts light, this 90&deg; zenith does not, in fact, correspond to true\n * sunset or sunrise, instead the center of the Sun's disk must lie just below the horizon for the upper edge to be\n * obscured. This means that a zenith of just above 90&deg; must be used. The Sun subtends an angle of 16 minutes of\n * arc, and atmospheric refraction accounts for\n * 34 minutes or so, giving a total of 50\n * arcminutes. The total value for ZENITH is 90+(5/6) or 90.8333333&deg; for true sunrise/sunset.\n */\n// const ZENITH: number = GEOMETRIC_ZENITH + 5.0 / 6.0;\n/** Sun's zenith at civil twilight (96&deg;). */\nNOAACalculator.CIVIL_ZENITH = 96;\n/** Sun's zenith at nautical twilight (102&deg;). */\nNOAACalculator.NAUTICAL_ZENITH = 102;\n/** Sun's zenith at astronomical twilight (108&deg;). */\nNOAACalculator.ASTRONOMICAL_ZENITH = 108;\n/**\n * The <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> of January 1, 2000\n * @private\n */\nNOAACalculator.JULIAN_DAY_JAN_1_2000 = 2451545;\n/**\n * Julian days per century\n * @private\n */\nNOAACalculator.JULIAN_DAYS_PER_CENTURY = 36525;","map":{"version":3,"names":["degreesToRadians","degrees","Math","PI","radiansToDegrees","radians","GeoLocation","constructor","name","latitude","longitude","elevation","timeZoneId","locationName","setLocationName","setLatitude","setLongitude","setElevation","setTimeZone","getElevation","TypeError","RangeError","getLatitude","getLongitude","getLocationName","getTimeZone","refraction","solarRadius","earthRadius","NOAACalculator","geoLocation","date","getSunrise","sunrise","getUTCSunrise0","GEOMETRIC_ZENITH","isNaN","getDateFromTime","getSeaLevelSunrise","getUTCSeaLevelSunrise","getBeginCivilTwilight","getSunriseOffsetByDegrees","CIVIL_ZENITH","getBeginNauticalTwilight","NAUTICAL_ZENITH","getBeginAstronomicalTwilight","ASTRONOMICAL_ZENITH","getSunset","sunset","getUTCSunset0","getSeaLevelSunset","getUTCSeaLevelSunset","getEndCivilTwilight","getSunsetOffsetByDegrees","getEndNauticalTwilight","getEndAstronomicalTwilight","getTimeOffset","time","offset","add","milliseconds","offsetZenith","dawn","zenith","getUTCSunrise","getAdjustedDate","getUTCSunset","getElevationAdjustment","elevationAdjustment","acos","adjustZenith","adjustedZenith","adjustForElevation","getSunriseUTC","getJulianDay","getSunsetUTC","getTemporalHour","startOfDay","endOfDay","NaN","delta","epochMilliseconds","floor","getSunTransit","temporalHour","isSunrise","calculatedTime","cal","hours","trunc","minutes","seconds","localTimeHours","days","toZonedDateTime","timeZone","plainTime","Temporal","PlainTime","withTimeZone","year","month","day","a","b","getJulianCenturiesFromJulianDay","julianDay","JULIAN_DAY_JAN_1_2000","JULIAN_DAYS_PER_CENTURY","getJulianDayFromJulianCenturies","julianCenturies","getSunGeometricMeanLongitude","getSunGeometricMeanAnomaly","getEarthOrbitEccentricity","getSunEquationOfCenter","m","mrad","sinm","sin","sin2m","sin3m","getSunTrueLongitude","sunLongitude","center","getSunApparentLongitude","sunTrueLongitude","omega","lambda","getMeanObliquityOfEcliptic","getObliquityCorrection","obliquityOfEcliptic","cos","getSunDeclination","obliquityCorrection","sint","theta","asin","getEquationOfTime","epsilon","geomMeanLongSun","eccentricityEarthOrbit","geomMeanAnomalySun","y","tan","sin2l0","cos2l0","sin4l0","equationOfTime","getSunHourAngleAtSunrise","lat","solarDec","latRad","sdRad","getSunHourAngleAtSunset","hourAngle","getSolarElevation","lon","toPlainDate","hour","minute","second","hourAngleRad","declination","decRad","getSolarAzimuth","atan","noonmin","getSolarNoonUTC","tnoon","eqTime","timeDiff","timeUTC","newt","solNoonUTC"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/noaa/dist/index.mjs"],"sourcesContent":["import 'temporal-polyfill/global';\n/**\n * java.lang.Math.toRadians\n * @private\n * @param degrees\n */\nfunction degreesToRadians(degrees) {\n    return (degrees * Math.PI) / 180;\n}\n/**\n * java.lang.Math.toDegrees\n * @private\n * @param radians\n */\nfunction radiansToDegrees(radians) {\n    return (radians * 180) / Math.PI;\n}\n/**\n * A class that contains location information such as latitude and longitude required for astronomical calculations. The\n * elevation field may not be used by some calculation engines and would be ignored if set.\n *\n * @author &copy; Eliyahu Hershfeld 2004 - 2016\n * @version 1.1\n */\nexport class GeoLocation {\n    /**\n     * GeoLocation constructor with parameters for all required fields.\n     *\n     * @param {string} name\n     *            The location name for display use such as &quot;Lakewood, NJ&quot;\n     * @param {number} latitude\n     *            the latitude in a double format such as 40.095965 for Lakewood, NJ.\n     *            <b>Note: </b> For latitudes south of the equator, a negative value should be used.\n     * @param {number} longitude\n     *            double the longitude in a double format such as -74.222130 for Lakewood, NJ.\n     *            <b>Note: </b> For longitudes west of the <a href=\"http://en.wikipedia.org/wiki/Prime_Meridian\">Prime\n     *            Meridian </a> (Greenwich), a negative value should be used.\n     * @param {number} elevation\n     *            the elevation above sea level in Meters. Elevation is not used in most algorithms used for calculating\n     *            sunrise and set.\n     * @param {string} timeZoneId\n     *            the <code>TimeZone</code> for the location.\n     */\n    constructor(name, latitude, longitude, elevation, timeZoneId) {\n        /**\n         * @private\n         */\n        this.locationName = null;\n        this.setLocationName(name);\n        this.setLatitude(latitude);\n        this.setLongitude(longitude);\n        this.setElevation(elevation);\n        this.setTimeZone(timeZoneId);\n    }\n    /**\n     * Method to get the elevation in Meters.\n     *\n     * @return {number} Returns the elevation in Meters.\n     */\n    getElevation() {\n        return this.elevation;\n    }\n    /**\n     * Method to set the elevation in Meters <b>above </b> sea level.\n     *\n     * @param {number} elevation\n     *            The elevation to set in Meters. An Error will be thrown if the value is a negative.\n     */\n    setElevation(elevation) {\n        if (typeof elevation !== 'number')\n            throw new TypeError('Invalid elevation');\n        if (elevation < 0) {\n            throw new RangeError(`elevation ${elevation} must be zero or positive`);\n        }\n        this.elevation = elevation;\n    }\n    setLatitude(latitude) {\n        if (typeof latitude !== 'number')\n            throw new TypeError('Invalid latitude');\n        if (latitude < -90 || latitude > 90) {\n            throw new RangeError(`Latitude ${latitude} out of range [-90,90]`);\n        }\n        this.latitude = latitude;\n    }\n    /**\n     * @return {number} Returns the latitude.\n     */\n    getLatitude() {\n        return this.latitude;\n    }\n    setLongitude(longitude) {\n        if (typeof longitude !== 'number')\n            throw new TypeError('Invalid longitude');\n        if (longitude < -180 || longitude > 180) {\n            throw new RangeError(`Longitude ${longitude} out of range [-180,180]`);\n        }\n        this.longitude = longitude;\n    }\n    /**\n     * @return {number} Returns the longitude.\n     */\n    getLongitude() {\n        return this.longitude;\n    }\n    /**\n     * @return {string|null} Returns the location name.\n     */\n    getLocationName() {\n        return this.locationName;\n    }\n    /**\n     * @param {string|null} name\n     *            The setter method for the display name.\n     */\n    setLocationName(name) {\n        this.locationName = name;\n    }\n    /**\n     * @return {string} Returns the timeZone.\n     */\n    getTimeZone() {\n        return this.timeZoneId;\n    }\n    /**\n     * Method to set the TimeZone.\n     * @param {string} timeZoneId\n     *            The timeZone to set.\n     */\n    setTimeZone(timeZoneId) {\n        this.timeZoneId = timeZoneId;\n    }\n}\n/**\n * The commonly used average solar refraction. Calendrical Calculations lists a more accurate global average of\n * 34.478885263888294\n * @private\n */\nconst refraction = 34 / 60;\n// private double refraction = 34.478885263888294 / 60d;\n/**\n * The commonly used average solar radius in minutes of a degree.\n * @private\n */\nconst solarRadius = 16 / 60;\n/**\n * The commonly used average earth radius in KM. At this time, this only affects elevation adjustment and not the\n * sunrise and sunset calculations. The value currently defaults to 6356.9 KM.\n * @private\n */\nconst earthRadius = 6356.9; // in KM\n/**\n * Implementation of sunrise and sunset methods to calculate astronomical times based on the <a\n * href=\"http://noaa.gov\">NOAA</a> algorithm. This calculator uses the Java algorithm based on the implementation by <a\n * href=\"http://noaa.gov\">NOAA - National Oceanic and Atmospheric Administration</a>'s <a href =\n * \"http://www.srrb.noaa.gov/highlights/sunrise/sunrise.html\">Surface Radiation Research Branch</a>. NOAA's <a\n * href=\"http://www.srrb.noaa.gov/highlights/sunrise/solareqns.PDF\">implementation</a> is based on equations from <a\n * href=\"http://www.willbell.com/math/mc1.htm\">Astronomical Algorithms</a> by <a\n * href=\"http://en.wikipedia.org/wiki/Jean_Meeus\">Jean Meeus</a>. Added to the algorithm is an adjustment of the zenith\n * to account for elevation. The algorithm can be found in the <a\n * href=\"http://en.wikipedia.org/wiki/Sunrise_equation\">Wikipedia Sunrise Equation</a> article.\n *\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\n */\nexport class NOAACalculator {\n    /**\n     * A constructor that takes in <a href=\"http://en.wikipedia.org/wiki/Geolocation\">geolocation</a> information as a\n     * parameter.\n     *\n     * @param {GeoLocation} geoLocation\n     *            The location information used for calculating astronomical sun times.\n     * @param {Temporal.PlainDate} date\n     */\n    constructor(geoLocation, date) {\n        this.date = date;\n        this.geoLocation = geoLocation;\n    }\n    /**\n     * The getSunrise method Returns a `Date` representing the\n     * {@link getElevationAdjustment elevation adjusted} sunrise time. The zenith used\n     * for the calculation uses {@link GEOMETRIC_ZENITH geometric zenith} of 90&deg; plus\n     * {@link getElevationAdjustment}. This is adjusted\n     * to add approximately 50/60 of a degree to account for 34 archminutes of refraction\n     * and 16 archminutes for the sun's radius for a total of {@link adjustZenith 90.83333&deg;}.\n     *\n     * @return {Temporal.ZonedDateTime | null} the `Date` representing the exact sunrise time. If the calculation can't be computed such as\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n     *         does not set, a null will be returned. See detailed explanation on top of the page.\n     * @see adjustZenith\n     * @see getSeaLevelSunrise()\n     * @see getUTCSunrise\n     */\n    getSunrise() {\n        const sunrise = this.getUTCSunrise0(NOAACalculator.GEOMETRIC_ZENITH);\n        if (isNaN(sunrise))\n            return null;\n        return this.getDateFromTime(sunrise, true);\n    }\n    /**\n     * A method that returns the sunrise without {@link getElevationAdjustment elevation\n     * adjustment}. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible light,\n     * something that is not affected by elevation. This method returns sunrise calculated at sea level. This forms the\n     * base for dawn calculations that are calculated as a dip below the horizon before sunrise.\n     *\n     * @return {Temporal.ZonedDateTime | null} the `Date` representing the exact sea-level sunrise time. If the calculation can't be computed\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n     *         where it does not set, a null will be returned. See detailed explanation on top of the page.\n     * @see getSunrise\n     * @see getUTCSeaLevelSunrise\n     * @see getSeaLevelSunset()\n     */\n    getSeaLevelSunrise() {\n        const sunrise = this.getUTCSeaLevelSunrise(NOAACalculator.GEOMETRIC_ZENITH);\n        if (isNaN(sunrise))\n            return null;\n        return this.getDateFromTime(sunrise, true);\n    }\n    /**\n     * A method that returns the beginning of civil twilight (dawn) using a zenith of {@link CIVIL_ZENITH 96&deg;}.\n     *\n     * @return {Temporal.ZonedDateTime | null} The `Date` of the beginning of civil twilight using a zenith of 96&deg;. If the calculation\n     *         can't be computed, null will be returned. See detailed explanation on top of the page.\n     * @see CIVIL_ZENITH\n     */\n    getBeginCivilTwilight() {\n        return this.getSunriseOffsetByDegrees(NOAACalculator.CIVIL_ZENITH);\n    }\n    /**\n     * A method that returns the beginning of nautical twilight using a zenith of {@link NAUTICAL_ZENITH 102&deg;}.\n     *\n     * @return {Temporal.ZonedDateTime | null} The `Date` of the beginning of nautical twilight using a zenith of 102&deg;. If the\n     *         calculation can't be computed null will be returned. See detailed explanation on top of the page.\n     * @see NAUTICAL_ZENITH\n     */\n    getBeginNauticalTwilight() {\n        return this.getSunriseOffsetByDegrees(NOAACalculator.NAUTICAL_ZENITH);\n    }\n    /**\n     * A method that returns the beginning of astronomical twilight using a zenith of {@link ASTRONOMICAL_ZENITH\n     * 108&deg;}.\n     *\n     * @return {Temporal.ZonedDateTime | null} The `Date` of the beginning of astronomical twilight using a zenith of 108&deg;. If the\n     *         calculation can't be computed, null will be returned. See detailed explanation on top of the page.\n     * @see ASTRONOMICAL_ZENITH\n     */\n    getBeginAstronomicalTwilight() {\n        return this.getSunriseOffsetByDegrees(NOAACalculator.ASTRONOMICAL_ZENITH);\n    }\n    /**\n     * The getSunset method Returns a `Date` representing the\n     * {@link getElevationAdjustment elevation adjusted} sunset time. The zenith used for\n     * the calculation uses {@link GEOMETRIC_ZENITH geometric zenith} of 90&deg; plus\n     * {@link getElevationAdjustment}. This is adjusted\n     * to add approximately 50/60 of a degree to account for 34 archminutes of refraction\n     * and 16 archminutes for the sun's radius for a total of {@link adjustZenith 90.83333&deg;}.\n     * Note:\n     * In certain cases the calculates sunset will occur before sunrise. This will typically happen when a timezone\n     * other than the local timezone is used (calculating Los Angeles sunset using a GMT timezone for example). In this\n     * case the sunset date will be incremented to the following date.\n     *\n     * @return {Temporal.ZonedDateTime | null} The `Date` representing the exact sunset time. If the calculation can't be computed such as in\n     *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n     *         does not set, a null will be returned. See detailed explanation on top of the page.\n     * @see adjustZenith\n     * @see getSeaLevelSunset()\n     * @see getUTCSunset\n     */\n    getSunset() {\n        const sunset = this.getUTCSunset0(NOAACalculator.GEOMETRIC_ZENITH);\n        if (isNaN(sunset))\n            return null;\n        return this.getDateFromTime(sunset, false);\n    }\n    /**\n     * A method that returns the sunset without {@link getElevationAdjustment elevation\n     * adjustment}. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible light,\n     * something that is not affected by elevation. This method returns sunset calculated at sea level. This forms the\n     * base for dusk calculations that are calculated as a dip below the horizon after sunset.\n     *\n     * @return {Temporal.ZonedDateTime | null} The `Date` representing the exact sea-level sunset time. If the calculation can't be computed\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n     *         where it does not set, a null will be returned. See detailed explanation on top of the page.\n     * @see getSunset\n     * @see getUTCSeaLevelSunset\n     */\n    getSeaLevelSunset() {\n        const sunset = this.getUTCSeaLevelSunset(NOAACalculator.GEOMETRIC_ZENITH);\n        if (isNaN(sunset))\n            return null;\n        return this.getDateFromTime(sunset, false);\n    }\n    /**\n     * A method that returns the end of civil twilight using a zenith of {@link CIVIL_ZENITH 96&deg;}.\n     *\n     * @return {Temporal.ZonedDateTime | null} The `Date` of the end of civil twilight using a zenith of {@link CIVIL_ZENITH 96&deg;}. If\n     *         the calculation can't be computed, null will be returned. See detailed explanation on top of the page.\n     * @see CIVIL_ZENITH\n     */\n    getEndCivilTwilight() {\n        return this.getSunsetOffsetByDegrees(NOAACalculator.CIVIL_ZENITH);\n    }\n    /**\n     * A method that returns the end of nautical twilight using a zenith of {@link NAUTICAL_ZENITH 102&deg;}.\n     *\n     * @return {Temporal.ZonedDateTime | null} The `Date` of the end of nautical twilight using a zenith of {@link NAUTICAL_ZENITH 102&deg;}\n     *         . If the calculation can't be computed, null will be returned. See detailed explanation on top of the\n     *         page.\n     * @see NAUTICAL_ZENITH\n     */\n    getEndNauticalTwilight() {\n        return this.getSunsetOffsetByDegrees(NOAACalculator.NAUTICAL_ZENITH);\n    }\n    /**\n     * A method that returns the end of astronomical twilight using a zenith of {@link ASTRONOMICAL_ZENITH 108&deg;}.\n     *\n     * @return {Temporal.ZonedDateTime | null} The `Date` of the end of astronomical twilight using a zenith of {@link ASTRONOMICAL_ZENITH\n     *         108&deg;}. If the calculation can't be computed, null will be returned. See detailed explanation on top\n     *         of the page.\n     * @see ASTRONOMICAL_ZENITH\n     */\n    getEndAstronomicalTwilight() {\n        return this.getSunsetOffsetByDegrees(NOAACalculator.ASTRONOMICAL_ZENITH);\n    }\n    /**\n     * A utility method that returns a date offset by the offset time passed in. Please note that the level of light\n     * during twilight is not affected by elevation, so if this is being used to calculate an offset before sunrise or\n     * after sunset with the intent of getting a rough \"level of light\" calculation, the sunrise or sunset time passed\n     * to this method should be sea level sunrise and sunset.\n     *\n     * @param {Temporal.ZonedDateTime | null} time\n     *            the start time\n     * @param {number} offset\n     *            the offset in milliseconds to add to the time.\n     * @return {Temporal.ZonedDateTime | null} the `Date` with the offset in milliseconds added to it\n     */\n    static getTimeOffset(time, offset) {\n        if (time === null || isNaN(offset)) {\n            return null;\n        }\n        return time.add({ milliseconds: offset });\n    }\n    /**\n     * A utility method that returns the time of an offset by degrees below or above the horizon of\n     * {@link getSunrise() sunrise}. Note that the degree offset is from the vertical, so for a calculation of 14&deg;\n     * before sunrise, an offset of 14 + {@link GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\n     *\n     * @param {number} offsetZenith\n     *            the degrees before {@link getSunrise} to use in the calculation. For time after sunrise use\n     *            negative numbers. Note that the degree offset is from the vertical, so for a calculation of 14&deg;\n     *            before sunrise, an offset of 14 + {@link GEOMETRIC_ZENITH} = 104 would have to be passed as a\n     *            parameter.\n     * @return {Temporal.ZonedDateTime | null} The `Date` of the offset after (or before) {@link getSunrise}. If the calculation\n     *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\n     *         not rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\n     *         page.\n     */\n    getSunriseOffsetByDegrees(offsetZenith) {\n        const dawn = this.getUTCSunrise0(offsetZenith);\n        if (isNaN(dawn))\n            return null;\n        return this.getDateFromTime(dawn, true);\n    }\n    /**\n     * A utility method that returns the time of an offset by degrees below or above the horizon of {@link getSunset()\n     * sunset}. Note that the degree offset is from the vertical, so for a calculation of 14&deg; after sunset, an\n     * offset of 14 + {@link GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\n     *\n     * @param {number} offsetZenith\n     *            the degrees after {@link getSunset} to use in the calculation. For time before sunset use negative\n     *            numbers. Note that the degree offset is from the vertical, so for a calculation of 14&deg; after\n     *            sunset, an offset of 14 + {@link GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\n     * @return {Temporal.ZonedDateTime | null} The `Date`of the offset after (or before) {@link getSunset}. If the calculation can't\n     *         be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\n     *         rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\n     *         page.\n     */\n    getSunsetOffsetByDegrees(offsetZenith) {\n        const sunset = this.getUTCSunset0(offsetZenith);\n        if (isNaN(sunset))\n            return null;\n        return this.getDateFromTime(sunset, false);\n    }\n    /**\n     * A method that returns the sunrise in UTC time without correction for time zone offset from GMT and without using\n     * daylight savings time.\n     *\n     * @param {number} zenith\n     *            the degrees below the horizon. For time after sunrise use negative numbers.\n     * @return {number} The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n     *         not set, `NaN` will be returned. See detailed explanation on top of the page.\n     */\n    getUTCSunrise0(zenith) {\n        return this.getUTCSunrise(this.getAdjustedDate(), this.geoLocation, zenith, true);\n    }\n    /**\n     * A method that returns the sunrise in UTC time without correction for time zone offset from GMT and without using\n     * daylight savings time. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible\n     * light, something that is not affected by elevation. This method returns UTC sunrise calculated at sea level. This\n     * forms the base for dawn calculations that are calculated as a dip below the horizon before sunrise.\n     *\n     * @param {number} zenith\n     *            the degrees below the horizon. For time after sunrise use negative numbers.\n     * @return {number} The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n     *         not set, `NaN` will be returned. See detailed explanation on top of the page.\n     * @see getUTCSunrise\n     * @see getUTCSeaLevelSunset\n     */\n    getUTCSeaLevelSunrise(zenith) {\n        return this.getUTCSunrise(this.getAdjustedDate(), this.geoLocation, zenith, false);\n    }\n    /**\n     * A method that returns the sunset in UTC time without correction for time zone offset from GMT and without using\n     * daylight savings time.\n     *\n     * @param {number} zenith\n     *            the degrees below the horizon. For time after sunset use negative numbers.\n     * @return {number} The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n     *         not set, `NaN` will be returned. See detailed explanation on top of the page.\n     * @see getUTCSeaLevelSunset\n     */\n    getUTCSunset0(zenith) {\n        return this.getUTCSunset(this.getAdjustedDate(), this.geoLocation, zenith, true);\n    }\n    /**\n     * A method that returns the sunset in UTC time without correction for elevation, time zone offset from GMT and\n     * without using daylight savings time. Non-sunrise and sunset calculations such as dawn and dusk, depend on the\n     * amount of visible light, something that is not affected by elevation. This method returns UTC sunset calculated\n     * at sea level. This forms the base for dusk calculations that are calculated as a dip below the horizon after\n     * sunset.\n     *\n     * @param {number} zenith\n     *            the degrees below the horizon. For time before sunset use negative numbers.\n     * @return {number} The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n     *         not set, `NaN` will be returned. See detailed explanation on top of the page.\n     * @see getUTCSunset\n     * @see getUTCSeaLevelSunrise\n     */\n    getUTCSeaLevelSunset(zenith) {\n        return this.getUTCSunset(this.getAdjustedDate(), this.geoLocation, zenith, false);\n    }\n    /**\n     * Adjusts the <code>Calendar</code> to deal with edge cases where the location crosses the antimeridian.\n     * @private\n     * @see GeoLocation#getAntimeridianAdjustment()\n     * @return the adjusted Calendar\n     */\n    getAdjustedDate() {\n        return this.date;\n    }\n    /**\n     * Method to return the adjustment to the zenith required to account for the elevation. Since a person at a higher\n     * elevation can see farther below the horizon, the calculation for sunrise / sunset is calculated below the horizon\n     * used at sea level. This is only used for sunrise and sunset and not times before or after it such as\n     * {@link getBeginNauticalTwilight() nautical twilight} since those\n     * calculations are based on the level of available light at the given dip below the horizon, something that is not\n     * affected by elevation, the adjustment should only made if the zenith == 90&deg; {@link adjustZenith adjusted}\n     * for refraction and solar radius. The algorithm used is\n     *\n     * <pre>\n     * elevationAdjustment = Math.toDegrees(Math.acos(earthRadiusInMeters / (earthRadiusInMeters + elevationMeters)));\n     * </pre>\n     *\n     * The source of this algorithm is <a href=\"http://www.calendarists.com\">Calendrical Calculations</a> by Edward M.\n     * Reingold and Nachum Dershowitz. An alternate algorithm that produces an almost identical (but not accurate)\n     * result found in Ma'aglay Tzedek by Moishe Kosower and other sources is:\n     *\n     * <pre>\n     * elevationAdjustment = 0.0347 * Math.sqrt(elevationMeters);\n     * </pre>\n     *\n     * @param {number} elevation\n     *            elevation in Meters.\n     * @return {number} the adjusted zenith\n     */\n    getElevationAdjustment(elevation) {\n        // double elevationAdjustment = 0.0347 * Math.sqrt(elevation);\n        const elevationAdjustment = radiansToDegrees(Math.acos(earthRadius / (earthRadius + elevation / 1000)));\n        return elevationAdjustment;\n    }\n    /**\n     * Adjusts the zenith of astronomical sunrise and sunset to account for solar refraction, solar radius and\n     * elevation. The value for Sun's zenith and true rise/set Zenith (used in this class and subclasses) is the angle\n     * that the center of the Sun makes to a line perpendicular to the Earth's surface. If the Sun were a point and the\n     * Earth were without an atmosphere, true sunset and sunrise would correspond to a 90&deg; zenith. Because the Sun\n     * is not a point, and because the atmosphere refracts light, this 90&deg; zenith does not, in fact, correspond to\n     * true sunset or sunrise, instead the centre of the Sun's disk must lie just below the horizon for the upper edge\n     * to be obscured. This means that a zenith of just above 90&deg; must be used. The Sun subtends an angle of 16\n     * minutes of arc, and atmospheric refraction\n     * accounts for 34 minutes or so, giving a total\n     * of 50 arcminutes. The total value for ZENITH is 90+(5/6) or 90.8333333&deg; for true sunrise/sunset. Since a\n     * person at an elevation can see blow the horizon of a person at sea level, this will also adjust the zenith to\n     * account for elevation if available. Note that this will only adjust the value if the zenith is exactly 90 degrees.\n     * For values below and above this no correction is done. As an example, astronomical twilight is when the sun is\n     * 18&deg; below the horizon or {@link ASTRONOMICAL_ZENITH 108&deg;\n     * below the zenith}. This is traditionally calculated with none of the above mentioned adjustments. The same goes\n     * for various <em>tzais</em> and <em>alos</em> times such as the\n     * {@link ZmanimCalendar#ZENITH_16_POINT_1 16.1&deg;} dip used in\n     * {@link ComplexZmanimCalendar#getAlos16Point1Degrees}.\n     *\n     * @param {number} zenith\n     *            the azimuth below the vertical zenith of 90&deg;. For sunset typically the {@link adjustZenith\n     *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link adjustZenith adjusts}\n     *            this slightly to account for solar refraction and the sun's radius. Another example would be\n     *            {@link getEndNauticalTwilight} that passes\n     *            {@link NAUTICAL_ZENITH} to this method.\n     * @param {number} elevation\n     *            elevation in Meters.\n     * @return {number} The zenith adjusted to include the sun's radius, refracton\n     *         and {@link getElevationAdjustment elevation} adjustment. This will only be adjusted for\n     *         sunrise and sunset (if the zenith == 90&deg;)\n     * @see getElevationAdjustment\n     */\n    adjustZenith(zenith, elevation) {\n        let adjustedZenith = zenith;\n        if (zenith === NOAACalculator.GEOMETRIC_ZENITH) {\n            // only adjust if it is exactly sunrise or sunset\n            adjustedZenith =\n                zenith +\n                    (solarRadius + refraction + this.getElevationAdjustment(elevation));\n        }\n        return adjustedZenith;\n    }\n    /**\n     * A method that calculates UTC sunrise as well as any time based on an angle above or below sunrise.\n     * @param date\n     *            Used to calculate day of year.\n     * @param geoLocation\n     *            The location information used for astronomical calculating sun times.\n     * @param zenith\n     *            the azimuth below the vertical zenith of 90 degrees. for sunrise typically the {@link adjustZenith\n     *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link adjustZenith adjusts}\n     *            this slightly to account for solar refraction and the sun's radius. Another example would be\n     *            {@link getBeginNauticalTwilight} that passes\n     *            {@link NAUTICAL_ZENITH} to this method.\n     * @param adjustForElevation\n     *            Should the time be adjusted for elevation\n     * @return The UTC time of sunrise in 24 hour format. 5:45:00 AM will return 5.75.0. If an error was encountered in\n     *         the calculation (expected behavior for some locations such as near the poles,\n     *         `NaN` will be returned.\n     */\n    getUTCSunrise(date, geoLocation, zenith, adjustForElevation) {\n        const elevation = adjustForElevation\n            ? geoLocation.getElevation()\n            : 0;\n        const adjustedZenith = this.adjustZenith(zenith, elevation);\n        let sunrise = NOAACalculator.getSunriseUTC(NOAACalculator.getJulianDay(date), geoLocation.getLatitude(), -geoLocation.getLongitude(), adjustedZenith);\n        sunrise = sunrise / 60;\n        // ensure that the time is >= 0 and < 24\n        while (sunrise < 0) {\n            sunrise += 24;\n        }\n        while (sunrise >= 24) {\n            sunrise -= 24;\n        }\n        return sunrise;\n    }\n    /**\n     * A method that calculates UTC sunset as well as any time based on an angle above or below sunset.\n     * @param date\n     *            Used to calculate day of year.\n     * @param geoLocation\n     *            The location information used for astronomical calculating sun times.\n     * @param zenith\n     *            the azimuth below the vertical zenith of 90&deg;. For sunset typically the {@link adjustZenith\n     *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link adjustZenith adjusts}\n     *            this slightly to account for solar refraction and the sun's radius. Another example would be\n     *            {@link getEndNauticalTwilight} that passes\n     *            {@link NAUTICAL_ZENITH} to this method.\n     * @param adjustForElevation\n     *            Should the time be adjusted for elevation\n     * @return The UTC time of sunset in 24 hour format. 5:45:00 AM will return 5.75.0. If an error was encountered in\n     *         the calculation (expected behavior for some locations such as near the poles,\n     *         `NaN` will be returned.\n     */\n    getUTCSunset(date, geoLocation, zenith, adjustForElevation) {\n        const elevation = adjustForElevation\n            ? geoLocation.getElevation()\n            : 0;\n        const adjustedZenith = this.adjustZenith(zenith, elevation);\n        let sunset = NOAACalculator.getSunsetUTC(NOAACalculator.getJulianDay(date), geoLocation.getLatitude(), -geoLocation.getLongitude(), adjustedZenith);\n        sunset = sunset / 60;\n        // ensure that the time is >= 0 and < 24\n        while (sunset < 0) {\n            sunset += 24;\n        }\n        while (sunset >= 24) {\n            sunset -= 24;\n        }\n        return sunset;\n    }\n    /**\n     * A utility method that will allow the calculation of a temporal (solar) hour based on the sunrise and sunset\n     * passed as parameters to this method. An example of the use of this method would be the calculation of a\n     * non-elevation adjusted temporal hour by passing in {@link getSeaLevelSunrise() sea level sunrise} and\n     * {@link getSeaLevelSunset() sea level sunset} as parameters.\n     *\n     * @param {Temporal.ZonedDateTime | null} startOfDay\n     *            The start of the day.\n     * @param {Temporal.ZonedDateTime | null} endOfDay\n     *            The end of the day.\n     *\n     * @return {number} the <code>long</code> millisecond length of the temporal hour. If the calculation can't be computed a\n     *         `NaN` will be returned. See detailed explanation on top of the page.\n     *\n     * @see getTemporalHour()\n     */\n    getTemporalHour(startOfDay = this.getSeaLevelSunrise(), endOfDay = this.getSeaLevelSunset()) {\n        if (startOfDay === null || endOfDay === null) {\n            return NaN;\n        }\n        const delta = endOfDay.epochMilliseconds - startOfDay.epochMilliseconds;\n        return Math.floor(delta / 12);\n    }\n    /**\n     * A method that returns sundial or solar noon. It occurs when the Sun is <a href\n     * =\"http://en.wikipedia.org/wiki/Transit_%28astronomy%29\">transiting</a> the <a\n     * href=\"http://en.wikipedia.org/wiki/Meridian_%28astronomy%29\">celestial meridian</a>. In this class it is\n     * calculated as halfway between the sunrise and sunset passed to this method. This time can be slightly off the\n     * real transit time due to changes in declination (the lengthening or shortening day).\n     *\n     * @param {Temporal.ZonedDateTime | null} startOfDay\n     *            the start of day for calculating the sun's transit. This can be sea level sunrise, visual sunrise (or\n     *            any arbitrary start of day) passed to this method.\n     * @param {Temporal.ZonedDateTime | null} endOfDay\n     *            the end of day for calculating the sun's transit. This can be sea level sunset, visual sunset (or any\n     *            arbitrary end of day) passed to this method.\n     *\n     * @return {Temporal.ZonedDateTime | null} The `Date` representing Sun's transit. If the calculation can't be computed such as in the\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n     *         not set, null will be returned. See detailed explanation on top of the page.\n     */\n    getSunTransit(startOfDay = this.getSeaLevelSunrise(), endOfDay = this.getSeaLevelSunset()) {\n        const temporalHour = this.getTemporalHour(startOfDay, endOfDay);\n        return NOAACalculator.getTimeOffset(startOfDay, temporalHour * 6);\n    }\n    /**\n     * A method that returns a `Date` from the time passed in as a parameter.\n     * @protected\n     * @param {number} time\n     *            The time to be set as the time for the `Date`. The time expected is in the format: 18.75\n     *            for 6:45:00 PM.\n     * @param {boolean} isSunrise true if the time is sunrise, and false if it is sunset\n     * @return {Temporal.ZonedDateTime | null} The Date.\n     */\n    getDateFromTime(time, isSunrise) {\n        if (isNaN(time)) {\n            return null;\n        }\n        let calculatedTime = time;\n        let cal = this.getAdjustedDate();\n        //    let cal = new Temporal.PlainDate(adj.year, adj.month, adj.day);\n        const hours = Math.trunc(calculatedTime); // retain only the hours\n        calculatedTime -= hours;\n        const minutes = Math.trunc((calculatedTime *= 60)); // retain only the minutes\n        calculatedTime -= minutes;\n        const seconds = Math.trunc((calculatedTime *= 60)); // retain only the seconds\n        calculatedTime -= seconds; // remaining milliseconds\n        // Check if a date transition has occurred, or is about to occur - this indicates the date of the event is\n        // actually not the target date, but the day prior or after\n        const localTimeHours = Math.trunc(this.geoLocation.getLongitude() / 15);\n        if (isSunrise && localTimeHours + hours > 18) {\n            cal = cal.add({ days: -1 });\n            //      cal = cal.minus({days: 1});\n        }\n        else if (!isSunrise && localTimeHours + hours < 6) {\n            cal = cal.add({ days: 1 });\n        }\n        return cal\n            .toZonedDateTime({\n            timeZone: 'UTC',\n            plainTime: new Temporal.PlainTime(hours, minutes, seconds, Math.trunc(calculatedTime * 1000)),\n        })\n            .withTimeZone(this.geoLocation.getTimeZone());\n    }\n    /**\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> from a Java Calendar\n     * @private\n     * @param {Temporal.ZonedDateTime} date\n     *            The Java Calendar\n     * @return the Julian day corresponding to the date Note: Number is returned for start of day. Fractional days\n     *         should be added later.\n     */\n    static getJulianDay(date) {\n        let { year, month } = date;\n        const { day } = date;\n        if (month <= 2) {\n            year -= 1;\n            month += 12;\n        }\n        const a = Math.trunc(year / 100);\n        const b = Math.trunc(2 - a + a / 4);\n        return (Math.floor(365.25 * (year + 4716)) +\n            Math.floor(30.6001 * (month + 1)) +\n            day +\n            b -\n            1524.5);\n    }\n    /**\n     * Convert <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> to centuries since J2000.0.\n     * @private\n     * @param julianDay\n     *            the Julian Day to convert\n     * @return the centuries since 2000 Julian corresponding to the Julian Day\n     */\n    static getJulianCenturiesFromJulianDay(julianDay) {\n        return ((julianDay - NOAACalculator.JULIAN_DAY_JAN_1_2000) /\n            NOAACalculator.JULIAN_DAYS_PER_CENTURY);\n    }\n    /**\n     * Convert centuries since J2000.0 to <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a>.\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return the Julian Day corresponding to the Julian centuries passed in\n     */\n    static getJulianDayFromJulianCenturies(julianCenturies) {\n        return (julianCenturies * NOAACalculator.JULIAN_DAYS_PER_CENTURY +\n            NOAACalculator.JULIAN_DAY_JAN_1_2000);\n    }\n    /**\n     * Returns the Geometric <a href=\"http://en.wikipedia.org/wiki/Mean_longitude\">Mean Longitude</a> of the Sun.\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return the Geometric Mean Longitude of the Sun in degrees\n     */\n    static getSunGeometricMeanLongitude(julianCenturies) {\n        let longitude = 280.46646 + julianCenturies * (36000.76983 + 0.0003032 * julianCenturies);\n        while (longitude > 360) {\n            longitude -= 360;\n        }\n        while (longitude < 0) {\n            longitude += 360;\n        }\n        return longitude; // in degrees\n    }\n    /**\n     * Returns the Geometric <a href=\"http://en.wikipedia.org/wiki/Mean_anomaly\">Mean Anomaly</a> of the Sun.\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return the Geometric Mean Anomaly of the Sun in degrees\n     */\n    static getSunGeometricMeanAnomaly(julianCenturies) {\n        return (357.52911 + julianCenturies * (35999.05029 - 0.0001537 * julianCenturies)); // in degrees\n    }\n    /**\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Eccentricity_%28orbit%29\">eccentricity of earth's orbit</a>.\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return the unitless eccentricity\n     */\n    static getEarthOrbitEccentricity(julianCenturies) {\n        return (0.016708634 -\n            julianCenturies * (0.000042037 + 0.0000001267 * julianCenturies)); // unitless\n    }\n    /**\n     * Returns the <a href=\"http://en.wikipedia.org/wiki/Equation_of_the_center\">equation of center</a> for the sun.\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return the equation of center for the sun in degrees\n     */\n    static getSunEquationOfCenter(julianCenturies) {\n        const m = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\n        const mrad = degreesToRadians(m);\n        const sinm = Math.sin(mrad);\n        const sin2m = Math.sin(mrad + mrad);\n        const sin3m = Math.sin(mrad + mrad + mrad);\n        return (sinm *\n            (1.914602 - julianCenturies * (0.004817 + 0.000014 * julianCenturies)) +\n            sin2m * (0.019993 - 0.000101 * julianCenturies) +\n            sin3m * 0.000289); // in degrees\n    }\n    /**\n     * Return the true longitude of the sun\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return the sun's true longitude in degrees\n     */\n    static getSunTrueLongitude(julianCenturies) {\n        const sunLongitude = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\n        const center = NOAACalculator.getSunEquationOfCenter(julianCenturies);\n        return sunLongitude + center; // in degrees\n    }\n    /**\n     * Return the apparent longitude of the sun\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return sun's apparent longitude in degrees\n     */\n    static getSunApparentLongitude(julianCenturies) {\n        const sunTrueLongitude = NOAACalculator.getSunTrueLongitude(julianCenturies);\n        const omega = 125.04 - 1934.136 * julianCenturies;\n        const lambda = sunTrueLongitude - 0.00569 - 0.00478 * Math.sin(degreesToRadians(omega));\n        return lambda; // in degrees\n    }\n    /**\n     * Returns the mean <a href=\"http://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial tilt).\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return the mean obliquity in degrees\n     */\n    static getMeanObliquityOfEcliptic(julianCenturies) {\n        const seconds = 21.448 -\n            julianCenturies *\n                (46.815 + julianCenturies * (0.00059 - julianCenturies * 0.001813));\n        return 23 + (26 + seconds / 60) / 60; // in degrees\n    }\n    /**\n     * Returns the corrected <a href=\"http://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial\n     * tilt).\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return the corrected obliquity in degrees\n     */\n    static getObliquityCorrection(julianCenturies) {\n        const obliquityOfEcliptic = NOAACalculator.getMeanObliquityOfEcliptic(julianCenturies);\n        const omega = 125.04 - 1934.136 * julianCenturies;\n        return obliquityOfEcliptic + 0.00256 * Math.cos(degreesToRadians(omega)); // in degrees\n    }\n    /**\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Declination\">declination</a> of the sun.\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return\n     *            the sun's declination in degrees\n     */\n    static getSunDeclination(julianCenturies) {\n        const obliquityCorrection = NOAACalculator.getObliquityCorrection(julianCenturies);\n        const lambda = NOAACalculator.getSunApparentLongitude(julianCenturies);\n        const sint = Math.sin(degreesToRadians(obliquityCorrection)) *\n            Math.sin(degreesToRadians(lambda));\n        const theta = radiansToDegrees(Math.asin(sint));\n        return theta; // in degrees\n    }\n    /**\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Equation_of_time\">Equation of Time</a> - the difference between\n     * true solar time and mean solar time\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @return equation of time in minutes of time\n     */\n    static getEquationOfTime(julianCenturies) {\n        const epsilon = NOAACalculator.getObliquityCorrection(julianCenturies);\n        const geomMeanLongSun = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\n        const eccentricityEarthOrbit = NOAACalculator.getEarthOrbitEccentricity(julianCenturies);\n        const geomMeanAnomalySun = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\n        let y = Math.tan(degreesToRadians(epsilon) / 2);\n        y *= y;\n        const sin2l0 = Math.sin(2 * degreesToRadians(geomMeanLongSun));\n        const sinm = Math.sin(degreesToRadians(geomMeanAnomalySun));\n        const cos2l0 = Math.cos(2 * degreesToRadians(geomMeanLongSun));\n        const sin4l0 = Math.sin(4 * degreesToRadians(geomMeanLongSun));\n        const sin2m = Math.sin(2 * degreesToRadians(geomMeanAnomalySun));\n        const equationOfTime = y * sin2l0 -\n            2 * eccentricityEarthOrbit * sinm +\n            4 * eccentricityEarthOrbit * y * sinm * cos2l0 -\n            0.5 * y * y * sin4l0 -\n            1.25 * eccentricityEarthOrbit * eccentricityEarthOrbit * sin2m;\n        return radiansToDegrees(equationOfTime) * 4; // in minutes of time\n    }\n    /**\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun at sunrise for the\n     * latitude.\n     * @private\n     * @param {number} lat\n     *            , the latitude of observer in degrees\n     * @param solarDec\n     *            the declination angle of sun in degrees\n     * @param {number} zenith\n     *            the zenith\n     * @return hour angle of sunrise in radians\n     */\n    static getSunHourAngleAtSunrise(lat, solarDec, zenith) {\n        const latRad = degreesToRadians(lat);\n        const sdRad = degreesToRadians(solarDec);\n        return Math.acos(Math.cos(degreesToRadians(zenith)) /\n            (Math.cos(latRad) * Math.cos(sdRad)) -\n            Math.tan(latRad) * Math.tan(sdRad)); // in radians\n    }\n    /**\n     * Returns the <a href=\"http://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun at sunset for the\n     * latitude.\n     * @private\n     * @param {number} lat\n     *            the latitude of observer in degrees\n     * @param solarDec\n     *            the declination angle of sun in degrees\n     * @param {number} zenith\n     *            the zenith\n     * @return the hour angle of sunset in radians\n     */\n    static getSunHourAngleAtSunset(lat, solarDec, zenith) {\n        const latRad = degreesToRadians(lat);\n        const sdRad = degreesToRadians(solarDec);\n        const hourAngle = Math.acos(Math.cos(degreesToRadians(zenith)) /\n            (Math.cos(latRad) * Math.cos(sdRad)) -\n            Math.tan(latRad) * Math.tan(sdRad));\n        return -hourAngle; // in radians\n    }\n    /**\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Elevation</a> for the\n     * horizontal coordinate system at the given location at the given time. Can be negative if the sun is below the\n     * horizon. Not corrected for altitude.\n     *\n     * @param {Temporal.ZonedDateTime} date\n     *            time of calculation\n     * @param {number} lat\n     *            latitude of location for calculation\n     * @param {number} lon\n     *            longitude of location for calculation\n     * @return {number} solar elevation in degrees - horizon is 0 degrees, civil twilight is -6 degrees\n     */\n    static getSolarElevation(date, lat, lon) {\n        const julianDay = NOAACalculator.getJulianDay(date.toPlainDate());\n        const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n        const equationOfTime = NOAACalculator.getEquationOfTime(julianCenturies);\n        let longitude = date.hour + 12 + (date.minute + equationOfTime + date.second / 60) / 60;\n        longitude = -((longitude * 360) / 24) % 360;\n        const hourAngleRad = degreesToRadians(lon - longitude);\n        const declination = NOAACalculator.getSunDeclination(julianCenturies);\n        const decRad = degreesToRadians(declination);\n        const latRad = degreesToRadians(lat);\n        return radiansToDegrees(Math.asin(Math.sin(latRad) * Math.sin(decRad) +\n            Math.cos(latRad) * Math.cos(decRad) * Math.cos(hourAngleRad)));\n    }\n    /**\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Azimuth</a> for the\n     * horizontal coordinate system at the given location at the given time. Not corrected for altitude. True south is 0\n     * degrees.\n     *\n     * @param {Temporal.ZonedDateTime} date\n     *            time of calculation\n     * @param {number} latitude\n     *            latitude of location for calculation\n     * @param {number} lon\n     *            longitude of location for calculation\n     * @return {number}\n     */\n    static getSolarAzimuth(date, latitude, lon) {\n        const julianDay = NOAACalculator.getJulianDay(date.toPlainDate());\n        const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n        const equationOfTime = NOAACalculator.getEquationOfTime(julianCenturies);\n        let longitude = date.hour + 12 + (date.minute + equationOfTime + date.second / 60) / 60;\n        longitude = -((longitude * 360) / 24) % 360;\n        const hourAngleRad = degreesToRadians(lon - longitude);\n        const declination = NOAACalculator.getSunDeclination(julianCenturies);\n        const decRad = degreesToRadians(declination);\n        const latRad = degreesToRadians(latitude);\n        return (radiansToDegrees(Math.atan(Math.sin(hourAngleRad) /\n            (Math.cos(hourAngleRad) * Math.sin(latRad) -\n                Math.tan(decRad) * Math.cos(latRad)))) + 180);\n    }\n    /**\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n     * of sunrise for the given day at the given location on earth\n     * @private\n     * @param julianDay\n     *            the Julian day\n     * @param {number} latitude\n     *            the latitude of observer in degrees\n     * @param {number} longitude\n     *            the longitude of observer in degrees\n     * @param {number} zenith\n     *            the zenith\n     * @return the time in minutes from zero UTC\n     */\n    static getSunriseUTC(julianDay, latitude, longitude, zenith) {\n        const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n        // Find the time of solar noon at the location, and use that declination. This is better than start of the\n        // Julian day\n        const noonmin = NOAACalculator.getSolarNoonUTC(julianCenturies, longitude);\n        const tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440);\n        // First pass to approximate sunrise (using solar noon)\n        let eqTime = NOAACalculator.getEquationOfTime(tnoon);\n        let solarDec = NOAACalculator.getSunDeclination(tnoon);\n        let hourAngle = NOAACalculator.getSunHourAngleAtSunrise(latitude, solarDec, zenith);\n        let delta = longitude - radiansToDegrees(hourAngle);\n        let timeDiff = 4 * delta; // in minutes of time\n        let timeUTC = 720 + timeDiff - eqTime; // in minutes\n        // Second pass includes fractional Julian Day in gamma calc\n        const newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) +\n            timeUTC / 1440);\n        eqTime = NOAACalculator.getEquationOfTime(newt);\n        solarDec = NOAACalculator.getSunDeclination(newt);\n        hourAngle = NOAACalculator.getSunHourAngleAtSunrise(latitude, solarDec, zenith);\n        delta = longitude - radiansToDegrees(hourAngle);\n        timeDiff = 4 * delta;\n        timeUTC = 720 + timeDiff - eqTime; // in minutes\n        return timeUTC;\n    }\n    /**\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n     * of <a href=\"http://en.wikipedia.org/wiki/Noon#Solar_noon\">solar noon</a> for the given day at the given location\n     * on earth.\n     * @private\n     * @param julianCenturies\n     *            the number of Julian centuries since J2000.0\n     * @param {number} longitude\n     *            the longitude of observer in degrees\n     * @return the time in minutes from zero UTC\n     */\n    static getSolarNoonUTC(julianCenturies, longitude) {\n        // First pass uses approximate solar noon to calculate eqtime\n        const tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) +\n            longitude / 360);\n        let eqTime = NOAACalculator.getEquationOfTime(tnoon);\n        const solNoonUTC = 720 + longitude * 4 - eqTime; // min\n        const newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) -\n            0.5 +\n            solNoonUTC / 1440);\n        eqTime = NOAACalculator.getEquationOfTime(newt);\n        return 720 + longitude * 4 - eqTime; // min\n    }\n    /**\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n     * of sunset for the given day at the given location on earth\n     * @private\n     * @param julianDay\n     *            the Julian day\n     * @param {number} latitude\n     *            the latitude of observer in degrees\n     * @param {number} longitude\n     *            : longitude of observer in degrees\n     * @param {number} zenith\n     *            the zenith\n     * @return the time in minutes from zero Universal Coordinated Time (UTC)\n     */\n    static getSunsetUTC(julianDay, latitude, longitude, zenith) {\n        const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n        // Find the time of solar noon at the location, and use that declination. This is better than start of the\n        // Julian day\n        const noonmin = NOAACalculator.getSolarNoonUTC(julianCenturies, longitude);\n        const tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440);\n        // First calculates sunrise and approx length of day\n        let eqTime = NOAACalculator.getEquationOfTime(tnoon);\n        let solarDec = NOAACalculator.getSunDeclination(tnoon);\n        let hourAngle = NOAACalculator.getSunHourAngleAtSunset(latitude, solarDec, zenith);\n        let delta = longitude - radiansToDegrees(hourAngle);\n        let timeDiff = 4 * delta;\n        let timeUTC = 720 + timeDiff - eqTime;\n        // Second pass includes fractional Julian Day in gamma calc\n        const newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) +\n            timeUTC / 1440);\n        eqTime = NOAACalculator.getEquationOfTime(newt);\n        solarDec = NOAACalculator.getSunDeclination(newt);\n        hourAngle = NOAACalculator.getSunHourAngleAtSunset(latitude, solarDec, zenith);\n        delta = longitude - radiansToDegrees(hourAngle);\n        timeDiff = 4 * delta;\n        timeUTC = 720 + timeDiff - eqTime; // in minutes\n        return timeUTC;\n    }\n}\n/**\n * The zenith of astronomical sunrise and sunset. The sun is 90&deg; from the vertical 0&deg;\n * @private\n */\nNOAACalculator.GEOMETRIC_ZENITH = 90;\n/**\n * Default value for Sun's zenith and true rise/set Zenith (used in this class and subclasses) is the angle that the\n * center of the Sun makes to a line perpendicular to the Earth's surface. If the Sun were a point and the Earth\n * were without an atmosphere, true sunset and sunrise would correspond to a 90&deg; zenith. Because the Sun is not\n * a point, and because the atmosphere refracts light, this 90&deg; zenith does not, in fact, correspond to true\n * sunset or sunrise, instead the center of the Sun's disk must lie just below the horizon for the upper edge to be\n * obscured. This means that a zenith of just above 90&deg; must be used. The Sun subtends an angle of 16 minutes of\n * arc, and atmospheric refraction accounts for\n * 34 minutes or so, giving a total of 50\n * arcminutes. The total value for ZENITH is 90+(5/6) or 90.8333333&deg; for true sunrise/sunset.\n */\n// const ZENITH: number = GEOMETRIC_ZENITH + 5.0 / 6.0;\n/** Sun's zenith at civil twilight (96&deg;). */\nNOAACalculator.CIVIL_ZENITH = 96;\n/** Sun's zenith at nautical twilight (102&deg;). */\nNOAACalculator.NAUTICAL_ZENITH = 102;\n/** Sun's zenith at astronomical twilight (108&deg;). */\nNOAACalculator.ASTRONOMICAL_ZENITH = 108;\n/**\n * The <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> of January 1, 2000\n * @private\n */\nNOAACalculator.JULIAN_DAY_JAN_1_2000 = 2451545;\n/**\n * Julian days per century\n * @private\n */\nNOAACalculator.JULIAN_DAYS_PER_CENTURY = 36525;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*! @hebcal/core v5.9.0, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nimport { isoDateString, Locale } from '@hebcal/hdate';\nimport { Event, flags } from './event.js';\nimport { holidayDesc } from './staticHolidays.js';\nimport './locale.js';\n\n/** Represents a built-in holiday like Pesach, Purim or Tu BiShvat */\nclass HolidayEvent extends Event {\n  basename() {\n    return this.getDesc().replace(/ \\d{4}$/, '').replace(/ \\(CH''M\\)$/, '').replace(/ \\(observed\\)$/, '').replace(/ \\(Hoshana Raba\\)$/, '').replace(/ [IV]+$/, '').replace(/: \\d Candles?$/, '').replace(/: 8th Day$/, '').replace(/^Erev /, '');\n  }\n  url() {\n    const year = this.getDate().greg().getFullYear();\n    if (year < 100) {\n      return undefined;\n    }\n    const url = 'https://www.hebcal.com/holidays/' + this.basename().toLowerCase().replace(/'/g, '').replace(/ /g, '-') + '-' + this.urlDateSuffix();\n    return this.getFlags() & flags.IL_ONLY ? url + '?i=on' : url;\n  }\n  urlDateSuffix() {\n    const year = this.getDate().greg().getFullYear();\n    return String(year);\n  }\n  getEmoji() {\n    if (this.emoji) {\n      return this.emoji;\n    } else if (this.getFlags() & flags.SPECIAL_SHABBAT) {\n      return '🕍';\n    } else {\n      return '✡️';\n    }\n  }\n  getCategories() {\n    if (this.cholHaMoedDay) {\n      return ['holiday', 'major', 'cholhamoed'];\n    }\n    const cats = super.getCategories();\n    if (cats[0] !== 'unknown') {\n      return cats;\n    }\n    // Don't depend on flags.MINOR_HOLIDAY always being set. Look for minor holidays.\n    const desc = this.getDesc();\n    switch (desc) {\n      case holidayDesc.LAG_BAOMER:\n      case holidayDesc.LEIL_SELICHOT:\n      case holidayDesc.PESACH_SHENI:\n      case holidayDesc.EREV_PURIM:\n      case holidayDesc.PURIM_KATAN:\n      case holidayDesc.SHUSHAN_PURIM:\n      case holidayDesc.TU_BAV:\n      case holidayDesc.TU_BISHVAT:\n      case holidayDesc.ROSH_HASHANA_LABEHEMOT:\n        return ['holiday', 'minor'];\n    }\n    return ['holiday', 'major'];\n  }\n  /**\n   * Returns (translated) description of this event\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale) {\n    const str = super.render(locale);\n    return str.replace(/'/g, '’');\n  }\n  /**\n   * Returns a brief (translated) description of this event.\n   * For most events, this is the same as render(). For some events, it procudes\n   * a shorter text (e.g. without a time or added description).\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  renderBrief(locale) {\n    const str = super.renderBrief(locale);\n    return str.replace(/'/g, '’');\n  }\n  /**\n   * Makes a clone of this Event object\n   * @deprecated\n   */\n  clone() {\n    const ev = new HolidayEvent(this.date, this.desc, this.mask);\n    // overwrite all enumerable properties\n    Object.assign(ev, this);\n    return ev;\n  }\n}\n/**\n * Because Asara B'Tevet often occurs twice in the same Gregorian year,\n * we subclass HolidayEvent to generate the correct URL.\n */\nclass AsaraBTevetEvent extends HolidayEvent {\n  urlDateSuffix() {\n    const isoDate = isoDateString(this.getDate().greg());\n    return isoDate.replace(/-/g, '');\n  }\n}\n/**\n * Because Chanukah sometimes starts in December and ends in January,\n * we subclass HolidayEvent to generate the correct URL.\n */\nclass ChanukahEvent extends HolidayEvent {\n  urlDateSuffix() {\n    const dt = this.getDate().greg();\n    let year = dt.getFullYear();\n    if (dt.getMonth() === 0) {\n      year--;\n    }\n    return String(year);\n  }\n}\n/** Represents Rosh Hashana, the Jewish New Year */\nclass RoshHashanaEvent extends HolidayEvent {\n  /**\n   * @private\n   * @param date Hebrew date event occurs\n   * @param hyear Hebrew year\n   * @param mask optional holiday flags\n   */\n  constructor(date, hyear, mask) {\n    super(date, `Rosh Hashana ${hyear}`, mask);\n    this.hyear = hyear;\n  }\n  /**\n   * Returns (translated) description of this event\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale) {\n    return Locale.gettext('Rosh Hashana', locale) + ' ' + this.hyear;\n  }\n  getEmoji() {\n    return '🍏🍯';\n  }\n}\nconst roshChodeshStr = 'Rosh Chodesh';\n/** Represents Rosh Chodesh, the beginning of a new month */\nclass RoshChodeshEvent extends HolidayEvent {\n  /**\n   * Constructs Rosh Chodesh event\n   * @param date Hebrew date event occurs\n   * @param monthName Hebrew month name (not translated)\n   */\n  constructor(date, monthName) {\n    super(date, `${roshChodeshStr} ${monthName}`, flags.ROSH_CHODESH);\n  }\n  /**\n   * Returns (translated) description of this event\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale) {\n    const monthName = this.getDesc().substring(roshChodeshStr.length + 1);\n    const monthName0 = Locale.gettext(monthName, locale);\n    const monthName1 = monthName0.replace(/'/g, '’');\n    return Locale.gettext(roshChodeshStr, locale) + ' ' + monthName1;\n  }\n  basename() {\n    return this.getDesc();\n  }\n  getEmoji() {\n    return this.emoji || '🌒';\n  }\n}\nexport { AsaraBTevetEvent, ChanukahEvent, HolidayEvent, RoshChodeshEvent, RoshHashanaEvent };","map":{"version":3,"names":["HolidayEvent","Event","basename","getDesc","replace","url","year","getDate","greg","getFullYear","undefined","toLowerCase","urlDateSuffix","getFlags","flags","IL_ONLY","String","getEmoji","emoji","SPECIAL_SHABBAT","getCategories","cholHaMoedDay","cats","desc","holidayDesc","LAG_BAOMER","LEIL_SELICHOT","PESACH_SHENI","EREV_PURIM","PURIM_KATAN","SHUSHAN_PURIM","TU_BAV","TU_BISHVAT","ROSH_HASHANA_LABEHEMOT","render","locale","str","renderBrief","clone","ev","date","mask","Object","assign","AsaraBTevetEvent","isoDate","isoDateString","ChanukahEvent","dt","getMonth","RoshHashanaEvent","constructor","hyear","Locale","gettext","roshChodeshStr","RoshChodeshEvent","monthName","ROSH_CHODESH","substring","length","monthName0","monthName1"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/HolidayEvent.ts"],"sourcesContent":["import {HDate, Locale, isoDateString} from '@hebcal/hdate';\nimport {Event, flags} from './event';\nimport {holidayDesc as hdesc} from './staticHolidays';\nimport './locale'; // Adds Hebrew and Ashkenazic translations\n\n/** Represents a built-in holiday like Pesach, Purim or Tu BiShvat */\nexport class HolidayEvent extends Event {\n  /** During Sukkot or Pesach */\n  cholHaMoedDay?: number;\n  chanukahDay?: number;\n  /**\n   * `true` if the fast day was postponed a day to avoid Shabbat.\n   * - Tish'a B'Av postponed from the 9th to the 10th\n   * - Tzom Tammuz postponed from the 17th to the 18th\n   */\n  observed?: boolean;\n\n  basename(): string {\n    return this.getDesc()\n      .replace(/ \\d{4}$/, '')\n      .replace(/ \\(CH''M\\)$/, '')\n      .replace(/ \\(observed\\)$/, '')\n      .replace(/ \\(Hoshana Raba\\)$/, '')\n      .replace(/ [IV]+$/, '')\n      .replace(/: \\d Candles?$/, '')\n      .replace(/: 8th Day$/, '')\n      .replace(/^Erev /, '');\n  }\n\n  url(): string | undefined {\n    const year = this.getDate().greg().getFullYear();\n    if (year < 100) {\n      return undefined;\n    }\n    const url =\n      'https://www.hebcal.com/holidays/' +\n      this.basename().toLowerCase().replace(/'/g, '').replace(/ /g, '-') +\n      '-' +\n      this.urlDateSuffix();\n    return this.getFlags() & flags.IL_ONLY ? url + '?i=on' : url;\n  }\n\n  urlDateSuffix(): string {\n    const year = this.getDate().greg().getFullYear();\n    return String(year);\n  }\n\n  getEmoji(): string {\n    if (this.emoji) {\n      return this.emoji;\n    } else if (this.getFlags() & flags.SPECIAL_SHABBAT) {\n      return '🕍';\n    } else {\n      return '✡️';\n    }\n  }\n\n  getCategories(): string[] {\n    if (this.cholHaMoedDay) {\n      return ['holiday', 'major', 'cholhamoed'];\n    }\n    const cats = super.getCategories();\n    if (cats[0] !== 'unknown') {\n      return cats;\n    }\n    // Don't depend on flags.MINOR_HOLIDAY always being set. Look for minor holidays.\n    const desc = this.getDesc();\n    switch (desc) {\n      case hdesc.LAG_BAOMER:\n      case hdesc.LEIL_SELICHOT:\n      case hdesc.PESACH_SHENI:\n      case hdesc.EREV_PURIM:\n      case hdesc.PURIM_KATAN:\n      case hdesc.SHUSHAN_PURIM:\n      case hdesc.TU_BAV:\n      case hdesc.TU_BISHVAT:\n      case hdesc.ROSH_HASHANA_LABEHEMOT:\n        return ['holiday', 'minor'];\n    }\n\n    return ['holiday', 'major'];\n  }\n  /**\n   * Returns (translated) description of this event\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale?: string): string {\n    const str = super.render(locale);\n    return str.replace(/'/g, '’');\n  }\n  /**\n   * Returns a brief (translated) description of this event.\n   * For most events, this is the same as render(). For some events, it procudes\n   * a shorter text (e.g. without a time or added description).\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  renderBrief(locale?: string): string {\n    const str = super.renderBrief(locale);\n    return str.replace(/'/g, '’');\n  }\n  /**\n   * Makes a clone of this Event object\n   * @deprecated\n   */\n  clone(): HolidayEvent {\n    const ev = new HolidayEvent(this.date, this.desc, this.mask);\n    // overwrite all enumerable properties\n    Object.assign(ev, this);\n    return ev;\n  }\n}\n\n/**\n * Because Asara B'Tevet often occurs twice in the same Gregorian year,\n * we subclass HolidayEvent to generate the correct URL.\n */\nexport class AsaraBTevetEvent extends HolidayEvent {\n  urlDateSuffix(): string {\n    const isoDate = isoDateString(this.getDate().greg());\n    return isoDate.replace(/-/g, '');\n  }\n}\n\n/**\n * Because Chanukah sometimes starts in December and ends in January,\n * we subclass HolidayEvent to generate the correct URL.\n */\nexport class ChanukahEvent extends HolidayEvent {\n  urlDateSuffix(): string {\n    const dt = this.getDate().greg();\n    let year = dt.getFullYear();\n    if (dt.getMonth() === 0) {\n      year--;\n    }\n    return String(year);\n  }\n}\n\n/** Represents Rosh Hashana, the Jewish New Year */\nexport class RoshHashanaEvent extends HolidayEvent {\n  private readonly hyear: number;\n  /**\n   * @private\n   * @param date Hebrew date event occurs\n   * @param hyear Hebrew year\n   * @param mask optional holiday flags\n   */\n  constructor(date: HDate, hyear: number, mask: number) {\n    super(date, `Rosh Hashana ${hyear}`, mask);\n    this.hyear = hyear;\n  }\n  /**\n   * Returns (translated) description of this event\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale?: string): string {\n    return Locale.gettext('Rosh Hashana', locale) + ' ' + this.hyear;\n  }\n\n  getEmoji(): string {\n    return '🍏🍯';\n  }\n}\n\nconst roshChodeshStr = 'Rosh Chodesh';\n\n/** Represents Rosh Chodesh, the beginning of a new month */\nexport class RoshChodeshEvent extends HolidayEvent {\n  /**\n   * Constructs Rosh Chodesh event\n   * @param date Hebrew date event occurs\n   * @param monthName Hebrew month name (not translated)\n   */\n  constructor(date: HDate, monthName: string) {\n    super(date, `${roshChodeshStr} ${monthName}`, flags.ROSH_CHODESH);\n  }\n  /**\n   * Returns (translated) description of this event\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale?: string): string {\n    const monthName = this.getDesc().substring(roshChodeshStr.length + 1);\n    const monthName0 = Locale.gettext(monthName, locale);\n    const monthName1 = monthName0.replace(/'/g, '’');\n    return Locale.gettext(roshChodeshStr, locale) + ' ' + monthName1;\n  }\n\n  basename(): string {\n    return this.getDesc();\n  }\n\n  getEmoji(): string {\n    return this.emoji || '🌒';\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
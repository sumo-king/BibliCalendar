{"ast":null,"code":"/*! @hebcal/core v5.9.0, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nimport { Event, flags } from './event.js';\nimport { isoDateString } from '@hebcal/hdate';\nimport { renderParshaName } from './parshaName.js';\nimport './locale.js';\n\n/**\n * Represents one of 54 weekly Torah portions, always on a Saturday\n */\nclass ParshaEvent extends Event {\n  /**\n   * @param parsha - untranslated name of single or double parsha,\n   *   such as ['Bereshit'] or ['Achrei Mot', 'Kedoshim']\n   */\n  constructor(date, parsha, il = false, num = -1) {\n    if (!Array.isArray(parsha) || parsha.length === 0 || parsha.length > 2) {\n      throw new TypeError('Bad parsha argument');\n    }\n    const desc = 'Parashat ' + parsha.join('-');\n    super(date, desc, flags.PARSHA_HASHAVUA);\n    this.parsha = parsha;\n    this.il = Boolean(il);\n    this.num = num || -1;\n  }\n  /**\n   * @param [locale] Optional locale name (i.e: `'he'`, `'fr'`). Defaults to active locale.\n   */\n  render(locale) {\n    return renderParshaName(this.parsha, locale);\n  }\n  basename() {\n    return this.parsha.join('-');\n  }\n  url() {\n    const year = this.getDate().greg().getFullYear();\n    if (year < 100) {\n      return undefined;\n    }\n    const dt = this.urlDateSuffix();\n    const url = 'https://www.hebcal.com/sedrot/' + this.basename().toLowerCase().replace(/'/g, '').replace(/ /g, '-') + '-' + dt;\n    return this.il ? url + '?i=on' : url;\n  }\n  urlDateSuffix() {\n    const isoDate = isoDateString(this.getDate().greg());\n    return isoDate.replace(/-/g, '');\n  }\n}\nexport { ParshaEvent };","map":{"version":3,"names":["ParshaEvent","Event","constructor","date","parsha","il","num","Array","isArray","length","TypeError","desc","join","flags","PARSHA_HASHAVUA","Boolean","render","locale","renderParshaName","basename","url","year","getDate","greg","getFullYear","undefined","dt","urlDateSuffix","toLowerCase","replace","isoDate","isoDateString"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/ParshaEvent.ts"],"sourcesContent":["import {Event, flags} from './event';\nimport {HDate, isoDateString} from '@hebcal/hdate';\nimport {renderParshaName} from './parshaName';\nimport './locale'; // Adds Hebrew and Ashkenazic translations\n\n/**\n * Represents one of 54 weekly Torah portions, always on a Saturday\n */\nexport class ParshaEvent extends Event {\n  readonly parsha: string[];\n  readonly il: boolean;\n  readonly num: number | number[];\n  /**\n   * @param parsha - untranslated name of single or double parsha,\n   *   such as ['Bereshit'] or ['Achrei Mot', 'Kedoshim']\n   */\n  constructor(\n    date: HDate,\n    parsha: string[],\n    il = false,\n    num: number | number[] = -1\n  ) {\n    if (!Array.isArray(parsha) || parsha.length === 0 || parsha.length > 2) {\n      throw new TypeError('Bad parsha argument');\n    }\n    const desc = 'Parashat ' + parsha.join('-');\n    super(date, desc, flags.PARSHA_HASHAVUA);\n    this.parsha = parsha;\n    this.il = Boolean(il);\n    this.num = num || -1;\n  }\n  /**\n   * @param [locale] Optional locale name (i.e: `'he'`, `'fr'`). Defaults to active locale.\n   */\n  render(locale?: string): string {\n    return renderParshaName(this.parsha, locale);\n  }\n\n  basename(): string {\n    return this.parsha.join('-');\n  }\n\n  url(): string | undefined {\n    const year = this.getDate().greg().getFullYear();\n    if (year < 100) {\n      return undefined;\n    }\n    const dt = this.urlDateSuffix();\n    const url =\n      'https://www.hebcal.com/sedrot/' +\n      this.basename().toLowerCase().replace(/'/g, '').replace(/ /g, '-') +\n      '-' +\n      dt;\n    return this.il ? url + '?i=on' : url;\n  }\n\n  urlDateSuffix(): string {\n    const isoDate = isoDateString(this.getDate().greg());\n    return isoDate.replace(/-/g, '');\n  }\n}\n"],"mappings":";;;;;;AAKA;;AAEG;AACG,MAAOA,WAAY,SAAQC,KAAK;EAIpC;;;AAGG;EACHC,WACEA,CAAAC,IAAW,EACXC,MAAgB,EAChBC,EAAE,GAAG,KAAK,EACVC,GAAyB,KAAE;IAE3B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,IAAIA,MAAM,CAACK,MAAM,KAAK,CAAC,IAAIL,MAAM,CAACK,MAAM,GAAG,CAAC,EAAE;MACtE,MAAM,IAAIC,SAAS,CAAC,qBAAqB,CAAC;;IAE5C,MAAMC,IAAI,GAAG,WAAW,GAAGP,MAAM,CAACQ,IAAI,CAAC,GAAG,CAAC;IAC3C,KAAK,CAACT,IAAI,EAAEQ,IAAI,EAAEE,KAAK,CAACC,eAAe,CAAC;IACxC,IAAI,CAACV,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,EAAE,GAAGU,OAAO,CAACV,EAAE,CAAC;IACrB,IAAI,CAACC,GAAG,GAAGA,GAAG,IAAI,EAAE;;EAEtB;;AAEG;EACHU,MAAMA,CAACC,MAAe;IACpB,OAAOC,gBAAgB,CAAC,IAAI,CAACd,MAAM,EAAEa,MAAM,CAAC;;EAG9CE,QAAQA,CAAA;IACN,OAAO,IAAI,CAACf,MAAM,CAACQ,IAAI,CAAC,GAAG,CAAC;;EAG9BQ,GAAGA,CAAA;IACD,MAAMC,IAAI,GAAG,IAAI,CAACC,OAAO,EAAE,CAACC,IAAI,EAAE,CAACC,WAAW,EAAE;IAChD,IAAIH,IAAI,GAAG,GAAG,EAAE;MACd,OAAOI,SAAS;;IAElB,MAAMC,EAAE,GAAG,IAAI,CAACC,aAAa,EAAE;IAC/B,MAAMP,GAAG,GACP,gCAAgC,GAChC,IAAI,CAACD,QAAQ,EAAE,CAACS,WAAW,EAAE,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,GAClE,GAAG,GACHH,EAAE;IACJ,OAAO,IAAI,CAACrB,EAAE,GAAGe,GAAG,GAAG,OAAO,GAAGA,GAAG;;EAGtCO,aAAaA,CAAA;IACX,MAAMG,OAAO,GAAGC,aAAa,CAAC,IAAI,CAACT,OAAO,EAAE,CAACC,IAAI,EAAE,CAAC;IACpD,OAAOO,OAAO,CAACD,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;;AAEnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
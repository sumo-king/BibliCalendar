{"ast":null,"code":"/*! @hebcal/core v5.9.0, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nimport { GeoLocation } from '@hebcal/noaa';\n\n/*\n    Hebcal - A Jewish Calendar Generator\n    Copyright (c) 1994-2020 Danny Sadinoff\n    Portions copyright Eyal Schachter and Michael J. Radwin\n\n    https://github.com/hebcal/hebcal-es6\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License\n    as published by the Free Software Foundation; either version 2\n    of the License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nconst classicCities0 = [['Ashdod', 'IL', 31.79213, 34.64966, 'Asia/Jerusalem', 27], ['Atlanta', 'US', 33.749, -84.38798, 'America/New_York', 336], ['Austin', 'US', 30.26715, -97.74306, 'America/Chicago', 165], ['Baghdad', 'IQ', 33.34058, 44.40088, 'Asia/Baghdad', 41], ['Beer Sheva', 'IL', 31.25181, 34.7913, 'Asia/Jerusalem', 285], ['Berlin', 'DE', 52.52437, 13.41053, 'Europe/Berlin', 43], ['Baltimore', 'US', 39.29038, -76.61219, 'America/New_York', 35], ['Bogota', 'CO', 4.60971, -74.08175, 'America/Bogota', 2582], ['Boston', 'US', 42.35843, -71.05977, 'America/New_York', 38], ['Budapest', 'HU', 47.49801, 19.03991, 'Europe/Budapest', 104], ['Buenos Aires', 'AR', -34.61315, -58.37723, 'America/Argentina/Buenos_Aires', 31], ['Buffalo', 'US', 42.88645, -78.87837, 'America/New_York', 191], ['Chicago', 'US', 41.85003, -87.65005, 'America/Chicago', 180], ['Cincinnati', 'US', 39.162, -84.45689, 'America/New_York', 267], ['Cleveland', 'US', 41.4995, -81.69541, 'America/New_York', 204], ['Dallas', 'US', 32.78306, -96.80667, 'America/Chicago', 139], ['Denver', 'US', 39.73915, -104.9847, 'America/Denver', 1636], ['Detroit', 'US', 42.33143, -83.04575, 'America/Detroit', 192], ['Eilat', 'IL', 29.55805, 34.94821, 'Asia/Jerusalem', 63], ['Gibraltar', 'GI', 36.14474, -5.35257, 'Europe/Gibraltar', 11], ['Haifa', 'IL', 32.81841, 34.9885, 'Asia/Jerusalem', 40], ['Hawaii', 'US', 21.30694, -157.85833, 'Pacific/Honolulu', 18], ['Helsinki', 'FI', 60.16952, 24.93545, 'Europe/Helsinki', 26], ['Houston', 'US', 29.76328, -95.36327, 'America/Chicago', 30], ['Jerusalem', 'IL', 31.76904, 35.21633, 'Asia/Jerusalem', 786], ['Johannesburg', 'ZA', -26.20227, 28.04363, 'Africa/Johannesburg', 1767], ['Kiev', 'UA', 50.45466, 30.5238, 'Europe/Kiev', 187], ['La Paz', 'BO', -16.5, -68.15, 'America/La_Paz', 3782], ['Livingston', 'US', 40.79593, -74.31487, 'America/New_York', 98], ['Las Vegas', 'US', 36.17497, -115.13722, 'America/Los_Angeles', 613], ['London', 'GB', 51.50853, -0.12574, 'Europe/London', 25], ['Los Angeles', 'US', 34.05223, -118.24368, 'America/Los_Angeles', 96], ['Marseilles', 'FR', 43.29695, 5.38107, 'Europe/Paris', 28], ['Miami', 'US', 25.77427, -80.19366, 'America/New_York', 25], ['Minneapolis', 'US', 44.97997, -93.26384, 'America/Chicago', 262], ['Melbourne', 'AU', -37.814, 144.96332, 'Australia/Melbourne', 25], ['Mexico City', 'MX', 19.42847, -99.12766, 'America/Mexico_City', 2240], ['Montreal', 'CA', 45.50884, -73.58781, 'America/Toronto', 216], ['Moscow', 'RU', 55.75222, 37.61556, 'Europe/Moscow', 144], ['New York', 'US', 40.71427, -74.00597, 'America/New_York', 57], ['Omaha', 'US', 41.25861, -95.93779, 'America/Chicago', 315], ['Ottawa', 'CA', 45.41117, -75.69812, 'America/Toronto', 71], ['Panama City', 'PA', 8.9936, -79.51973, 'America/Panama', 17], ['Paris', 'FR', 48.85341, 2.3488, 'Europe/Paris', 42], ['Pawtucket', 'US', 41.87871, -71.38256, 'America/New_York', 0],\n// -11\n['Petach Tikvah', 'IL', 32.08707, 34.88747, 'Asia/Jerusalem', 54], ['Philadelphia', 'US', 39.95233, -75.16379, 'America/New_York', 8], ['Phoenix', 'US', 33.44838, -112.07404, 'America/Phoenix', 366], ['Pittsburgh', 'US', 40.44062, -79.99589, 'America/New_York', 239], ['Providence', 'US', 41.82399, -71.41283, 'America/New_York', 0],\n// -15\n['Portland', 'US', 45.52345, -122.67621, 'America/Los_Angeles', 15], ['Saint Louis', 'US', 38.62727, -90.19789, 'America/Chicago', 149], ['Saint Petersburg', 'RU', 59.93863, 30.31413, 'Europe/Moscow', 11], ['San Diego', 'US', 32.71533, -117.15726, 'America/Los_Angeles', 20], ['San Francisco', 'US', 37.77493, -122.41942, 'America/Los_Angeles', 28], ['Sao Paulo', 'BR', -23.5475, -46.63611, 'America/Sao_Paulo', 769], ['Seattle', 'US', 47.60621, -122.33207, 'America/Los_Angeles', 56], ['Sydney', 'AU', -33.86785, 151.20732, 'Australia/Sydney', 58], ['Tel Aviv', 'IL', 32.08088, 34.78057, 'Asia/Jerusalem', 15], ['Tiberias', 'IL', 32.79221, 35.53124, 'Asia/Jerusalem', 0],\n// -140\n['Toronto', 'CA', 43.70011, -79.4163, 'America/Toronto', 175], ['Vancouver', 'CA', 49.24966, -123.11934, 'America/Vancouver', 70], ['White Plains', 'US', 41.03399, -73.76291, 'America/New_York', 82], ['Washington DC', 'US', 38.89511, -77.03637, 'America/New_York', 6], ['Worcester', 'US', 42.26259, -71.80229, 'America/New_York', 164]];\nconst classicCities = new Map();\n// Zip-Codes.com TimeZone IDs\nconst ZIPCODES_TZ_MAP = {\n  '0': 'UTC',\n  '4': 'America/Puerto_Rico',\n  // Atlantic (GMT -04:00)\n  '5': 'America/New_York',\n  //    Eastern  (GMT -05:00)\n  '6': 'America/Chicago',\n  //     Central  (GMT -06:00)\n  '7': 'America/Denver',\n  //      Mountain (GMT -07:00)\n  '8': 'America/Los_Angeles',\n  // Pacific  (GMT -08:00)\n  '9': 'America/Anchorage',\n  //   Alaska   (GMT -09:00)\n  '10': 'Pacific/Honolulu',\n  //   Hawaii-Aleutian Islands (GMT -10:00)\n  '11': 'Pacific/Pago_Pago',\n  //  American Samoa (GMT -11:00)\n  '13': 'Pacific/Funafuti',\n  //   Marshall Islands (GMT +12:00)\n  '14': 'Pacific/Guam',\n  //       Guam     (GMT +10:00)\n  '15': 'Pacific/Palau',\n  //      Palau    (GMT +9:00)\n  '16': 'Pacific/Chuuk' //      Micronesia (GMT +11:00)\n};\n/** @private */\nconst timeFormatCache = new Map();\n/**\n * Gets a 24-hour time formatter (e.g. 07:41 or 20:03) from cache\n * or makes a new one if needed\n * @private\n */\nfunction getFormatter(tzid) {\n  const fmt = timeFormatCache.get(tzid);\n  if (fmt) return fmt;\n  const f = new Intl.DateTimeFormat('en-US', {\n    timeZone: tzid,\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: false\n  });\n  timeFormatCache.set(tzid, f);\n  return f;\n}\n/** Class representing Location */\nclass Location extends GeoLocation {\n  /**\n   * Initialize a Location instance\n   * @param latitude - Latitude as a decimal, valid range -90 thru +90 (e.g. 41.85003)\n   * @param longitude - Longitude as a decimal, valid range -180 thru +180 (e.g. -87.65005)\n   * @param il - in Israel (true) or Diaspora (false)\n   * @param tzid - Olson timezone ID, e.g. \"America/Chicago\"\n   * @param [cityName] - optional descriptive city name\n   * @param [countryCode] - ISO 3166 alpha-2 country code (e.g. \"FR\")\n   * @param [geoid] - optional string or numeric geographic ID\n   * @param [elevation] - in meters (default `0`)\n   */\n  constructor(latitude, longitude, il, tzid, cityName, countryCode, geoid, elevation) {\n    const lat = typeof latitude === 'number' ? latitude : parseFloat(latitude);\n    if (isNaN(lat) || lat < -90 || lat > 90) {\n      throw new RangeError(`Latitude ${latitude} out of range [-90,90]`);\n    }\n    const long = typeof longitude === 'number' ? longitude : parseFloat(longitude);\n    if (isNaN(long) || long < -180 || long > 180) {\n      throw new RangeError(`Longitude ${longitude} out of range [-180,180]`);\n    }\n    const elev = typeof elevation === 'number' && elevation > 0 ? elevation : 0;\n    super(cityName || null, lat, long, elev, tzid);\n    this.il = Boolean(il);\n    this.cc = countryCode;\n    this.geoid = geoid;\n  }\n  getIsrael() {\n    return this.il;\n  }\n  getName() {\n    return this.getLocationName();\n  }\n  /**\n   * Returns the location name, up to the first comma\n   */\n  getShortName() {\n    const name = this.getLocationName();\n    if (!name) return name;\n    const comma = name.indexOf(', ');\n    if (comma === -1) return name;\n    if (this.cc === 'US' && name[comma + 2] === 'D') {\n      if (name[comma + 3] === 'C') {\n        return name.substring(0, comma + 4);\n      } else if (name[comma + 3] === '.' && name[comma + 4] === 'C') {\n        return name.substring(0, comma + 6);\n      }\n    }\n    return name.substring(0, comma);\n  }\n  getCountryCode() {\n    return this.cc;\n  }\n  getTzid() {\n    return this.getTimeZone();\n  }\n  /**\n   * Gets a 24-hour time formatter (e.g. 07:41 or 20:03) for this location\n   */\n  getTimeFormatter() {\n    return getFormatter(this.getTimeZone());\n  }\n  getGeoId() {\n    return this.geoid;\n  }\n  /**\n   * Creates a location object from one of 60 \"classic\" Hebcal city names.\n   * The following city names are supported:\n   * 'Ashdod', 'Atlanta', 'Austin', 'Baghdad', 'Beer Sheva',\n   * 'Berlin', 'Baltimore', 'Bogota', 'Boston', 'Budapest',\n   * 'Buenos Aires', 'Buffalo', 'Chicago', 'Cincinnati', 'Cleveland',\n   * 'Dallas', 'Denver', 'Detroit', 'Eilat', 'Gibraltar', 'Haifa',\n   * 'Hawaii', 'Helsinki', 'Houston', 'Jerusalem', 'Johannesburg',\n   * 'Kiev', 'La Paz', 'Livingston', 'Las Vegas', 'London', 'Los Angeles',\n   * 'Marseilles', 'Miami', 'Minneapolis', 'Melbourne', 'Mexico City',\n   * 'Montreal', 'Moscow', 'New York', 'Omaha', 'Ottawa', 'Panama City',\n   * 'Paris', 'Pawtucket', 'Petach Tikvah', 'Philadelphia', 'Phoenix',\n   * 'Pittsburgh', 'Providence', 'Portland', 'Saint Louis', 'Saint Petersburg',\n   * 'San Diego', 'San Francisco', 'Sao Paulo', 'Seattle', 'Sydney',\n   * 'Tel Aviv', 'Tiberias', 'Toronto', 'Vancouver', 'White Plains',\n   * 'Washington DC', 'Worcester'\n   * @param name\n   */\n  static lookup(name) {\n    return classicCities.get(name.toLowerCase());\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  /**\n   * Converts legacy Hebcal timezone to a standard Olson tzid.\n   * @param tz integer, GMT offset in hours\n   * @param dst 'none', 'eu', 'usa', or 'israel'\n   */\n  static legacyTzToTzid(tz, dst) {\n    tz = +tz;\n    if (dst === 'none') {\n      if (tz === 0) {\n        return 'UTC';\n      } else {\n        const plus = tz > 0 ? '+' : '';\n        return `Etc/GMT${plus}${tz}`;\n      }\n    } else if (tz === 2 && dst === 'israel') {\n      return 'Asia/Jerusalem';\n    } else if (dst === 'eu') {\n      switch (tz) {\n        case -2:\n          return 'Atlantic/Cape_Verde';\n        case -1:\n          return 'Atlantic/Azores';\n        case 0:\n          return 'Europe/London';\n        case 1:\n          return 'Europe/Paris';\n        case 2:\n          return 'Europe/Athens';\n      }\n    } else if (dst === 'usa') {\n      return ZIPCODES_TZ_MAP[String(tz * -1)];\n    }\n    return undefined;\n  }\n  /**\n   * Converts timezone info from Zip-Codes.com to a standard Olson tzid.\n   * @example\n   * Location.getUsaTzid('AZ', 7, 'Y') // 'America/Denver'\n   * @param state two-letter all-caps US state abbreviation like 'CA'\n   * @param tz positive number, 5=America/New_York, 8=America/Los_Angeles\n   * @param dst single char 'Y' or 'N'\n   */\n  static getUsaTzid(state, tz, dst) {\n    tz = +tz;\n    if (tz === 10 && state === 'AK') {\n      return 'America/Adak';\n    } else if (tz === 7 && state === 'AZ') {\n      return dst === 'Y' ? 'America/Denver' : 'America/Phoenix';\n    } else {\n      return ZIPCODES_TZ_MAP[tz];\n    }\n  }\n  /**\n   * Adds a location name for `Location.lookup()` only if the name isn't\n   * already being used. Returns `false` if the name is already taken\n   * and `true` if successfully added.\n   */\n  static addLocation(cityName, location) {\n    const name = cityName.toLowerCase();\n    if (classicCities.has(name)) {\n      return false;\n    }\n    classicCities.set(name, location);\n    return true;\n  }\n}\nfor (const city of classicCities0) {\n  const location = new Location(city[2], city[3], city[1] === 'IL', city[4], city[0], city[1], undefined, city[5]);\n  Location.addLocation(city[0], location);\n}\nexport { Location };","map":{"version":3,"names":["classicCities0","classicCities","Map","ZIPCODES_TZ_MAP","timeFormatCache","getFormatter","tzid","fmt","get","f","Intl","DateTimeFormat","timeZone","hour","minute","hour12","set","Location","GeoLocation","constructor","latitude","longitude","il","cityName","countryCode","geoid","elevation","lat","parseFloat","isNaN","RangeError","long","elev","Boolean","cc","getIsrael","getName","getLocationName","getShortName","name","comma","indexOf","substring","getCountryCode","getTzid","getTimeZone","getTimeFormatter","getGeoId","lookup","toLowerCase","toString","JSON","stringify","legacyTzToTzid","tz","dst","plus","String","undefined","getUsaTzid","state","addLocation","location","has","city"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/location.ts"],"sourcesContent":["/*\n    Hebcal - A Jewish Calendar Generator\n    Copyright (c) 1994-2020 Danny Sadinoff\n    Portions copyright Eyal Schachter and Michael J. Radwin\n\n    https://github.com/hebcal/hebcal-es6\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License\n    as published by the Free Software Foundation; either version 2\n    of the License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nimport {GeoLocation} from '@hebcal/noaa';\n\nconst classicCities0: [string, string, number, number, string, number][] = [\n  ['Ashdod', 'IL', 31.79213, 34.64966, 'Asia/Jerusalem', 27],\n  ['Atlanta', 'US', 33.749, -84.38798, 'America/New_York', 336],\n  ['Austin', 'US', 30.26715, -97.74306, 'America/Chicago', 165],\n  ['Baghdad', 'IQ', 33.34058, 44.40088, 'Asia/Baghdad', 41],\n  ['Beer Sheva', 'IL', 31.25181, 34.7913, 'Asia/Jerusalem', 285],\n  ['Berlin', 'DE', 52.52437, 13.41053, 'Europe/Berlin', 43],\n  ['Baltimore', 'US', 39.29038, -76.61219, 'America/New_York', 35],\n  ['Bogota', 'CO', 4.60971, -74.08175, 'America/Bogota', 2582],\n  ['Boston', 'US', 42.35843, -71.05977, 'America/New_York', 38],\n  ['Budapest', 'HU', 47.49801, 19.03991, 'Europe/Budapest', 104],\n  [\n    'Buenos Aires',\n    'AR',\n    -34.61315,\n    -58.37723,\n    'America/Argentina/Buenos_Aires',\n    31,\n  ],\n  ['Buffalo', 'US', 42.88645, -78.87837, 'America/New_York', 191],\n  ['Chicago', 'US', 41.85003, -87.65005, 'America/Chicago', 180],\n  ['Cincinnati', 'US', 39.162, -84.45689, 'America/New_York', 267],\n  ['Cleveland', 'US', 41.4995, -81.69541, 'America/New_York', 204],\n  ['Dallas', 'US', 32.78306, -96.80667, 'America/Chicago', 139],\n  ['Denver', 'US', 39.73915, -104.9847, 'America/Denver', 1636],\n  ['Detroit', 'US', 42.33143, -83.04575, 'America/Detroit', 192],\n  ['Eilat', 'IL', 29.55805, 34.94821, 'Asia/Jerusalem', 63],\n  ['Gibraltar', 'GI', 36.14474, -5.35257, 'Europe/Gibraltar', 11],\n  ['Haifa', 'IL', 32.81841, 34.9885, 'Asia/Jerusalem', 40],\n  ['Hawaii', 'US', 21.30694, -157.85833, 'Pacific/Honolulu', 18],\n  ['Helsinki', 'FI', 60.16952, 24.93545, 'Europe/Helsinki', 26],\n  ['Houston', 'US', 29.76328, -95.36327, 'America/Chicago', 30],\n  ['Jerusalem', 'IL', 31.76904, 35.21633, 'Asia/Jerusalem', 786],\n  ['Johannesburg', 'ZA', -26.20227, 28.04363, 'Africa/Johannesburg', 1767],\n  ['Kiev', 'UA', 50.45466, 30.5238, 'Europe/Kiev', 187],\n  ['La Paz', 'BO', -16.5, -68.15, 'America/La_Paz', 3782],\n  ['Livingston', 'US', 40.79593, -74.31487, 'America/New_York', 98],\n  ['Las Vegas', 'US', 36.17497, -115.13722, 'America/Los_Angeles', 613],\n  ['London', 'GB', 51.50853, -0.12574, 'Europe/London', 25],\n  ['Los Angeles', 'US', 34.05223, -118.24368, 'America/Los_Angeles', 96],\n  ['Marseilles', 'FR', 43.29695, 5.38107, 'Europe/Paris', 28],\n  ['Miami', 'US', 25.77427, -80.19366, 'America/New_York', 25],\n  ['Minneapolis', 'US', 44.97997, -93.26384, 'America/Chicago', 262],\n  ['Melbourne', 'AU', -37.814, 144.96332, 'Australia/Melbourne', 25],\n  ['Mexico City', 'MX', 19.42847, -99.12766, 'America/Mexico_City', 2240],\n  ['Montreal', 'CA', 45.50884, -73.58781, 'America/Toronto', 216],\n  ['Moscow', 'RU', 55.75222, 37.61556, 'Europe/Moscow', 144],\n  ['New York', 'US', 40.71427, -74.00597, 'America/New_York', 57],\n  ['Omaha', 'US', 41.25861, -95.93779, 'America/Chicago', 315],\n  ['Ottawa', 'CA', 45.41117, -75.69812, 'America/Toronto', 71],\n  ['Panama City', 'PA', 8.9936, -79.51973, 'America/Panama', 17],\n  ['Paris', 'FR', 48.85341, 2.3488, 'Europe/Paris', 42],\n  ['Pawtucket', 'US', 41.87871, -71.38256, 'America/New_York', 0], // -11\n  ['Petach Tikvah', 'IL', 32.08707, 34.88747, 'Asia/Jerusalem', 54],\n  ['Philadelphia', 'US', 39.95233, -75.16379, 'America/New_York', 8],\n  ['Phoenix', 'US', 33.44838, -112.07404, 'America/Phoenix', 366],\n  ['Pittsburgh', 'US', 40.44062, -79.99589, 'America/New_York', 239],\n  ['Providence', 'US', 41.82399, -71.41283, 'America/New_York', 0], // -15\n  ['Portland', 'US', 45.52345, -122.67621, 'America/Los_Angeles', 15],\n  ['Saint Louis', 'US', 38.62727, -90.19789, 'America/Chicago', 149],\n  ['Saint Petersburg', 'RU', 59.93863, 30.31413, 'Europe/Moscow', 11],\n  ['San Diego', 'US', 32.71533, -117.15726, 'America/Los_Angeles', 20],\n  ['San Francisco', 'US', 37.77493, -122.41942, 'America/Los_Angeles', 28],\n  ['Sao Paulo', 'BR', -23.5475, -46.63611, 'America/Sao_Paulo', 769],\n  ['Seattle', 'US', 47.60621, -122.33207, 'America/Los_Angeles', 56],\n  ['Sydney', 'AU', -33.86785, 151.20732, 'Australia/Sydney', 58],\n  ['Tel Aviv', 'IL', 32.08088, 34.78057, 'Asia/Jerusalem', 15],\n  ['Tiberias', 'IL', 32.79221, 35.53124, 'Asia/Jerusalem', 0], // -140\n  ['Toronto', 'CA', 43.70011, -79.4163, 'America/Toronto', 175],\n  ['Vancouver', 'CA', 49.24966, -123.11934, 'America/Vancouver', 70],\n  ['White Plains', 'US', 41.03399, -73.76291, 'America/New_York', 82],\n  ['Washington DC', 'US', 38.89511, -77.03637, 'America/New_York', 6],\n  ['Worcester', 'US', 42.26259, -71.80229, 'America/New_York', 164],\n];\nconst classicCities = new Map<string, Location>();\n\n// Zip-Codes.com TimeZone IDs\nconst ZIPCODES_TZ_MAP: Record<string, string> = {\n  '0': 'UTC',\n  '4': 'America/Puerto_Rico', // Atlantic (GMT -04:00)\n  '5': 'America/New_York', //    Eastern  (GMT -05:00)\n  '6': 'America/Chicago', //     Central  (GMT -06:00)\n  '7': 'America/Denver', //      Mountain (GMT -07:00)\n  '8': 'America/Los_Angeles', // Pacific  (GMT -08:00)\n  '9': 'America/Anchorage', //   Alaska   (GMT -09:00)\n  '10': 'Pacific/Honolulu', //   Hawaii-Aleutian Islands (GMT -10:00)\n  '11': 'Pacific/Pago_Pago', //  American Samoa (GMT -11:00)\n  '13': 'Pacific/Funafuti', //   Marshall Islands (GMT +12:00)\n  '14': 'Pacific/Guam', //       Guam     (GMT +10:00)\n  '15': 'Pacific/Palau', //      Palau    (GMT +9:00)\n  '16': 'Pacific/Chuuk', //      Micronesia (GMT +11:00)\n} as const;\n\n/** @private */\nconst timeFormatCache = new Map<string, Intl.DateTimeFormat>();\n\n/**\n * Gets a 24-hour time formatter (e.g. 07:41 or 20:03) from cache\n * or makes a new one if needed\n * @private\n */\nfunction getFormatter(tzid: string): Intl.DateTimeFormat {\n  const fmt = timeFormatCache.get(tzid);\n  if (fmt) return fmt;\n  const f = new Intl.DateTimeFormat('en-US', {\n    timeZone: tzid,\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: false,\n  });\n  timeFormatCache.set(tzid, f);\n  return f;\n}\n\n/** Class representing Location */\nexport class Location extends GeoLocation {\n  private readonly il: boolean;\n  private readonly cc?: string;\n  private readonly geoid?: string | number;\n  /**\n   * Initialize a Location instance\n   * @param latitude - Latitude as a decimal, valid range -90 thru +90 (e.g. 41.85003)\n   * @param longitude - Longitude as a decimal, valid range -180 thru +180 (e.g. -87.65005)\n   * @param il - in Israel (true) or Diaspora (false)\n   * @param tzid - Olson timezone ID, e.g. \"America/Chicago\"\n   * @param [cityName] - optional descriptive city name\n   * @param [countryCode] - ISO 3166 alpha-2 country code (e.g. \"FR\")\n   * @param [geoid] - optional string or numeric geographic ID\n   * @param [elevation] - in meters (default `0`)\n   */\n  constructor(\n    latitude: number,\n    longitude: number,\n    il: boolean,\n    tzid: string,\n    cityName?: string,\n    countryCode?: string,\n    geoid?: string | number,\n    elevation?: number\n  ) {\n    const lat = typeof latitude === 'number' ? latitude : parseFloat(latitude);\n    if (isNaN(lat) || lat < -90 || lat > 90) {\n      throw new RangeError(`Latitude ${latitude} out of range [-90,90]`);\n    }\n    const long =\n      typeof longitude === 'number' ? longitude : parseFloat(longitude);\n    if (isNaN(long) || long < -180 || long > 180) {\n      throw new RangeError(`Longitude ${longitude} out of range [-180,180]`);\n    }\n    const elev = typeof elevation === 'number' && elevation > 0 ? elevation : 0;\n    super(cityName || null, lat, long, elev, tzid);\n    this.il = Boolean(il);\n    this.cc = countryCode;\n    this.geoid = geoid;\n  }\n\n  getIsrael(): boolean {\n    return this.il;\n  }\n\n  getName(): string | null {\n    return this.getLocationName();\n  }\n\n  /**\n   * Returns the location name, up to the first comma\n   */\n  getShortName(): string | null {\n    const name = this.getLocationName();\n    if (!name) return name;\n    const comma = name.indexOf(', ');\n    if (comma === -1) return name;\n    if (this.cc === 'US' && name[comma + 2] === 'D') {\n      if (name[comma + 3] === 'C') {\n        return name.substring(0, comma + 4);\n      } else if (name[comma + 3] === '.' && name[comma + 4] === 'C') {\n        return name.substring(0, comma + 6);\n      }\n    }\n    return name.substring(0, comma);\n  }\n\n  getCountryCode(): string | undefined {\n    return this.cc;\n  }\n\n  getTzid(): string {\n    return this.getTimeZone();\n  }\n\n  /**\n   * Gets a 24-hour time formatter (e.g. 07:41 or 20:03) for this location\n   */\n  getTimeFormatter(): Intl.DateTimeFormat {\n    return getFormatter(this.getTimeZone());\n  }\n\n  getGeoId(): string | number | undefined {\n    return this.geoid;\n  }\n\n  /**\n   * Creates a location object from one of 60 \"classic\" Hebcal city names.\n   * The following city names are supported:\n   * 'Ashdod', 'Atlanta', 'Austin', 'Baghdad', 'Beer Sheva',\n   * 'Berlin', 'Baltimore', 'Bogota', 'Boston', 'Budapest',\n   * 'Buenos Aires', 'Buffalo', 'Chicago', 'Cincinnati', 'Cleveland',\n   * 'Dallas', 'Denver', 'Detroit', 'Eilat', 'Gibraltar', 'Haifa',\n   * 'Hawaii', 'Helsinki', 'Houston', 'Jerusalem', 'Johannesburg',\n   * 'Kiev', 'La Paz', 'Livingston', 'Las Vegas', 'London', 'Los Angeles',\n   * 'Marseilles', 'Miami', 'Minneapolis', 'Melbourne', 'Mexico City',\n   * 'Montreal', 'Moscow', 'New York', 'Omaha', 'Ottawa', 'Panama City',\n   * 'Paris', 'Pawtucket', 'Petach Tikvah', 'Philadelphia', 'Phoenix',\n   * 'Pittsburgh', 'Providence', 'Portland', 'Saint Louis', 'Saint Petersburg',\n   * 'San Diego', 'San Francisco', 'Sao Paulo', 'Seattle', 'Sydney',\n   * 'Tel Aviv', 'Tiberias', 'Toronto', 'Vancouver', 'White Plains',\n   * 'Washington DC', 'Worcester'\n   * @param name\n   */\n  static lookup(name: string): Location | undefined {\n    return classicCities.get(name.toLowerCase());\n  }\n\n  toString(): string {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Converts legacy Hebcal timezone to a standard Olson tzid.\n   * @param tz integer, GMT offset in hours\n   * @param dst 'none', 'eu', 'usa', or 'israel'\n   */\n  static legacyTzToTzid(tz: number, dst: string): string | undefined {\n    tz = +tz;\n    if (dst === 'none') {\n      if (tz === 0) {\n        return 'UTC';\n      } else {\n        const plus = tz > 0 ? '+' : '';\n        return `Etc/GMT${plus}${tz}`;\n      }\n    } else if (tz === 2 && dst === 'israel') {\n      return 'Asia/Jerusalem';\n    } else if (dst === 'eu') {\n      switch (tz) {\n        case -2:\n          return 'Atlantic/Cape_Verde';\n        case -1:\n          return 'Atlantic/Azores';\n        case 0:\n          return 'Europe/London';\n        case 1:\n          return 'Europe/Paris';\n        case 2:\n          return 'Europe/Athens';\n        default:\n          break;\n      }\n    } else if (dst === 'usa') {\n      return ZIPCODES_TZ_MAP[String(tz * -1)];\n    }\n    return undefined;\n  }\n\n  /**\n   * Converts timezone info from Zip-Codes.com to a standard Olson tzid.\n   * @example\n   * Location.getUsaTzid('AZ', 7, 'Y') // 'America/Denver'\n   * @param state two-letter all-caps US state abbreviation like 'CA'\n   * @param tz positive number, 5=America/New_York, 8=America/Los_Angeles\n   * @param dst single char 'Y' or 'N'\n   */\n  static getUsaTzid(state: string, tz: number, dst: string): string {\n    tz = +tz;\n    if (tz === 10 && state === 'AK') {\n      return 'America/Adak';\n    } else if (tz === 7 && state === 'AZ') {\n      return dst === 'Y' ? 'America/Denver' : 'America/Phoenix';\n    } else {\n      return ZIPCODES_TZ_MAP[tz];\n    }\n  }\n\n  /**\n   * Adds a location name for `Location.lookup()` only if the name isn't\n   * already being used. Returns `false` if the name is already taken\n   * and `true` if successfully added.\n   */\n  static addLocation(cityName: string, location: Location): boolean {\n    const name = cityName.toLowerCase();\n    if (classicCities.has(name)) {\n      return false;\n    }\n    classicCities.set(name, location);\n    return true;\n  }\n}\n\nfor (const city of classicCities0) {\n  const location = new Location(\n    city[2],\n    city[3],\n    city[1] === 'IL',\n    city[4],\n    city[0],\n    city[1],\n    undefined,\n    city[5]\n  );\n  Location.addLocation(city[0], location);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
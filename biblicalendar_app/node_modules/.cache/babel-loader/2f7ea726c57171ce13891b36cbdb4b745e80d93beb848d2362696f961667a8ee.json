{"ast":null,"code":"/*! @hebcal/hdate v0.13.5, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nconst GERESH = '׳';\nconst GERSHAYIM = '״';\nconst heb2num = {\n  א: 1,\n  ב: 2,\n  ג: 3,\n  ד: 4,\n  ה: 5,\n  ו: 6,\n  ז: 7,\n  ח: 8,\n  ט: 9,\n  י: 10,\n  כ: 20,\n  ל: 30,\n  מ: 40,\n  נ: 50,\n  ס: 60,\n  ע: 70,\n  פ: 80,\n  צ: 90,\n  ק: 100,\n  ר: 200,\n  ש: 300,\n  ת: 400\n};\nconst num2heb = {};\nfor (const [key, val] of Object.entries(heb2num)) {\n  num2heb[val] = key;\n}\nfunction num2digits(num) {\n  const digits = [];\n  while (num > 0) {\n    if (num === 15 || num === 16) {\n      digits.push(9);\n      digits.push(num - 9);\n      break;\n    }\n    let incr = 100;\n    let i;\n    for (i = 400; i > num; i -= incr) {\n      if (i === incr) {\n        incr = incr / 10;\n      }\n    }\n    digits.push(i);\n    num -= i;\n  }\n  return digits;\n}\n/**\n * Converts a numerical value to a string of Hebrew letters.\n *\n * When specifying years of the Hebrew calendar in the present millennium,\n * we omit the thousands (which is presently 5 [ה]).\n * @example\n * gematriya(5774) // 'תשע״ד' - cropped to 774\n * gematriya(25) // 'כ״ה'\n * gematriya(60) // 'ס׳'\n * gematriya(3761) // 'ג׳תשס״א'\n * gematriya(1123) // 'א׳קכ״ג'\n */\nfunction gematriya(num) {\n  const num1 = parseInt(num, 10);\n  if (!num1 || num1 < 0) {\n    throw new TypeError(`invalid number: ${num}`);\n  }\n  let str = '';\n  const thousands = Math.floor(num1 / 1000);\n  if (thousands > 0 && thousands !== 5) {\n    const tdigits = num2digits(thousands);\n    for (const tdig of tdigits) {\n      str += num2heb[tdig];\n    }\n    str += GERESH;\n  }\n  const digits = num2digits(num1 % 1000);\n  if (digits.length === 1) {\n    return str + num2heb[digits[0]] + GERESH;\n  }\n  for (let i = 0; i < digits.length; i++) {\n    if (i + 1 === digits.length) {\n      str += GERSHAYIM;\n    }\n    str += num2heb[digits[i]];\n  }\n  return str;\n}\n/**\n * Converts a string of Hebrew letters to a numerical value.\n *\n * Only considers the value of Hebrew letters `א` through `ת`.\n * Ignores final Hebrew letters such as `ך` (kaf sofit) or `ם` (mem sofit)\n * and vowels (nekudot).\n */\nfunction gematriyaStrToNum(str) {\n  let num = 0;\n  const gereshIdx = str.indexOf(GERESH);\n  if (gereshIdx !== -1 && gereshIdx !== str.length - 1) {\n    const thousands = str.substring(0, gereshIdx);\n    num += gematriyaStrToNum(thousands) * 1000;\n    str = str.substring(gereshIdx);\n  }\n  for (const ch of str) {\n    const n = heb2num[ch];\n    if (typeof n === 'number') {\n      num += n;\n    }\n  }\n  return num;\n}\nexport { gematriya, gematriyaStrToNum };","map":{"version":3,"names":["GERESH","GERSHAYIM","heb2num","א","ב","ג","ד","ה","ו","ז","ח","ט","י","כ","ל","מ","נ","ס","ע","פ","צ","ק","ר","ש","ת","num2heb","key","val","Object","entries","num2digits","num","digits","push","incr","i","gematriya","num1","parseInt","TypeError","str","thousands","Math","floor","tdigits","tdig","length","gematriyaStrToNum","gereshIdx","indexOf","substring","ch","n"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/gematriya.ts"],"sourcesContent":["const GERESH = '׳';\nconst GERSHAYIM = '״';\n\nconst heb2num: Record<string, number> = {\n  א: 1,\n  ב: 2,\n  ג: 3,\n  ד: 4,\n  ה: 5,\n  ו: 6,\n  ז: 7,\n  ח: 8,\n  ט: 9,\n  י: 10,\n  כ: 20,\n  ל: 30,\n  מ: 40,\n  נ: 50,\n  ס: 60,\n  ע: 70,\n  פ: 80,\n  צ: 90,\n  ק: 100,\n  ר: 200,\n  ש: 300,\n  ת: 400,\n} as const;\n\nconst num2heb: Record<number, string> = {};\nfor (const [key, val] of Object.entries(heb2num)) {\n  num2heb[val] = key;\n}\n\nfunction num2digits(num: number): number[] {\n  const digits: number[] = [];\n  while (num > 0) {\n    if (num === 15 || num === 16) {\n      digits.push(9);\n      digits.push(num - 9);\n      break;\n    }\n    let incr = 100;\n    let i;\n    for (i = 400; i > num; i -= incr) {\n      if (i === incr) {\n        incr = incr / 10;\n      }\n    }\n    digits.push(i);\n    num -= i;\n  }\n  return digits;\n}\n\n/**\n * Converts a numerical value to a string of Hebrew letters.\n *\n * When specifying years of the Hebrew calendar in the present millennium,\n * we omit the thousands (which is presently 5 [ה]).\n * @example\n * gematriya(5774) // 'תשע״ד' - cropped to 774\n * gematriya(25) // 'כ״ה'\n * gematriya(60) // 'ס׳'\n * gematriya(3761) // 'ג׳תשס״א'\n * gematriya(1123) // 'א׳קכ״ג'\n */\nexport function gematriya(num: number | string): string {\n  const num1 = parseInt(num as string, 10);\n  if (!num1 || num1 < 0) {\n    throw new TypeError(`invalid number: ${num}`);\n  }\n  let str = '';\n  const thousands = Math.floor(num1 / 1000);\n  if (thousands > 0 && thousands !== 5) {\n    const tdigits = num2digits(thousands);\n    for (const tdig of tdigits) {\n      str += num2heb[tdig];\n    }\n    str += GERESH;\n  }\n  const digits = num2digits(num1 % 1000);\n  if (digits.length === 1) {\n    return str + num2heb[digits[0]] + GERESH;\n  }\n  for (let i = 0; i < digits.length; i++) {\n    if (i + 1 === digits.length) {\n      str += GERSHAYIM;\n    }\n    str += num2heb[digits[i]];\n  }\n  return str;\n}\n\n/**\n * Converts a string of Hebrew letters to a numerical value.\n *\n * Only considers the value of Hebrew letters `א` through `ת`.\n * Ignores final Hebrew letters such as `ך` (kaf sofit) or `ם` (mem sofit)\n * and vowels (nekudot).\n */\nexport function gematriyaStrToNum(str: string): number {\n  let num = 0;\n  const gereshIdx: number = str.indexOf(GERESH);\n  if (gereshIdx !== -1 && gereshIdx !== str.length - 1) {\n    const thousands = str.substring(0, gereshIdx);\n    num += gematriyaStrToNum(thousands) * 1000;\n    str = str.substring(gereshIdx);\n  }\n  for (const ch of str) {\n    const n: number | undefined = heb2num[ch];\n    if (typeof n === 'number') {\n      num += n;\n    }\n  }\n  return num;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
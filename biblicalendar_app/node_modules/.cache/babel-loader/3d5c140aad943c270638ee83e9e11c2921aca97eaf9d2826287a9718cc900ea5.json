{"ast":null,"code":"/*! @hebcal/core v5.9.0, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nconst cals = new Map();\n/**\n * Plug-ins for daily learning calendars such as Daf Yomi, Mishna Yomi, Nach Yomi, etc.\n *\n * Learning schedules are provided by the `@hebcal/learning` package.\n */\nclass DailyLearning {\n  /**\n   * Register a new learning calendar.\n   * @param name case insensitive\n   * @param calendar a function that returns an `Event` or `null`\n   * @param startDate the first date for which this calendar is valid\n   */\n  static addCalendar(name, calendar, startDate) {\n    if (typeof calendar !== 'function') {\n      throw new TypeError(`Invalid calendar function: ${calendar}`);\n    }\n    cals.set(name.toLowerCase(), {\n      fn: calendar,\n      startDate: startDate\n    });\n  }\n  /**\n   * Returns an event from daily calendar for a given date. Returns `null` if there\n   * is no learning from this calendar on this date.\n   * @param name case insensitive\n   * @param hd Hebrew Date\n   * @param il true for Israel, false for Diaspora\n   */\n  static lookup(name, hd, il) {\n    const cal = cals.get(name.toLowerCase());\n    if (typeof cal === 'object') {\n      return cal.fn(hd, il);\n    }\n    return null;\n  }\n  static getStartDate(name) {\n    const cal = cals.get(name.toLowerCase());\n    if (typeof cal === 'object') {\n      return cal.startDate;\n    }\n    return undefined;\n  }\n  /**\n   * Tests to see if learning calendar has been registered\n   * @param name case insensitive\n   */\n  static has(name) {\n    return cals.has(name.toLowerCase());\n  }\n  /** Returns the names of all calendars registered */\n  static getCalendars() {\n    return Array.from(cals.keys());\n  }\n}\nexport { DailyLearning };","map":{"version":3,"names":["cals","Map","DailyLearning","addCalendar","name","calendar","startDate","TypeError","set","toLowerCase","fn","lookup","hd","il","cal","get","getStartDate","undefined","has","getCalendars","Array","from","keys"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/DailyLearning.ts"],"sourcesContent":["import {HDate} from '@hebcal/hdate';\nimport {Event} from './event';\n\ntype LearningCalendar = {\n  fn: Function;\n  startDate?: HDate;\n};\nconst cals = new Map<string, LearningCalendar>();\n\n/**\n * Plug-ins for daily learning calendars such as Daf Yomi, Mishna Yomi, Nach Yomi, etc.\n *\n * Learning schedules are provided by the `@hebcal/learning` package.\n */\nexport class DailyLearning {\n  /**\n   * Register a new learning calendar.\n   * @param name case insensitive\n   * @param calendar a function that returns an `Event` or `null`\n   * @param startDate the first date for which this calendar is valid\n   */\n  static addCalendar(name: string, calendar: Function, startDate?: HDate) {\n    if (typeof calendar !== 'function') {\n      throw new TypeError(`Invalid calendar function: ${calendar}`);\n    }\n    cals.set(name.toLowerCase(), {\n      fn: calendar,\n      startDate: startDate,\n    });\n  }\n\n  /**\n   * Returns an event from daily calendar for a given date. Returns `null` if there\n   * is no learning from this calendar on this date.\n   * @param name case insensitive\n   * @param hd Hebrew Date\n   * @param il true for Israel, false for Diaspora\n   */\n  static lookup(name: string, hd: HDate, il: boolean): Event | null {\n    const cal = cals.get(name.toLowerCase());\n    if (typeof cal === 'object') {\n      return cal.fn(hd, il);\n    }\n    return null;\n  }\n\n  static getStartDate(name: string): HDate | undefined {\n    const cal = cals.get(name.toLowerCase());\n    if (typeof cal === 'object') {\n      return cal.startDate;\n    }\n    return undefined;\n  }\n\n  /**\n   * Tests to see if learning calendar has been registered\n   * @param name case insensitive\n   */\n  static has(name: string): boolean {\n    return cals.has(name.toLowerCase());\n  }\n\n  /** Returns the names of all calendars registered */\n  static getCalendars(): string[] {\n    return Array.from(cals.keys());\n  }\n}\n"],"mappings":";AAOA,MAAMA,IAAI,GAAG,IAAIC,GAAG,EAA4B;AAEhD;;;;AAIG;MACUC,aAAa;EACxB;;;;;AAKG;EACH,OAAOC,WAAWA,CAACC,IAAY,EAAEC,QAAkB,EAAEC,SAAiB;IACpE,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;MAClC,MAAM,IAAIE,SAAS,CAAC,8BAA8BF,QAAQ,EAAE,CAAC;;IAE/DL,IAAI,CAACQ,GAAG,CAACJ,IAAI,CAACK,WAAW,EAAE,EAAE;MAC3BC,EAAE,EAAEL,QAAQ;MACZC,SAAS,EAAEA;IACZ,EAAC;;EAGJ;;;;;;AAMG;EACH,OAAOK,MAAMA,CAACP,IAAY,EAAEQ,EAAS,EAAEC,EAAW;IAChD,MAAMC,GAAG,GAAGd,IAAI,CAACe,GAAG,CAACX,IAAI,CAACK,WAAW,EAAE,CAAC;IACxC,IAAI,OAAOK,GAAG,KAAK,QAAQ,EAAE;MAC3B,OAAOA,GAAG,CAACJ,EAAE,CAACE,EAAE,EAAEC,EAAE,CAAC;;IAEvB,OAAO,IAAI;;EAGb,OAAOG,YAAYA,CAACZ,IAAY;IAC9B,MAAMU,GAAG,GAAGd,IAAI,CAACe,GAAG,CAACX,IAAI,CAACK,WAAW,EAAE,CAAC;IACxC,IAAI,OAAOK,GAAG,KAAK,QAAQ,EAAE;MAC3B,OAAOA,GAAG,CAACR,SAAS;;IAEtB,OAAOW,SAAS;;EAGlB;;;AAGG;EACH,OAAOC,GAAGA,CAACd,IAAY;IACrB,OAAOJ,IAAI,CAACkB,GAAG,CAACd,IAAI,CAACK,WAAW,EAAE,CAAC;;;EAIrC,OAAOU,YAAYA,CAAA;IACjB,OAAOC,KAAK,CAACC,IAAI,CAACrB,IAAI,CAACsB,IAAI,EAAE,CAAC;;AAEjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
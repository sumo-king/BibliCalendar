{"ast":null,"code":"/*! @hebcal/core v5.9.0, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nconst hour12cc = {\n  US: 1,\n  CA: 1,\n  BR: 1,\n  AU: 1,\n  NZ: 1,\n  DO: 1,\n  PR: 1,\n  GR: 1,\n  IN: 1,\n  KR: 1,\n  NP: 1,\n  ZA: 1\n};\n/**\n * @private\n * @param timeStr - original time like \"20:30\"\n * @param suffix - \"p\" or \"pm\" or \" P.M.\". Add leading space if you want it\n * @param options\n */\nfunction reformatTimeStr(timeStr, suffix, options) {\n  var _a;\n  if (typeof timeStr !== 'string') throw new TypeError(`Bad timeStr: ${timeStr}`);\n  const cc = ((_a = options === null || options === undefined ? undefined : options.location) === null || _a === undefined ? undefined : _a.getCountryCode()) || ((options === null || options === undefined ? undefined : options.il) ? 'IL' : 'US');\n  const hour12 = options === null || options === undefined ? undefined : options.hour12;\n  if (typeof hour12 !== 'undefined' && !hour12) {\n    return timeStr;\n  }\n  if (!hour12 && typeof hour12cc[cc] === 'undefined') {\n    return timeStr;\n  }\n  const hm = timeStr.split(':');\n  let hour = parseInt(hm[0], 10);\n  if (hour < 12 && suffix) {\n    suffix = suffix.replace('p', 'a').replace('P', 'A');\n    if (hour === 0) {\n      hour = 12;\n    }\n  } else if (hour > 12) {\n    hour = hour % 12;\n  } else if (hour === 0) {\n    hour = '00';\n  }\n  return `${hour}:${hm[1]}${suffix}`;\n}\nexport { reformatTimeStr };","map":{"version":3,"names":["hour12cc","US","CA","BR","AU","NZ","DO","PR","GR","IN","KR","NP","ZA","reformatTimeStr","timeStr","suffix","options","TypeError","cc","_a","undefined","location","getCountryCode","il","hour12","hm","split","hour","parseInt","replace"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/reformatTimeStr.ts"],"sourcesContent":["import {CalOptions} from './CalOptions';\n\nconst hour12cc: Record<string, number> = {\n  US: 1,\n  CA: 1,\n  BR: 1,\n  AU: 1,\n  NZ: 1,\n  DO: 1,\n  PR: 1,\n  GR: 1,\n  IN: 1,\n  KR: 1,\n  NP: 1,\n  ZA: 1,\n} as const;\n\n/**\n * @private\n * @param timeStr - original time like \"20:30\"\n * @param suffix - \"p\" or \"pm\" or \" P.M.\". Add leading space if you want it\n * @param options\n */\nexport function reformatTimeStr(\n  timeStr: string,\n  suffix: string,\n  options?: CalOptions\n): string {\n  if (typeof timeStr !== 'string')\n    throw new TypeError(`Bad timeStr: ${timeStr}`);\n  const cc = options?.location?.getCountryCode() || (options?.il ? 'IL' : 'US');\n  const hour12 = options?.hour12;\n  if (typeof hour12 !== 'undefined' && !hour12) {\n    return timeStr;\n  }\n  if (!hour12 && typeof hour12cc[cc] === 'undefined') {\n    return timeStr;\n  }\n  const hm = timeStr.split(':');\n  let hour: string | number = parseInt(hm[0], 10);\n  if (hour < 12 && suffix) {\n    suffix = suffix.replace('p', 'a').replace('P', 'A');\n    if (hour === 0) {\n      hour = 12;\n    }\n  } else if (hour > 12) {\n    hour = hour % 12;\n  } else if (hour === 0) {\n    hour = '00';\n  }\n  return `${hour}:${hm[1]}${suffix}`;\n}\n"],"mappings":";AAEA,MAAMA,QAAQ,GAA2B;EACvCC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE;CACI;AAEV;;;;;AAKG;SACaC,eAAeA,CAC7BC,OAAe,EACfC,MAAc,EACdC,OAAoB;;EAEpB,IAAI,OAAOF,OAAO,KAAK,QAAQ,EAC7B,MAAM,IAAIG,SAAS,CAAC,gBAAgBH,OAAO,EAAE,CAAC;EAChD,MAAMI,EAAE,GAAG,EAAAC,EAAA,GAAAH,OAAO,KAAP,QAAAA,OAAO,KAAPI,SAAA,GAAAA,SAAA,GAAAJ,OAAO,CAAEK,QAAQ,MAAE,QAAAF,EAAA,KAAAC,SAAA,GAAAA,SAAA,GAAAD,EAAA,CAAAG,cAAc,EAAE,MAAK,CAAAN,OAAO,KAAP,QAAAA,OAAO,KAAPI,SAAA,GAAAA,SAAA,GAAAJ,OAAO,CAAEO,EAAE,IAAG,IAAI,GAAG,IAAI,CAAC;EAC7E,MAAMC,MAAM,GAAGR,OAAO,aAAPA,OAAO,KAAPI,SAAA,GAAAA,SAAA,GAAAJ,OAAO,CAAEQ,MAAM;EAC9B,IAAI,OAAOA,MAAM,KAAK,WAAW,IAAI,CAACA,MAAM,EAAE;IAC5C,OAAOV,OAAO;;EAEhB,IAAI,CAACU,MAAM,IAAI,OAAOxB,QAAQ,CAACkB,EAAE,CAAC,KAAK,WAAW,EAAE;IAClD,OAAOJ,OAAO;;EAEhB,MAAMW,EAAE,GAAGX,OAAO,CAACY,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAIC,IAAI,GAAoBC,QAAQ,CAACH,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/C,IAAIE,IAAI,GAAG,EAAE,IAAIZ,MAAM,EAAE;IACvBA,MAAM,GAAGA,MAAM,CAACc,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;IACnD,IAAIF,IAAI,KAAK,CAAC,EAAE;MACdA,IAAI,GAAG,EAAE;;SAEN,IAAIA,IAAI,GAAG,EAAE,EAAE;IACpBA,IAAI,GAAGA,IAAI,GAAG,EAAE;SACX,IAAIA,IAAI,KAAK,CAAC,EAAE;IACrBA,IAAI,GAAG,IAAI;;EAEb,OAAO,GAAGA,IAAI,IAAIF,EAAE,CAAC,CAAC,CAAC,GAAGV,MAAM,EAAE;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*! @hebcal/core v5.9.0, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nimport { HDate, months } from '@hebcal/hdate';\nimport { dateYomHaZikaron } from './modern.js';\nfunction range(start, end) {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\nconst NONE = {\n  shacharit: false,\n  mincha: false,\n  allCongs: false\n};\n/**\n * Return details on what Tachanun (or Tzidchatcha on Shabbat) is said on `hdate`.\n *\n * Tachanun is not said on Rosh Chodesh, the month of Nisan, Lag Baomer,\n * Rosh Chodesh Sivan until Isru Chag, Tisha B'av, 15 Av, Erev Rosh Hashanah,\n * Rosh Hashanah, Erev Yom Kippur until after Simchat Torah, Chanukah,\n * Tu B'shvat, Purim and Shushan Purim, and Purim and Shushan Purim Katan.\n *\n * In some congregations Tachanun is not said until from Rosh Chodesh Sivan\n * until 14th Sivan, Sukkot until after Rosh Chodesh Cheshvan, Pesach Sheini,\n * Yom Ha'atzmaut, and Yom Yerushalayim.\n *\n * Tachanun is not said at Mincha on days before it is not said at Shacharit.\n *\n * Tachanun is not said at Shacharit on Shabbat, but is at Mincha, usually.\n */\nfunction tachanun(hdate, il) {\n  return tachanun0(hdate, il, true);\n}\nfunction tachanun0(hdate, il, checkNext) {\n  const year = hdate.yy;\n  const dates = tachanunYear(year, il);\n  const abs = hdate.abs();\n  if (dates.none.indexOf(abs) > -1) {\n    return NONE;\n  }\n  const dow = hdate.getDay();\n  const ret = {\n    shacharit: false,\n    mincha: false,\n    allCongs: false\n  };\n  if (dates.some.indexOf(abs) === -1) {\n    ret.allCongs = true;\n  }\n  if (dow !== 6) {\n    ret.shacharit = true;\n  }\n  const tomorrow = abs + 1;\n  if (checkNext && dates.yesPrev.indexOf(tomorrow) === -1) {\n    const tmp = tachanun0(new HDate(tomorrow), il, false);\n    ret.mincha = tmp.shacharit;\n  } else {\n    ret.mincha = dow !== 5;\n  }\n  if (ret.allCongs && !ret.mincha && !ret.shacharit) {\n    return NONE;\n  }\n  return ret;\n}\nfunction tachanunYear(year, il) {\n  const leap = HDate.isLeapYear(year);\n  const monthsInYear = HDate.monthsInYear(year);\n  let av9dt = new HDate(9, months.AV, year);\n  if (av9dt.getDay() === 6) {\n    av9dt = av9dt.next();\n  }\n  let shushPurim = new HDate(15, months.ADAR_II, year);\n  if (shushPurim.getDay() === 6) {\n    shushPurim = shushPurim.next();\n  }\n  const none = [new HDate(2, months.TISHREI, year) // Rosh Hashana II\n  ].concat(\n  // Rosh Chodesh - 1st of every month. Also includes RH day 1 (1 Tishrei)\n  range(1, monthsInYear).map(month => new HDate(1, month, year)),\n  // Rosh Chodesh - 30th of months that have one\n  range(1, monthsInYear).filter(month => HDate.daysInMonth(month, year) === 30).map(month => new HDate(30, month, year)),\n  // entire month of Nisan\n  range(1, HDate.daysInMonth(months.NISAN, year)).map(mday => new HDate(mday, months.NISAN, year)), new HDate(18, months.IYYAR, year),\n  // Lag BaOmer\n  // Rosh Chodesh Sivan thru Isru Chag\n  range(1, 8 - (il ? 1 : 0)).map(mday => new HDate(mday, months.SIVAN, year)), av9dt,\n  // Tisha B'Av\n  new HDate(15, months.AV, year),\n  // Tu B'Av\n  new HDate(29, months.ELUL, year),\n  // Erev Rosh Hashanah\n  // Erev Yom Kippur thru Isru Chag\n  range(9, 24 - (il ? 1 : 0)).map(mday => new HDate(mday, months.TISHREI, year)),\n  // Chanukah\n  range(25, 33).map(mday => new HDate(mday, months.KISLEV, year)), new HDate(15, months.SHVAT, year),\n  // Tu BiShvat\n  new HDate(14, months.ADAR_II, year),\n  // Purim\n  shushPurim, leap ? new HDate(14, months.ADAR_I, year) : [] // Purim Katan\n  );\n  const some = [new HDate(14, months.IYYAR, year) // Pesach Sheini\n  ].concat(\n  // Until 14 Sivan\n  range(1, 13).map(mday => new HDate(mday, months.SIVAN, year)),\n  // Until after Rosh Chodesh Cheshvan\n  range(20, 31).map(mday => new HDate(mday, months.TISHREI, year)),\n  // Yom HaAtzma'ut, which changes based on day of week\n  year >= 5708 ? dateYomHaZikaron(year).next() : [],\n  // Yom Yerushalayim\n  year >= 5727 ? new HDate(28, months.IYYAR, year) : []);\n  const yesPrev = [new HDate(29, months.ELUL, year - 1),\n  // Erev Rosh Hashanah\n  new HDate(9, months.TISHREI, year),\n  // Erev Yom Kippur\n  new HDate(14, months.IYYAR, year) // Pesach Sheini\n  ];\n  return {\n    none: none.map(hd => hd.abs()).sort((a, b) => a - b),\n    some: some.map(hd => hd.abs()).sort((a, b) => a - b),\n    yesPrev: yesPrev.map(hd => hd.abs()).sort((a, b) => a - b)\n  };\n}\nexport { tachanun };","map":{"version":3,"names":["range","start","end","arr","i","push","NONE","shacharit","mincha","allCongs","tachanun","hdate","il","tachanun0","checkNext","year","yy","dates","tachanunYear","abs","none","indexOf","dow","getDay","ret","some","tomorrow","yesPrev","tmp","HDate","leap","isLeapYear","monthsInYear","av9dt","months","AV","next","shushPurim","ADAR_II","TISHREI","concat","map","month","filter","daysInMonth","NISAN","mday","IYYAR","SIVAN","ELUL","KISLEV","SHVAT","ADAR_I","dateYomHaZikaron","hd","sort","a","b"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/tachanun.ts"],"sourcesContent":["import {HDate, months} from '@hebcal/hdate';\nimport {dateYomHaZikaron} from './modern';\n\nfunction range(start: number, end: number): readonly number[] {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\n/**\n * Is *tachanun* said today?\n */\nexport type TachanunResult = {\n  /** Tachanun is said at Shacharit */\n  shacharit: boolean;\n  /** Tachanun is said at Mincha */\n  mincha: boolean;\n  /** All congregations say Tachanun on the day */\n  allCongs: boolean;\n};\n\nconst NONE: TachanunResult = {\n  shacharit: false,\n  mincha: false,\n  allCongs: false,\n} as const;\n\n/**\n * Return details on what Tachanun (or Tzidchatcha on Shabbat) is said on `hdate`.\n *\n * Tachanun is not said on Rosh Chodesh, the month of Nisan, Lag Baomer,\n * Rosh Chodesh Sivan until Isru Chag, Tisha B'av, 15 Av, Erev Rosh Hashanah,\n * Rosh Hashanah, Erev Yom Kippur until after Simchat Torah, Chanukah,\n * Tu B'shvat, Purim and Shushan Purim, and Purim and Shushan Purim Katan.\n *\n * In some congregations Tachanun is not said until from Rosh Chodesh Sivan\n * until 14th Sivan, Sukkot until after Rosh Chodesh Cheshvan, Pesach Sheini,\n * Yom Ha'atzmaut, and Yom Yerushalayim.\n *\n * Tachanun is not said at Mincha on days before it is not said at Shacharit.\n *\n * Tachanun is not said at Shacharit on Shabbat, but is at Mincha, usually.\n */\nexport function tachanun(hdate: HDate, il: boolean): TachanunResult {\n  return tachanun0(hdate, il, true);\n}\n\nfunction tachanun0(\n  hdate: HDate,\n  il: boolean,\n  checkNext: boolean\n): TachanunResult {\n  const year = hdate.yy;\n  const dates = tachanunYear(year, il);\n  const abs = hdate.abs();\n  if (dates.none.indexOf(abs) > -1) {\n    return NONE;\n  }\n  const dow = hdate.getDay();\n  const ret: TachanunResult = {\n    shacharit: false,\n    mincha: false,\n    allCongs: false,\n  };\n  if (dates.some.indexOf(abs) === -1) {\n    ret.allCongs = true;\n  }\n  if (dow !== 6) {\n    ret.shacharit = true;\n  }\n  const tomorrow = abs + 1;\n  if (checkNext && dates.yesPrev.indexOf(tomorrow) === -1) {\n    const tmp = tachanun0(new HDate(tomorrow), il, false);\n    ret.mincha = tmp.shacharit;\n  } else {\n    ret.mincha = dow !== 5;\n  }\n  if (ret.allCongs && !ret.mincha && !ret.shacharit) {\n    return NONE;\n  }\n  return ret;\n}\n\ntype TachanunYear = {\n  none: number[];\n  some: number[];\n  yesPrev: number[];\n};\n\nfunction tachanunYear(year: number, il: boolean): TachanunYear {\n  const leap = HDate.isLeapYear(year);\n  const monthsInYear = HDate.monthsInYear(year);\n  let av9dt = new HDate(9, months.AV, year);\n  if (av9dt.getDay() === 6) {\n    av9dt = av9dt.next();\n  }\n  let shushPurim = new HDate(15, months.ADAR_II, year);\n  if (shushPurim.getDay() === 6) {\n    shushPurim = shushPurim.next();\n  }\n  const none: readonly HDate[] = [\n    new HDate(2, months.TISHREI, year), // Rosh Hashana II\n  ].concat(\n    // Rosh Chodesh - 1st of every month. Also includes RH day 1 (1 Tishrei)\n    range(1, monthsInYear).map(month => new HDate(1, month, year)),\n    // Rosh Chodesh - 30th of months that have one\n    range(1, monthsInYear)\n      .filter(month => HDate.daysInMonth(month, year) === 30)\n      .map(month => new HDate(30, month, year)),\n    // entire month of Nisan\n    range(1, HDate.daysInMonth(months.NISAN, year)).map(\n      mday => new HDate(mday, months.NISAN, year)\n    ),\n    new HDate(18, months.IYYAR, year), // Lag BaOmer\n    // Rosh Chodesh Sivan thru Isru Chag\n    range(1, 8 - (il ? 1 : 0)).map(mday => new HDate(mday, months.SIVAN, year)),\n    av9dt, // Tisha B'Av\n    new HDate(15, months.AV, year), // Tu B'Av\n    new HDate(29, months.ELUL, year), // Erev Rosh Hashanah\n    // Erev Yom Kippur thru Isru Chag\n    range(9, 24 - (il ? 1 : 0)).map(\n      mday => new HDate(mday, months.TISHREI, year)\n    ),\n    // Chanukah\n    range(25, 33).map(mday => new HDate(mday, months.KISLEV, year)),\n    new HDate(15, months.SHVAT, year), // Tu BiShvat\n    new HDate(14, months.ADAR_II, year), // Purim\n    shushPurim,\n    leap ? new HDate(14, months.ADAR_I, year) : [] // Purim Katan\n  );\n  const some: readonly HDate[] = [\n    new HDate(14, months.IYYAR, year), // Pesach Sheini\n  ].concat(\n    // Until 14 Sivan\n    range(1, 13).map(mday => new HDate(mday, months.SIVAN, year)),\n    // Until after Rosh Chodesh Cheshvan\n    range(20, 31).map(mday => new HDate(mday, months.TISHREI, year)),\n    // Yom HaAtzma'ut, which changes based on day of week\n    year >= 5708 ? (dateYomHaZikaron(year) as HDate).next() : [],\n    // Yom Yerushalayim\n    year >= 5727 ? new HDate(28, months.IYYAR, year) : []\n  );\n  const yesPrev: readonly HDate[] = [\n    new HDate(29, months.ELUL, year - 1), // Erev Rosh Hashanah\n    new HDate(9, months.TISHREI, year), // Erev Yom Kippur\n    new HDate(14, months.IYYAR, year), // Pesach Sheini\n  ];\n  return {\n    none: none.map(hd => hd.abs()).sort((a, b) => a - b),\n    some: some.map(hd => hd.abs()).sort((a, b) => a - b),\n    yesPrev: yesPrev.map(hd => hd.abs()).sort((a, b) => a - b),\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
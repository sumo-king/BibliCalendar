{"ast":null,"code":"/*! @hebcal/core v5.9.0, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nimport { HDate, months, Locale } from '@hebcal/hdate';\nimport { Event, flags } from './event.js';\nimport { Molad } from './molad.js';\nimport './locale.js';\nconst mevarchimChodeshStr = 'Shabbat Mevarchim Chodesh';\n/** Represents Mevarchim haChodesh, the announcement of the new month */\nclass MevarchimChodeshEvent extends Event {\n  /**\n   * Constructs Mevarchim haChodesh event\n   * @param date Hebrew date event occurs\n   * @param monthName Hebrew month name (not translated)\n   * @param [memo]\n   */\n  constructor(date, monthName, memo) {\n    super(date, `${mevarchimChodeshStr} ${monthName}`, flags.SHABBAT_MEVARCHIM);\n    this.monthName = monthName;\n    if (memo) {\n      this.memo = memo;\n    } else {\n      const hyear = date.getFullYear();\n      const hmonth = date.getMonth();\n      const monNext = hmonth === HDate.monthsInYear(hyear) ? months.NISAN : hmonth + 1;\n      const molad = new Molad(hyear, monNext);\n      this.memo = molad.render('en', {\n        hour12: false\n      });\n    }\n  }\n  basename() {\n    return this.getDesc();\n  }\n  /**\n   * Returns (translated) description of this event\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale) {\n    const monthName0 = Locale.gettext(this.monthName, locale);\n    const monthName = monthName0.replace(/'/g, '’');\n    return Locale.gettext(mevarchimChodeshStr, locale) + ' ' + monthName;\n  }\n  /**\n   * Returns (translated) description of this event\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  renderBrief(locale) {\n    const str = this.render(locale);\n    const space = str.indexOf(' ');\n    return str.substring(space + 1);\n  }\n}\nexport { MevarchimChodeshEvent };","map":{"version":3,"names":["mevarchimChodeshStr","MevarchimChodeshEvent","Event","constructor","date","monthName","memo","flags","SHABBAT_MEVARCHIM","hyear","getFullYear","hmonth","getMonth","monNext","HDate","monthsInYear","months","NISAN","molad","Molad","render","hour12","basename","getDesc","locale","monthName0","Locale","gettext","replace","renderBrief","str","space","indexOf","substring"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/MevarchimChodeshEvent.ts"],"sourcesContent":["import {HDate, Locale, months} from '@hebcal/hdate';\nimport {Event, flags} from './event';\nimport {Molad} from './molad';\nimport './locale'; // Adds Hebrew and Ashkenazic translations\n\nconst mevarchimChodeshStr = 'Shabbat Mevarchim Chodesh';\n\n/** Represents Mevarchim haChodesh, the announcement of the new month */\nexport class MevarchimChodeshEvent extends Event {\n  readonly monthName: string;\n  /**\n   * Constructs Mevarchim haChodesh event\n   * @param date Hebrew date event occurs\n   * @param monthName Hebrew month name (not translated)\n   * @param [memo]\n   */\n  constructor(date: HDate, monthName: string, memo: string) {\n    super(date, `${mevarchimChodeshStr} ${monthName}`, flags.SHABBAT_MEVARCHIM);\n    this.monthName = monthName;\n    if (memo) {\n      this.memo = memo;\n    } else {\n      const hyear = date.getFullYear();\n      const hmonth = date.getMonth();\n      const monNext =\n        hmonth === HDate.monthsInYear(hyear) ? months.NISAN : hmonth + 1;\n      const molad = new Molad(hyear, monNext);\n      this.memo = molad.render('en', {hour12: false});\n    }\n  }\n\n  basename(): string {\n    return this.getDesc();\n  }\n  /**\n   * Returns (translated) description of this event\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale?: string): string {\n    const monthName0 = Locale.gettext(this.monthName, locale);\n    const monthName = monthName0.replace(/'/g, '’');\n    return Locale.gettext(mevarchimChodeshStr, locale) + ' ' + monthName;\n  }\n  /**\n   * Returns (translated) description of this event\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  renderBrief(locale?: string): string {\n    const str = this.render(locale);\n    const space = str.indexOf(' ');\n    return str.substring(space + 1);\n  }\n}\n"],"mappings":";;;;;AAKA,MAAMA,mBAAmB,GAAG,2BAA2B;AAEvD;AACM,MAAOC,qBAAsB,SAAQC,KAAK;EAE9C;;;;;AAKG;EACHC,YAAYC,IAAW,EAAEC,SAAiB,EAAEC,IAAY;IACtD,KAAK,CAACF,IAAI,EAAE,GAAGJ,mBAAmB,IAAIK,SAAS,EAAE,EAAEE,KAAK,CAACC,iBAAiB,CAAC;IAC3E,IAAI,CAACH,SAAS,GAAGA,SAAS;IAC1B,IAAIC,IAAI,EAAE;MACR,IAAI,CAACA,IAAI,GAAGA,IAAI;WACX;MACL,MAAMG,KAAK,GAAGL,IAAI,CAACM,WAAW,EAAE;MAChC,MAAMC,MAAM,GAAGP,IAAI,CAACQ,QAAQ,EAAE;MAC9B,MAAMC,OAAO,GACXF,MAAM,KAAKG,KAAK,CAACC,YAAY,CAACN,KAAK,CAAC,GAAGO,MAAM,CAACC,KAAK,GAAGN,MAAM,GAAG,CAAC;MAClE,MAAMO,KAAK,GAAG,IAAIC,KAAK,CAACV,KAAK,EAAEI,OAAO,CAAC;MACvC,IAAI,CAACP,IAAI,GAAGY,KAAK,CAACE,MAAM,CAAC,IAAI,EAAE;QAACC,MAAM,EAAE;MAAK,CAAC,CAAC;;;EAInDC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACC,OAAO,EAAE;;EAEvB;;;AAGG;EACHH,MAAMA,CAACI,MAAe;IACpB,MAAMC,UAAU,GAAGC,MAAM,CAACC,OAAO,CAAC,IAAI,CAACtB,SAAS,EAAEmB,MAAM,CAAC;IACzD,MAAMnB,SAAS,GAAGoB,UAAU,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAC/C,OAAOF,MAAM,CAACC,OAAO,CAAC3B,mBAAmB,EAAEwB,MAAM,CAAC,GAAG,GAAG,GAAGnB,SAAS;;EAEtE;;;AAGG;EACHwB,WAAWA,CAACL,MAAe;IACzB,MAAMM,GAAG,GAAG,IAAI,CAACV,MAAM,CAACI,MAAM,CAAC;IAC/B,MAAMO,KAAK,GAAGD,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC;IAC9B,OAAOF,GAAG,CAACG,SAAS,CAACF,KAAK,GAAG,CAAC,CAAC;;AAElC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*! @hebcal/core v5.9.0, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nimport { HDate, months } from '@hebcal/hdate';\nimport { ParshaEvent } from './ParshaEvent.js';\nimport { getSedra } from './sedra.js';\n\n/**\n * Calculates weekly Torah Reading on Saturdays for entire year\n * @param year Hebrew year\n * @param il Israel (false for Diaspora)\n * @returns an array of `ParshaEvent` occurring on Saturdays that contain a regular\n *  (non-holiday) Parashat HaShavua\n */\nfunction parshaYear(year, il) {\n  const sedra = getSedra(year, il);\n  const startAbs = sedra.getFirstSaturday();\n  const endAbs = HDate.hebrew2abs(year, months.ELUL, 29);\n  const events = [];\n  for (let absDt = startAbs; absDt <= endAbs; absDt += 7) {\n    const parsha = sedra.lookup(absDt);\n    if (!parsha.chag) {\n      const ev = new ParshaEvent(parsha.hdate, parsha.parsha, il, parsha.num);\n      events.push(ev);\n    }\n  }\n  return events;\n}\nexport { parshaYear };","map":{"version":3,"names":["parshaYear","year","il","sedra","getSedra","startAbs","getFirstSaturday","endAbs","HDate","hebrew2abs","months","ELUL","events","absDt","parsha","lookup","chag","ev","ParshaEvent","hdate","num","push"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/parshaYear.ts"],"sourcesContent":["import {HDate, months} from '@hebcal/hdate';\nimport {Event} from './event';\nimport {ParshaEvent} from './ParshaEvent';\nimport {getSedra} from './sedra';\n\n/**\n * Calculates weekly Torah Reading on Saturdays for entire year\n * @param year Hebrew year\n * @param il Israel (false for Diaspora)\n * @returns an array of `ParshaEvent` occurring on Saturdays that contain a regular\n *  (non-holiday) Parashat HaShavua\n */\nexport function parshaYear(year: number, il: boolean): Event[] {\n  const sedra = getSedra(year, il);\n  const startAbs = sedra.getFirstSaturday();\n  const endAbs = HDate.hebrew2abs(year, months.ELUL, 29);\n  const events: Event[] = [];\n  for (let absDt = startAbs; absDt <= endAbs; absDt += 7) {\n    const parsha = sedra.lookup(absDt);\n    if (!parsha.chag) {\n      const ev = new ParshaEvent(parsha.hdate, parsha.parsha, il, parsha.num);\n      events.push(ev);\n    }\n  }\n  return events;\n}\n"],"mappings":";;;;;AAKA;;;;;;AAMG;AACa,SAAAA,UAAUA,CAACC,IAAY,EAAEC,EAAW;EAClD,MAAMC,KAAK,GAAGC,QAAQ,CAACH,IAAI,EAAEC,EAAE,CAAC;EAChC,MAAMG,QAAQ,GAAGF,KAAK,CAACG,gBAAgB,EAAE;EACzC,MAAMC,MAAM,GAAGC,KAAK,CAACC,UAAU,CAACR,IAAI,EAAES,MAAM,CAACC,IAAI,EAAE,EAAE,CAAC;EACtD,MAAMC,MAAM,GAAY,EAAE;EAC1B,KAAK,IAAIC,KAAK,GAAGR,QAAQ,EAAEQ,KAAK,IAAIN,MAAM,EAAEM,KAAK,IAAI,CAAC,EAAE;IACtD,MAAMC,MAAM,GAAGX,KAAK,CAACY,MAAM,CAACF,KAAK,CAAC;IAClC,IAAI,CAACC,MAAM,CAACE,IAAI,EAAE;MAChB,MAAMC,EAAE,GAAG,IAAIC,WAAW,CAACJ,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACA,MAAM,EAAEZ,EAAE,EAAEY,MAAM,CAACM,GAAG,CAAC;MACvER,MAAM,CAACS,IAAI,CAACJ,EAAE,CAAC;;;EAGnB,OAAOL,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
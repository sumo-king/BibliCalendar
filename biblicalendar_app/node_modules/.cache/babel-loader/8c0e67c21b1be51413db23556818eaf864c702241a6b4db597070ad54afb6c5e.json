{"ast":null,"code":"/*! @hebcal/hdate v0.13.5, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\n/* eslint-disable @typescript-eslint/no-namespace, no-inner-declarations */\n/** @private */\nconst lengths = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n/** @private */\nconst monthLengths = [lengths, lengths.slice()];\nmonthLengths[1][2] = 29;\n/**\n * @private\n */\nfunction mod(x, y) {\n  return x - y * Math.floor(x / y);\n}\n/**\n * @private\n */\nfunction quotient(x, y) {\n  return Math.floor(x / y);\n}\n/**\n * @private\n * @param abs - R.D. number of days\n */\nfunction yearFromFixed(abs) {\n  const l0 = abs - 1;\n  const n400 = quotient(l0, 146097);\n  const d1 = mod(l0, 146097);\n  const n100 = quotient(d1, 36524);\n  const d2 = mod(d1, 36524);\n  const n4 = quotient(d2, 1461);\n  const d3 = mod(d2, 1461);\n  const n1 = quotient(d3, 365);\n  const year = 400 * n400 + 100 * n100 + 4 * n4 + n1;\n  return n100 !== 4 && n1 !== 4 ? year + 1 : year;\n}\n/*\nconst ABS_14SEP1752 = 639797;\nconst ABS_2SEP1752 = 639785;\n*/\n/*\n * Formerly in namespace, now top-level\n */\n/**\n * Returns true if the Gregorian year is a leap year\n * @param year Gregorian year\n */\nfunction isGregLeapYear(year) {\n  return !(year % 4) && (!!(year % 100) || !(year % 400));\n}\n/**\n * Number of days in the Gregorian month for given year\n * @param month Gregorian month (1=January, 12=December)\n * @param year Gregorian year\n */\nfunction daysInGregMonth(month, year) {\n  // 1 based months\n  return monthLengths[+isGregLeapYear(year)][month];\n}\n/**\n * Returns true if the object is a Javascript Date\n */\nfunction isDate(obj) {\n  // eslint-disable-next-line no-prototype-builtins\n  return typeof obj === 'object' && Date.prototype.isPrototypeOf(obj);\n}\n/**\n * @private\n * @param year\n * @param month (1-12)\n * @param day (1-31)\n */\nfunction toFixed(year, month, day) {\n  const py = year - 1;\n  return 365 * py + quotient(py, 4) - quotient(py, 100) + quotient(py, 400) + quotient(367 * month - 362, 12) + (month <= 2 ? 0 : isGregLeapYear(year) ? -1 : -2) + day;\n}\n/**\n * Converts Gregorian date to absolute R.D. (Rata Die) days\n * @param date Gregorian date\n */\nfunction greg2abs(date) {\n  if (!isDate(date)) {\n    throw new TypeError(`not a Date: ${date}`);\n  }\n  const abs = toFixed(date.getFullYear(), date.getMonth() + 1, date.getDate());\n  /*\n    if (abs < ABS_14SEP1752 && abs > ABS_2SEP1752) {\n      throw new RangeError(`Invalid Date: ${date}`);\n    }\n    */\n  return abs;\n}\n/**\n * Converts from Rata Die (R.D. number) to Gregorian date.\n * See the footnote on page 384 of ``Calendrical Calculations, Part II:\n * Three Historical Calendars'' by E. M. Reingold,  N. Dershowitz, and S. M.\n * Clamen, Software--Practice and Experience, Volume 23, Number 4\n * (April, 1993), pages 383-404 for an explanation.\n *\n * Note that this function returns the daytime portion of the date.\n * For example, the 15th of Cheshvan 5769 began at sundown on\n * 12 November 2008 and continues through 13 November 2008. This\n * function would return only the date 13 November 2008.\n * @param abs - R.D. number of days\n * @example\n * const abs = hebrew2abs(5769, months.CHESHVAN, 15);\n * const date = abs2greg(abs); // 13 November 2008\n * const year = date.getFullYear(); // 2008\n * const monthNum = date.getMonth() + 1; // 11\n * const day = date.getDate(); // 13\n */\nfunction abs2greg(abs) {\n  if (typeof abs !== 'number') {\n    throw new TypeError(`not a Number: ${abs}`);\n  }\n  abs = Math.trunc(abs);\n  /*\n    if (abs < ABS_14SEP1752 && abs > ABS_2SEP1752) {\n      throw new RangeError(`Invalid Date: ${abs}`);\n    }\n    */\n  const year = yearFromFixed(abs);\n  const priorDays = abs - toFixed(year, 1, 1);\n  const correction = abs < toFixed(year, 3, 1) ? 0 : isGregLeapYear(year) ? 1 : 2;\n  const month = quotient(12 * (priorDays + correction) + 373, 367);\n  const day = abs - toFixed(year, month, 1) + 1;\n  const dt = new Date(year, month - 1, day);\n  if (year < 100 && year >= 0) {\n    dt.setFullYear(year);\n  }\n  return dt;\n}\nexport { abs2greg, daysInGregMonth, greg2abs, isDate, isGregLeapYear };","map":{"version":3,"names":["lengths","monthLengths","slice","mod","x","y","Math","floor","quotient","yearFromFixed","abs","l0","n400","d1","n100","d2","n4","d3","n1","year","isGregLeapYear","daysInGregMonth","month","isDate","obj","Date","prototype","isPrototypeOf","toFixed","day","py","greg2abs","date","TypeError","getFullYear","getMonth","getDate","abs2greg","trunc","priorDays","correction","dt","setFullYear"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/greg.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-namespace, no-inner-declarations */\n/** @private */\nconst lengths: number[] = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n/** @private */\nconst monthLengths: number[][] = [lengths, lengths.slice()];\nmonthLengths[1][2] = 29;\n\n/**\n * @private\n */\nfunction mod(x: number, y: number): number {\n  return x - y * Math.floor(x / y);\n}\n\n/**\n * @private\n */\nfunction quotient(x: number, y: number): number {\n  return Math.floor(x / y);\n}\n\n/**\n * @private\n * @param abs - R.D. number of days\n */\nfunction yearFromFixed(abs: number): number {\n  const l0: number = abs - 1;\n  const n400: number = quotient(l0, 146097);\n  const d1: number = mod(l0, 146097);\n  const n100: number = quotient(d1, 36524);\n  const d2: number = mod(d1, 36524);\n  const n4: number = quotient(d2, 1461);\n  const d3: number = mod(d2, 1461);\n  const n1: number = quotient(d3, 365);\n  const year: number = 400 * n400 + 100 * n100 + 4 * n4 + n1;\n  return n100 !== 4 && n1 !== 4 ? year + 1 : year;\n}\n/*\nconst ABS_14SEP1752 = 639797;\nconst ABS_2SEP1752 = 639785;\n*/\n\n/*\n * Formerly in namespace, now top-level\n */\n\n/**\n * Returns true if the Gregorian year is a leap year\n * @param year Gregorian year\n */\nexport function isGregLeapYear(year: number): boolean {\n  return !(year % 4) && (!!(year % 100) || !(year % 400));\n}\n\n/**\n * Number of days in the Gregorian month for given year\n * @param month Gregorian month (1=January, 12=December)\n * @param year Gregorian year\n */\nexport function daysInGregMonth(month: number, year: number): number {\n  // 1 based months\n  return monthLengths[+isGregLeapYear(year)][month];\n}\n\n/**\n * Returns true if the object is a Javascript Date\n */\nexport function isDate(obj: unknown): boolean {\n  // eslint-disable-next-line no-prototype-builtins\n  return typeof obj === 'object' && Date.prototype.isPrototypeOf(obj as object);\n}\n\n/**\n * @private\n * @param year\n * @param month (1-12)\n * @param day (1-31)\n */\nfunction toFixed(year: number, month: number, day: number): number {\n  const py: number = year - 1;\n  return (\n    365 * py +\n    quotient(py, 4) -\n    quotient(py, 100) +\n    quotient(py, 400) +\n    quotient(367 * month - 362, 12) +\n    (month <= 2 ? 0 : isGregLeapYear(year) ? -1 : -2) +\n    day\n  );\n}\n\n/**\n * Converts Gregorian date to absolute R.D. (Rata Die) days\n * @param date Gregorian date\n */\nexport function greg2abs(date: Date): number {\n  if (!isDate(date)) {\n    throw new TypeError(`not a Date: ${date}`);\n  }\n  const abs = toFixed(date.getFullYear(), date.getMonth() + 1, date.getDate());\n  /*\n    if (abs < ABS_14SEP1752 && abs > ABS_2SEP1752) {\n      throw new RangeError(`Invalid Date: ${date}`);\n    }\n    */\n  return abs;\n}\n\n/**\n * Converts from Rata Die (R.D. number) to Gregorian date.\n * See the footnote on page 384 of ``Calendrical Calculations, Part II:\n * Three Historical Calendars'' by E. M. Reingold,  N. Dershowitz, and S. M.\n * Clamen, Software--Practice and Experience, Volume 23, Number 4\n * (April, 1993), pages 383-404 for an explanation.\n *\n * Note that this function returns the daytime portion of the date.\n * For example, the 15th of Cheshvan 5769 began at sundown on\n * 12 November 2008 and continues through 13 November 2008. This\n * function would return only the date 13 November 2008.\n * @param abs - R.D. number of days\n * @example\n * const abs = hebrew2abs(5769, months.CHESHVAN, 15);\n * const date = abs2greg(abs); // 13 November 2008\n * const year = date.getFullYear(); // 2008\n * const monthNum = date.getMonth() + 1; // 11\n * const day = date.getDate(); // 13\n */\nexport function abs2greg(abs: number): Date {\n  if (typeof abs !== 'number') {\n    throw new TypeError(`not a Number: ${abs}`);\n  }\n  abs = Math.trunc(abs);\n  /*\n    if (abs < ABS_14SEP1752 && abs > ABS_2SEP1752) {\n      throw new RangeError(`Invalid Date: ${abs}`);\n    }\n    */\n  const year: number = yearFromFixed(abs);\n  const priorDays: number = abs - toFixed(year, 1, 1);\n  const correction: number =\n    abs < toFixed(year, 3, 1) ? 0 : isGregLeapYear(year) ? 1 : 2;\n  const month: number = quotient(12 * (priorDays + correction) + 373, 367);\n  const day: number = abs - toFixed(year, month, 1) + 1;\n  const dt: Date = new Date(year, month - 1, day);\n  if (year < 100 && year >= 0) {\n    dt.setFullYear(year);\n  }\n  return dt;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
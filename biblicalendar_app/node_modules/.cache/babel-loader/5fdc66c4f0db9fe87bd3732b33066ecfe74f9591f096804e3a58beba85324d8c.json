{"ast":null,"code":"/*! @hebcal/hdate v0.13.5, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nimport { abs2hebrew, isLeapYear, monthsInYear, daysInMonth, hebrew2abs, getMonthName, daysInYear, longCheshvan, shortKislev, monthFromName, months } from './hdateBase.js';\nimport { isDate, greg2abs, abs2greg } from './greg.js';\nimport { gematriya, gematriyaStrToNum } from './gematriya.js';\nimport { Locale } from './locale.js';\n\n/*\n    Hebcal - A Jewish Calendar Generator\n    Copyright (c) 1994-2020 Danny Sadinoff\n    Portions copyright Eyal Schachter and Michael J. Radwin\n\n    https://github.com/hebcal/hebcal-es6\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License\n    as published by the Free Software Foundation; either version 2\n    of the License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nfunction mod(x, y) {\n  return x - y * Math.floor(x / y);\n}\nfunction isSimpleHebrewDate(obj) {\n  return obj.yy !== undefined;\n}\nconst UNITS_DAY = 'day';\nconst UNITS_WEEK = 'week';\nconst UNITS_MONTH = 'month';\nconst UNITS_YEAR = 'year';\n/**\n * A `HDate` represents a Hebrew calendar date.\n *\n * An instance of this class encapsulates a date in the Hebrew calendar system.\n * It consists of a year, month, and day, without any associated time or location data.\n * The Hebrew calendar is a lunisolar calendar, meaning it is based on both lunar and solar cycles.\n *\n * A Hebrew date internally stores three numbers:\n * - year: The Hebrew year (1-9999). Counted from the traditional Hebrew date of creation (3761 BCE in the Gregorian calendar)\n * - month: The Hebrew month (1-13). Month 1 is Nisan, month 7 is Tishrei. There are 12 months in a regular year and 13 months in a leap year.\n * - day: The day of the month (1-30)\n *\n * This class uses Rata Die to convert between the Hebrew and Gregorian calendars.\n *\n * To calculate times of day, use `Zmanim` class from `@hebcal/core`\n * @see {@link https://en.wikipedia.org/wiki/Rata_Die | Rata Die}\n * @see {@link https://hebcal.github.io/api/core/classes/Zmanim.html | Zmanim}\n */\nclass HDate {\n  /**\n   * Create a Hebrew date. There are 3 basic forms for the `HDate()` constructor.\n   *\n   * 1. No parameters - represents the current Hebrew date at time of instantiation\n   * 2. One parameter\n   *    * `Date` - represents the Hebrew date corresponding to the Gregorian date using\n   *       local time. Hours, minutes, seconds and milliseconds are ignored.\n   *    * `HDate` - clones a copy of the given Hebrew date\n   *    * `number` - Converts absolute R.D. days to Hebrew date.\n   *       R.D. 1 == the imaginary date January 1, 1 (Gregorian)\n   * 3. Three parameters: Hebrew day, Hebrew month, Hebrew year. Hebrew day should\n   *    be a number between 1-30, Hebrew month can be a number or string, and\n   *    Hebrew year is always a number.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd1 = new HDate();\n   * const hd2 = new HDate(new Date(2008, 10, 13));\n   * const hd3 = new HDate(15, 'Cheshvan', 5769);\n   * const hd4 = new HDate(15, months.CHESHVAN, 5769);\n   * const hd5 = new HDate(733359); // ==> 15 Cheshvan 5769\n   * const monthName = 'אייר';\n   * const hd6 = new HDate(5, monthName, 5773);\n   * @param [day] - Day of month (1-30) if a `number`.\n   *   If a `Date` is specified, represents the Hebrew date corresponding to the\n   *   Gregorian date using local time.\n   *   If an `HDate` is specified, clones a copy of the given Hebrew date.\n   * @param [month] - Hebrew month of year (1=NISAN, 7=TISHREI)\n   * @param [year] - Hebrew year\n   */\n  constructor(day, month, year) {\n    if (arguments.length === 2 || arguments.length > 3) {\n      throw new TypeError('HDate constructor requires 0, 1 or 3 arguments');\n    }\n    if (arguments.length === 3) {\n      // Hebrew day, Hebrew month, Hebrew year\n      this.dd = this.mm = 1;\n      const yy = typeof year === 'string' ? parseInt(year, 10) : year;\n      if (isNaN(yy)) {\n        throw new TypeError(`HDate called with bad year: ${year}`);\n      }\n      this.yy = yy;\n      setMonth(this, month); // will throw if we can't parse\n      const dd = typeof day === 'string' ? parseInt(day, 10) : day;\n      if (isNaN(dd)) {\n        throw new TypeError(`HDate called with bad day: ${day}`);\n      }\n      setDate(this, dd);\n    } else {\n      // 0 arguments\n      if (typeof day === 'undefined' || day === null) {\n        day = new Date();\n      }\n      // 1 argument\n      const abs0 = typeof day === 'number' && !isNaN(day) ? day : isDate(day) ? greg2abs(day) : isSimpleHebrewDate(day) ? day : null;\n      if (abs0 === null) {\n        throw new TypeError(`HDate called with bad arg: ${day}`);\n      }\n      const isNumber = typeof abs0 === 'number';\n      const d = isNumber ? abs2hebrew(abs0) : abs0;\n      this.yy = d.yy;\n      this.mm = d.mm;\n      this.dd = d.dd;\n      if (isNumber) {\n        this.rd = abs0;\n      }\n    }\n  }\n  /**\n   * Returns the Hebrew year of this Hebrew date\n   * @returns an integer >= 1\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getFullYear(); // 5769\n   */\n  getFullYear() {\n    return this.yy;\n  }\n  /**\n   * Returns `true` if this Hebrew date occurs during a Hebrew leap year\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.isLeapYear(); // false\n   */\n  isLeapYear() {\n    return isLeapYear(this.yy);\n  }\n  /**\n   * Returns the Hebrew month (1=NISAN, 7=TISHREI) of this Hebrew date\n   * @returns an integer 1-13\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getMonth(); // 8\n   */\n  getMonth() {\n    return this.mm;\n  }\n  /**\n   * The Tishrei-based month of this Hebrew date. 1 is Tishrei, 7 is Nisan, 13 is Elul in a leap year\n   * @returns an integer 1-13\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getTishreiMonth(); // 2\n   */\n  getTishreiMonth() {\n    const nummonths = monthsInYear(this.getFullYear());\n    return (this.getMonth() + nummonths - 6) % nummonths || nummonths;\n  }\n  /**\n   * Number of days in the month of this Hebrew date (29 or 30)\n   * @returns an integer 29-30\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.daysInMonth(); // 29\n   */\n  daysInMonth() {\n    return daysInMonth(this.getMonth(), this.getFullYear());\n  }\n  /**\n   * Gets the day within the month (1-30)\n   * @returns an integer 1-30\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getDate(); // 15\n   */\n  getDate() {\n    return this.dd;\n  }\n  /**\n   * Returns the day of the week for this Hebrew date,\n   * where 0 represents Sunday, 1 represents Monday, 6 represents Saturday.\n   *\n   * For the day of the month, see `getDate()`\n   * @returns an integer 0-6\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getDate(); // 4\n   */\n  getDay() {\n    return mod(this.abs(), 7);\n  }\n  /**\n   * Converts this Hebrew date to the corresponding Gregorian date.\n   *\n   * The returned `Date` object will be in the local (i.e. host system) time zone.\n   * Hours, minutes, seconds and milliseconds will all be zero.\n   *\n   * Note that this function returns the daytime portion of the date.\n   * For example, the 15th of Cheshvan 5769 began at sundown on\n   * 12 November 2008 and continues through 13 November 2008. This\n   * function would return only the date 13 November 2008.\n   * @example\n   * const hd = new HDate(15, 'Cheshvan', 5769);\n   * const date = hd.greg(); // 13 November 2008\n   * const year = date.getFullYear(); // 2008\n   * const monthNum = date.getMonth() + 1; // 11\n   * const day = date.getDate(); // 13\n   */\n  greg() {\n    return abs2greg(this.abs());\n  }\n  /**\n   * Converts from Hebrew date representation to R.D. (Rata Die) fixed days.\n   * R.D. 1 is the imaginary date Monday, January 1, 1 (Gregorian).\n   * Note also that R.D. = Julian Date − 1,721,424.5\n   * @see {@link https://en.wikipedia.org/wiki/Rata_Die | Rata Die}\n   * @example\n   * const hd = new HDate(15, 'Cheshvan', 5769);\n   * hd.abs(); // 733359\n   */\n  abs() {\n    if (typeof this.rd !== 'number') {\n      this.rd = hebrew2abs(this.yy, this.mm, this.dd);\n    }\n    return this.rd;\n  }\n  /**\n   * Converts Hebrew date to R.D. (Rata Die) fixed days.\n   * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian\n   * Calendar.\n   * @param year Hebrew year\n   * @param month Hebrew month (1=NISAN, 7=TISHREI)\n   * @param day Hebrew date (1-30)\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.hebrew2abs(5769, months.CHESHVAN, 15); // 733359\n   */\n  static hebrew2abs(year, month, day) {\n    return hebrew2abs(year, month, day);\n  }\n  /**\n   * Returns a transliterated Hebrew month name, e.g. `'Elul'` or `'Cheshvan'`.\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getMonthName(); // 'Cheshvan'\n   */\n  getMonthName() {\n    return getMonthName(this.getMonth(), this.getFullYear());\n  }\n  /**\n   * Renders this Hebrew date as a translated or transliterated string,\n   * including ordinal e.g. `'15th of Cheshvan, 5769'`.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd = new HDate(15, months.CHESHVAN, 5769);\n   * console.log(hd.render('en')); // '15th of Cheshvan, 5769'\n   * console.log(hd.render('he')); // '15 חֶשְׁוָן, 5769'\n   * console.log(hd.render('en', false)); // '15th of Cheshvan'\n   * console.log(hd.render('he', false)); // '15 חֶשְׁוָן'\n   * @param [locale] Optional locale name (defaults to active locale).\n   * @param [showYear=true] Display year (defaults to true).\n   * @see {@link Locale}\n   */\n  render(locale, showYear = true) {\n    const locale0 = locale || Locale.getLocaleName();\n    const day = this.getDate();\n    const monthName0 = Locale.gettext(this.getMonthName(), locale0);\n    const monthName = monthName0.replace(/'/g, '’');\n    const nth = Locale.ordinal(day, locale0);\n    const dayOf = getDayOfTranslation(locale0);\n    const dateStr = `${nth}${dayOf} ${monthName}`;\n    if (showYear) {\n      const fullYear = this.getFullYear();\n      return `${dateStr}, ${fullYear}`;\n    } else {\n      return dateStr;\n    }\n  }\n  /**\n   * Renders this Hebrew date in Hebrew gematriya, regardless of locale.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * const hd = new HDate(15, months.CHESHVAN, 5769);\n   * hd.renderGematriya(); // 'ט״ו חֶשְׁוָן תשס״ט'\n   * hd.renderGematriya(true); // 'ט״ו חשון תשס״ט'\n   */\n  renderGematriya(suppressNikud = false) {\n    const d = this.getDate();\n    const locale = suppressNikud ? 'he-x-NoNikud' : 'he';\n    const m = Locale.gettext(this.getMonthName(), locale);\n    const y = this.getFullYear();\n    return gematriya(d) + ' ' + m + ' ' + gematriya(y);\n  }\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **before** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).before(6).greg() // Sat Feb 15 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  before(dayOfWeek) {\n    return onOrBefore(dayOfWeek, this, -1);\n  }\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **on or before** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).onOrBefore(6).greg() // Sat Feb 15 2014\n   * new HDate(new Date('Saturday February 22, 2014')).onOrBefore(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Sunday February 23, 2014')).onOrBefore(6).greg() // Sat Feb 22 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  onOrBefore(dayOfWeek) {\n    return onOrBefore(dayOfWeek, this, 0);\n  }\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **nearest** to this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).nearest(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Tuesday February 18, 2014')).nearest(6).greg() // Sat Feb 15 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  nearest(dayOfWeek) {\n    return onOrBefore(dayOfWeek, this, 3);\n  }\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **on or after** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).onOrAfter(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Saturday February 22, 2014')).onOrAfter(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Sunday February 23, 2014')).onOrAfter(6).greg() // Sat Mar 01 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  onOrAfter(dayOfWeek) {\n    return onOrBefore(dayOfWeek, this, 6);\n  }\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **after** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).after(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Saturday February 22, 2014')).after(6).greg() // Sat Mar 01 2014\n   * new HDate(new Date('Sunday February 23, 2014')).after(6).greg() // Sat Mar 01 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  after(dayOfWeek) {\n    return onOrBefore(dayOfWeek, this, 7);\n  }\n  /**\n   * Returns the next Hebrew date\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.next(); // '16 Cheshvan 5769'\n   */\n  next() {\n    return new HDate(this.abs() + 1);\n  }\n  /**\n   * Returns the previous Hebrew date\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.prev(); // '14 Cheshvan 5769'\n   */\n  prev() {\n    return new HDate(this.abs() - 1);\n  }\n  /**\n   * Returns a cloned `HDate` object with a specified amount of time added\n   *\n   * Units are case insensitive, and support plural and short forms.\n   * Note, short forms are case sensitive.\n   *\n   * | Unit | Shorthand | Description\n   * | --- | --- | --- |\n   * | `day` | `d` | days |\n   * | `week` | `w` | weeks |\n   * | `month` | `M` | months |\n   * | `year` | `y` | years |\n   */\n  add(amount, units = 'd') {\n    amount = typeof amount === 'string' ? parseInt(amount, 10) : amount;\n    if (!amount) {\n      return new HDate(this);\n    }\n    units = standardizeUnits(units);\n    if (units === UNITS_DAY) {\n      return new HDate(this.abs() + amount);\n    } else if (units === UNITS_WEEK) {\n      return new HDate(this.abs() + 7 * amount);\n    } else if (units === UNITS_YEAR) {\n      return new HDate(this.getDate(), this.getMonth(), this.getFullYear() + amount);\n    } else {\n      // units === UNITS_MONTH\n      let hd = new HDate(this);\n      const sign = amount > 0 ? 1 : -1;\n      amount = Math.abs(amount);\n      for (let i = 0; i < amount; i++) {\n        hd = new HDate(hd.abs() + sign * hd.daysInMonth());\n      }\n      return hd;\n    }\n  }\n  /**\n   * Returns a cloned `HDate` object with a specified amount of time subracted\n   *\n   * Units are case insensitive, and support plural and short forms.\n   * Note, short forms are case sensitive.\n   *\n   * | Unit | Shorthand | Description\n   * | --- | --- | --- |\n   * | `day` | `d` | days |\n   * | `week` | `w` | weeks |\n   * | `month` | `M` | months |\n   * | `year` | `y` | years |\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd1 = new HDate(15, months.CHESHVAN, 5769);\n   * const hd2 = hd1.add(1, 'weeks'); // 7 Kislev 5769\n   * const hd3 = hd1.add(-3, 'M'); // 30 Av 5768\n   */\n  subtract(amount, units = 'd') {\n    return this.add(amount * -1, units);\n  }\n  /**\n   * Returns the difference in days between the two given HDates.\n   *\n   * The result is positive if `this` date is comes chronologically\n   * after the `other` date, and negative\n   * if the order of the two dates is reversed.\n   *\n   * The result is zero if the two dates are identical.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd1 = new HDate(25, months.KISLEV, 5770);\n   * const hd2 = new HDate(15, months.CHESHVAN, 5769);\n   * const days = hd1.deltaDays(hd2); // 394\n   * @param other Hebrew date to compare\n   */\n  deltaDays(other) {\n    return this.abs() - other.abs();\n  }\n  /**\n   * Compares this Hebrew date to another date, returning `true` if the dates match.\n   * @param other Hebrew date to compare\n   * @example\n   * const hd1 = new HDate(new Date(2008, 10, 13));\n   * const hd2 = new HDate(15, 'Cheshvan', 5769);\n   * hd1.isSameDate(hd2); // true\n   */\n  isSameDate(other) {\n    return this.yy === other.yy && this.mm === other.mm && this.dd === other.dd;\n  }\n  /**\n   * Returns a string representation of this Hebrew date using English transliterations\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.toString(); // '15 Cheshvan 5769'\n   */\n  toString() {\n    const day = this.getDate();\n    const fullYear = this.getFullYear();\n    const monthName = this.getMonthName();\n    return `${day} ${monthName} ${fullYear}`;\n  }\n  /**\n   * Returns true if Hebrew year is a leap year\n   * @param year Hebrew year\n   * @example\n   * HDate.isLeapYear(5783); // false\n   * HDate.isLeapYear(5784); // true\n   */\n  static isLeapYear(year) {\n    return isLeapYear(year);\n  }\n  /**\n   * Number of months in this Hebrew year (either 12 or 13 depending on leap year)\n   * @param year Hebrew year\n   * @example\n   * HDate.monthsInYear(5783); // 12\n   * HDate.monthsInYear(5784); // 13\n   */\n  static monthsInYear(year) {\n    return monthsInYear(year);\n  }\n  /**\n   * Number of days in Hebrew month in a given year (29 or 30)\n   * @param month Hebrew month (e.g. months.TISHREI)\n   * @param year Hebrew year\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.daysInMonth(months.CHESHVAN, 5769); // 29\n   */\n  static daysInMonth(month, year) {\n    return daysInMonth(month, year);\n  }\n  /**\n   * Returns a transliterated string name of Hebrew month in year,\n   * for example 'Elul' or 'Cheshvan'.\n   * @param month Hebrew month (e.g. months.TISHREI)\n   * @param year Hebrew year\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.getMonthName(months.CHESHVAN, 5769); // 'Cheshvan'\n   */\n  static getMonthName(month, year) {\n    return getMonthName(month, year);\n  }\n  /**\n   * Returns the Hebrew month number (NISAN=1, TISHREI=7)\n   * @param month A number, or Hebrew month name string\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.monthNum(months.CHESHVAN); // 8\n   * HDate.monthNum('Cheshvan'); // 8\n   * HDate.monthNum('חשון'); // 8\n   */\n  static monthNum(month) {\n    if (typeof month === 'number') {\n      if (isNaN(month) || month > 14) {\n        throw new RangeError(`bad monthNum: ${month}`);\n      }\n      return month;\n    }\n    return month.charCodeAt(0) >= 48 && month.charCodeAt(0) <= 57 /* number */ ? parseInt(month, 10) : HDate.monthFromName(month);\n  }\n  /**\n   * Number of days in the Hebrew year.\n   * Regular years can have 353, 354, or 355 days.\n   * Leap years can have 383, 384, or 385 days.\n   * @param year Hebrew year\n   * @example\n   * HDate.daysInYear(5783); // 355\n   * HDate.daysInYear(5784); // 383\n   */\n  static daysInYear(year) {\n    return daysInYear(year);\n  }\n  /**\n   * true if Cheshvan is long in Hebrew year\n   * @param year Hebrew year\n   * @example\n   * HDate.longCheshvan(5783); // true\n   * HDate.longCheshvan(5784); // false\n   */\n  static longCheshvan(year) {\n    return longCheshvan(year);\n  }\n  /**\n   * true if Kislev is short in Hebrew year\n   * @param year Hebrew year\n   * @example\n   * HDate.shortKislev(5783); // false\n   * HDate.shortKislev(5784); // true\n   */\n  static shortKislev(year) {\n    return shortKislev(year);\n  }\n  /**\n   * Converts Hebrew month string name to numeric\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.monthFromName(months.CHESHVAN); // 8\n   * HDate.monthFromName('Cheshvan'); // 8\n   * HDate.monthFromName('חשון'); // 8\n   */\n  static monthFromName(monthName) {\n    if (typeof monthName === 'number') {\n      if (isNaN(monthName) || monthName < 1 || monthName > 14) {\n        throw new RangeError(`bad monthName: ${monthName}`);\n      }\n      return monthName;\n    }\n    const name = Locale.hebrewStripNikkud(monthName);\n    return monthFromName(name);\n  }\n  /**\n   * Convenience function for determining the R.D. date\n   * near a specified R.D. date, corresponding to the specified day of week.\n   *\n   * Note: Applying this function to d+6 gives us the `dayOfWeek` on or after an\n   * absolute day d. Similarly, applying it to d+3 gives the `dayOfWeek` nearest to\n   * absolute date d, applying it to d-1 gives the `dayOfWeek` previous to absolute\n   * date d, and applying it to d+7 gives the `dayOfWeek` following absolute date d.\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  static dayOnOrBefore(dayOfWeek, absdate) {\n    return absdate - (absdate - dayOfWeek) % 7;\n  }\n  /**\n   * Tests if the object is an instance of `HDate`\n   * @example\n   * HDate.isHDate(new HDate()); // true\n   * HDate.isHDate(new Date()); // false\n   * HDate.isHDate(null); // false\n   * HDate.isHDate(12345); // false\n   * HDate.isHDate('15 Cheshvan 5769'); // false\n   */\n  static isHDate(obj) {\n    return obj !== null && typeof obj === 'object' && typeof obj.yy === 'number' && typeof obj.mm === 'number' && typeof obj.dd === 'number' && typeof obj.greg === 'function' && typeof obj.abs === 'function';\n  }\n  /**\n   * Construct a new instance of `HDate` from a Gematriya-formatted string\n   * @example\n   * HDate.fromGematriyaString('כ״ז בְּתַמּוּז תשפ״ג') // 27 Tamuz 5783\n   * HDate.fromGematriyaString('כ׳ סיון תש״ד') // 20 Sivan 5704\n   * HDate.fromGematriyaString('ה׳ אִיָיר תש״ח') // 5 Iyyar 5708\n   */\n  static fromGematriyaString(str, currentThousands = 5000) {\n    const parts = str.split(' ').filter(x => x.length !== 0);\n    const numParts = parts.length;\n    if (numParts !== 3 && numParts !== 4) {\n      throw new RangeError(`cannot parse gematriya str: \"${str}\"`);\n    }\n    const day = gematriyaStrToNum(parts[0]);\n    const monthStr = numParts === 3 ? parts[1] : parts[1] + ' ' + parts[2];\n    const month = HDate.monthFromName(monthStr);\n    const yearStr = numParts === 3 ? parts[2] : parts[3];\n    let year = gematriyaStrToNum(yearStr);\n    if (year < 1000) {\n      year += currentThousands;\n    }\n    return new HDate(day, month, year);\n  }\n}\nfunction standardizeUnits(units) {\n  switch (units) {\n    case 'd':\n      return UNITS_DAY;\n    case 'w':\n      return UNITS_WEEK;\n    case 'M':\n      return UNITS_MONTH;\n    case 'y':\n      return UNITS_YEAR;\n  }\n  const str = String(units || '').toLowerCase().replace(/s$/, '');\n  switch (str) {\n    case UNITS_DAY:\n    case UNITS_WEEK:\n    case UNITS_MONTH:\n    case UNITS_YEAR:\n      return str;\n  }\n  throw new TypeError(`Invalid units '${units}'`);\n}\nfunction getDayOfTranslation(locale) {\n  switch (locale) {\n    case 'en':\n    case 's':\n    case 'a':\n    case 'ashkenazi':\n      return ' of';\n  }\n  const ofStr = Locale.lookupTranslation('of', locale);\n  if (ofStr) {\n    return ' ' + ofStr;\n  }\n  if (locale.startsWith('ashkenazi')) {\n    return ' of';\n  }\n  return '';\n}\n/**\n * Sets the day of the month of the date. Returns the object it was called upon\n * @private\n * @param month A number, or Hebrew month name string\n */\nfunction setMonth(hd, month) {\n  hd.mm = HDate.monthNum(month);\n  fix(hd);\n  return hd;\n}\nfunction setDate(hd, date) {\n  hd.dd = date;\n  fix(hd);\n  return hd;\n}\nfunction fix(hd) {\n  fixMonth(hd);\n  fixDate(hd);\n}\nfunction fixDate(hd) {\n  if (hd.dd < 1) {\n    if (hd.mm === months.TISHREI) {\n      hd.yy -= 1;\n    }\n    hd.dd += daysInMonth(hd.mm, hd.yy);\n    hd.mm -= 1;\n    fix(hd);\n  }\n  if (hd.dd > daysInMonth(hd.mm, hd.yy)) {\n    if (hd.mm === months.ELUL) {\n      hd.yy += 1;\n    }\n    hd.dd -= daysInMonth(hd.mm, hd.yy);\n    if (hd.mm === monthsInYear(hd.yy)) {\n      hd.mm = 1; // rollover to NISAN\n    } else {\n      hd.mm += 1;\n    }\n    fix(hd);\n  }\n  fixMonth(hd);\n}\nfunction fixMonth(hd) {\n  if (hd.mm === months.ADAR_II && !hd.isLeapYear()) {\n    hd.mm -= 1; // to Adar I\n    fix(hd);\n  } else if (hd.mm < 1) {\n    hd.mm += monthsInYear(hd.yy);\n    hd.yy -= 1;\n    fix(hd);\n  } else if (hd.mm > monthsInYear(hd.yy)) {\n    hd.mm -= monthsInYear(hd.yy);\n    hd.yy += 1;\n    fix(hd);\n  }\n  delete hd.rd;\n}\nfunction onOrBefore(day, t, offset) {\n  return new HDate(HDate.dayOnOrBefore(day, t.abs() + offset));\n}\nexport { HDate };","map":{"version":3,"names":["mod","x","y","Math","floor","isSimpleHebrewDate","obj","yy","undefined","UNITS_DAY","UNITS_WEEK","UNITS_MONTH","UNITS_YEAR","HDate","constructor","day","month","year","arguments","length","TypeError","dd","mm","parseInt","isNaN","setMonth","setDate","Date","abs0","isDate","greg2abs","isNumber","d","abs2hebrew","rd","getFullYear","isLeapYear","getMonth","getTishreiMonth","nummonths","monthsInYear","daysInMonth","getDate","getDay","abs","greg","abs2greg","hebrew2abs","getMonthName","render","locale","showYear","locale0","Locale","getLocaleName","monthName0","gettext","monthName","replace","nth","ordinal","dayOf","getDayOfTranslation","dateStr","fullYear","renderGematriya","suppressNikud","m","gematriya","before","dayOfWeek","onOrBefore","nearest","onOrAfter","after","next","prev","add","amount","units","standardizeUnits","hd","sign","i","subtract","deltaDays","other","isSameDate","toString","monthNum","RangeError","charCodeAt","monthFromName","daysInYear","longCheshvan","shortKislev","name","hebrewStripNikkud","dayOnOrBefore","absdate","isHDate","fromGematriyaString","str","currentThousands","parts","split","filter","numParts","gematriyaStrToNum","monthStr","yearStr","String","toLowerCase","ofStr","lookupTranslation","startsWith","fix","date","fixMonth","fixDate","months","TISHREI","ELUL","ADAR_II","t","offset"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/hdate.ts"],"sourcesContent":["/*\n    Hebcal - A Jewish Calendar Generator\n    Copyright (c) 1994-2020 Danny Sadinoff\n    Portions copyright Eyal Schachter and Michael J. Radwin\n\n    https://github.com/hebcal/hebcal-es6\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License\n    as published by the Free Software Foundation; either version 2\n    of the License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nimport {\n  MonthName,\n  SimpleHebrewDate,\n  abs2hebrew,\n  daysInMonth,\n  daysInYear,\n  getMonthName,\n  hebrew2abs,\n  isLeapYear,\n  longCheshvan,\n  monthFromName,\n  months,\n  monthsInYear,\n  shortKislev,\n} from './hdateBase';\nimport {abs2greg, greg2abs, isDate} from './greg';\nimport {gematriya, gematriyaStrToNum} from './gematriya';\nimport {Locale} from './locale';\n\nfunction mod(x: number, y: number): number {\n  return x - y * Math.floor(x / y);\n}\n\nfunction isSimpleHebrewDate(obj: unknown): obj is SimpleHebrewDate {\n  return (obj as SimpleHebrewDate).yy !== undefined;\n}\n\nconst UNITS_DAY = 'day';\nconst UNITS_WEEK = 'week';\nconst UNITS_MONTH = 'month';\nconst UNITS_YEAR = 'year';\n\ntype ToFlexibleUnit<U extends TimeUnit> =\n  | U\n  | `${U}s`\n  | Uppercase<U>\n  | Uppercase<`${U}s`>\n  | Capitalize<U>\n  | Capitalize<`${U}s`>\n  | (U extends 'month' ? 'M' : FirstChar<U>);\n\ntype FirstChar<S extends string> = S extends `${infer FirstLetter}${string}`\n  ? FirstLetter\n  : never;\ntype Capitalize<S extends string> =\n  S extends `${infer FirstLetter}${infer Rest}`\n    ? `${Uppercase<FirstLetter>}${Rest}`\n    : never;\n\ntype TimeUnit =\n  | typeof UNITS_DAY\n  | typeof UNITS_WEEK\n  | typeof UNITS_MONTH\n  | typeof UNITS_YEAR;\n\n/** Units that can be passed to `add()` and similar methods. */\nexport type FlexibleTimeUnit = ToFlexibleUnit<TimeUnit>;\n\n/**\n * A `HDate` represents a Hebrew calendar date.\n *\n * An instance of this class encapsulates a date in the Hebrew calendar system.\n * It consists of a year, month, and day, without any associated time or location data.\n * The Hebrew calendar is a lunisolar calendar, meaning it is based on both lunar and solar cycles.\n *\n * A Hebrew date internally stores three numbers:\n * - year: The Hebrew year (1-9999). Counted from the traditional Hebrew date of creation (3761 BCE in the Gregorian calendar)\n * - month: The Hebrew month (1-13). Month 1 is Nisan, month 7 is Tishrei. There are 12 months in a regular year and 13 months in a leap year.\n * - day: The day of the month (1-30)\n *\n * This class uses Rata Die to convert between the Hebrew and Gregorian calendars.\n *\n * To calculate times of day, use `Zmanim` class from `@hebcal/core`\n * @see {@link https://en.wikipedia.org/wiki/Rata_Die | Rata Die}\n * @see {@link https://hebcal.github.io/api/core/classes/Zmanim.html | Zmanim}\n */\nexport class HDate {\n  /** Hebrew year, 1-9999 */\n  yy: number;\n  /** Hebrew month of year (1=NISAN, 7=TISHREI) */\n  mm: number;\n  /** Hebrew day within the month (1-30) */\n  dd: number;\n  /** absolute Rata Die (R.D.) days */\n  rd?: number;\n\n  /**\n   * Create a Hebrew date. There are 3 basic forms for the `HDate()` constructor.\n   *\n   * 1. No parameters - represents the current Hebrew date at time of instantiation\n   * 2. One parameter\n   *    * `Date` - represents the Hebrew date corresponding to the Gregorian date using\n   *       local time. Hours, minutes, seconds and milliseconds are ignored.\n   *    * `HDate` - clones a copy of the given Hebrew date\n   *    * `number` - Converts absolute R.D. days to Hebrew date.\n   *       R.D. 1 == the imaginary date January 1, 1 (Gregorian)\n   * 3. Three parameters: Hebrew day, Hebrew month, Hebrew year. Hebrew day should\n   *    be a number between 1-30, Hebrew month can be a number or string, and\n   *    Hebrew year is always a number.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd1 = new HDate();\n   * const hd2 = new HDate(new Date(2008, 10, 13));\n   * const hd3 = new HDate(15, 'Cheshvan', 5769);\n   * const hd4 = new HDate(15, months.CHESHVAN, 5769);\n   * const hd5 = new HDate(733359); // ==> 15 Cheshvan 5769\n   * const monthName = 'אייר';\n   * const hd6 = new HDate(5, monthName, 5773);\n   * @param [day] - Day of month (1-30) if a `number`.\n   *   If a `Date` is specified, represents the Hebrew date corresponding to the\n   *   Gregorian date using local time.\n   *   If an `HDate` is specified, clones a copy of the given Hebrew date.\n   * @param [month] - Hebrew month of year (1=NISAN, 7=TISHREI)\n   * @param [year] - Hebrew year\n   */\n  constructor(\n    day?: number | Date | HDate | SimpleHebrewDate | undefined,\n    month?: number | string,\n    year?: number\n  ) {\n    if (arguments.length === 2 || arguments.length > 3) {\n      throw new TypeError('HDate constructor requires 0, 1 or 3 arguments');\n    }\n    if (arguments.length === 3) {\n      // Hebrew day, Hebrew month, Hebrew year\n      this.dd = this.mm = 1;\n      const yy: number =\n        typeof year === 'string' ? parseInt(year, 10) : (year as number);\n      if (isNaN(yy)) {\n        throw new TypeError(`HDate called with bad year: ${year}`);\n      }\n      this.yy = yy;\n      setMonth(this, month as string | number); // will throw if we can't parse\n      const dd: number =\n        typeof day === 'string' ? parseInt(day, 10) : (day as number);\n      if (isNaN(dd)) {\n        throw new TypeError(`HDate called with bad day: ${day}`);\n      }\n      setDate(this, dd);\n    } else {\n      // 0 arguments\n      if (typeof day === 'undefined' || day === null) {\n        day = new Date();\n      }\n      // 1 argument\n      const abs0 =\n        typeof day === 'number' && !isNaN(day)\n          ? day\n          : isDate(day)\n            ? greg2abs(day as Date)\n            : isSimpleHebrewDate(day)\n              ? day\n              : null;\n      if (abs0 === null) {\n        throw new TypeError(`HDate called with bad arg: ${day}`);\n      }\n      const isNumber = typeof abs0 === 'number';\n      const d: SimpleHebrewDate = isNumber ? abs2hebrew(abs0) : abs0;\n      this.yy = d.yy;\n      this.mm = d.mm;\n      this.dd = d.dd;\n      if (isNumber) {\n        this.rd = abs0;\n      }\n    }\n  }\n\n  /**\n   * Returns the Hebrew year of this Hebrew date\n   * @returns an integer >= 1\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getFullYear(); // 5769\n   */\n  getFullYear(): number {\n    return this.yy;\n  }\n\n  /**\n   * Returns `true` if this Hebrew date occurs during a Hebrew leap year\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.isLeapYear(); // false\n   */\n  isLeapYear(): boolean {\n    return isLeapYear(this.yy);\n  }\n\n  /**\n   * Returns the Hebrew month (1=NISAN, 7=TISHREI) of this Hebrew date\n   * @returns an integer 1-13\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getMonth(); // 8\n   */\n  getMonth(): number {\n    return this.mm;\n  }\n\n  /**\n   * The Tishrei-based month of this Hebrew date. 1 is Tishrei, 7 is Nisan, 13 is Elul in a leap year\n   * @returns an integer 1-13\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getTishreiMonth(); // 2\n   */\n  getTishreiMonth(): number {\n    const nummonths = monthsInYear(this.getFullYear());\n    return (this.getMonth() + nummonths - 6) % nummonths || nummonths;\n  }\n\n  /**\n   * Number of days in the month of this Hebrew date (29 or 30)\n   * @returns an integer 29-30\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.daysInMonth(); // 29\n   */\n  daysInMonth(): number {\n    return daysInMonth(this.getMonth(), this.getFullYear());\n  }\n\n  /**\n   * Gets the day within the month (1-30)\n   * @returns an integer 1-30\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getDate(); // 15\n   */\n  getDate(): number {\n    return this.dd;\n  }\n\n  /**\n   * Returns the day of the week for this Hebrew date,\n   * where 0 represents Sunday, 1 represents Monday, 6 represents Saturday.\n   *\n   * For the day of the month, see `getDate()`\n   * @returns an integer 0-6\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getDate(); // 4\n   */\n  getDay(): number {\n    return mod(this.abs(), 7);\n  }\n\n  /**\n   * Converts this Hebrew date to the corresponding Gregorian date.\n   *\n   * The returned `Date` object will be in the local (i.e. host system) time zone.\n   * Hours, minutes, seconds and milliseconds will all be zero.\n   *\n   * Note that this function returns the daytime portion of the date.\n   * For example, the 15th of Cheshvan 5769 began at sundown on\n   * 12 November 2008 and continues through 13 November 2008. This\n   * function would return only the date 13 November 2008.\n   * @example\n   * const hd = new HDate(15, 'Cheshvan', 5769);\n   * const date = hd.greg(); // 13 November 2008\n   * const year = date.getFullYear(); // 2008\n   * const monthNum = date.getMonth() + 1; // 11\n   * const day = date.getDate(); // 13\n   */\n  greg(): Date {\n    return abs2greg(this.abs());\n  }\n\n  /**\n   * Converts from Hebrew date representation to R.D. (Rata Die) fixed days.\n   * R.D. 1 is the imaginary date Monday, January 1, 1 (Gregorian).\n   * Note also that R.D. = Julian Date − 1,721,424.5\n   * @see {@link https://en.wikipedia.org/wiki/Rata_Die | Rata Die}\n   * @example\n   * const hd = new HDate(15, 'Cheshvan', 5769);\n   * hd.abs(); // 733359\n   */\n  abs(): number {\n    if (typeof this.rd !== 'number') {\n      this.rd = hebrew2abs(this.yy, this.mm, this.dd);\n    }\n    return this.rd;\n  }\n\n  /**\n   * Converts Hebrew date to R.D. (Rata Die) fixed days.\n   * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian\n   * Calendar.\n   * @param year Hebrew year\n   * @param month Hebrew month (1=NISAN, 7=TISHREI)\n   * @param day Hebrew date (1-30)\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.hebrew2abs(5769, months.CHESHVAN, 15); // 733359\n   */\n  static hebrew2abs(year: number, month: number, day: number): number {\n    return hebrew2abs(year, month, day);\n  }\n\n  /**\n   * Returns a transliterated Hebrew month name, e.g. `'Elul'` or `'Cheshvan'`.\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getMonthName(); // 'Cheshvan'\n   */\n  getMonthName(): MonthName {\n    return getMonthName(this.getMonth(), this.getFullYear());\n  }\n\n  /**\n   * Renders this Hebrew date as a translated or transliterated string,\n   * including ordinal e.g. `'15th of Cheshvan, 5769'`.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd = new HDate(15, months.CHESHVAN, 5769);\n   * console.log(hd.render('en')); // '15th of Cheshvan, 5769'\n   * console.log(hd.render('he')); // '15 חֶשְׁוָן, 5769'\n   * console.log(hd.render('en', false)); // '15th of Cheshvan'\n   * console.log(hd.render('he', false)); // '15 חֶשְׁוָן'\n   * @param [locale] Optional locale name (defaults to active locale).\n   * @param [showYear=true] Display year (defaults to true).\n   * @see {@link Locale}\n   */\n  render(locale?: string, showYear = true): string {\n    const locale0 = locale || Locale.getLocaleName();\n    const day = this.getDate();\n    const monthName0 = Locale.gettext(this.getMonthName(), locale0);\n    const monthName = monthName0.replace(/'/g, '’');\n    const nth = Locale.ordinal(day, locale0);\n    const dayOf = getDayOfTranslation(locale0);\n    const dateStr = `${nth}${dayOf} ${monthName}`;\n    if (showYear) {\n      const fullYear = this.getFullYear();\n      return `${dateStr}, ${fullYear}`;\n    } else {\n      return dateStr;\n    }\n  }\n\n  /**\n   * Renders this Hebrew date in Hebrew gematriya, regardless of locale.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * const hd = new HDate(15, months.CHESHVAN, 5769);\n   * hd.renderGematriya(); // 'ט״ו חֶשְׁוָן תשס״ט'\n   * hd.renderGematriya(true); // 'ט״ו חשון תשס״ט'\n   */\n  renderGematriya(suppressNikud = false): string {\n    const d = this.getDate();\n    const locale = suppressNikud ? 'he-x-NoNikud' : 'he';\n    const m = Locale.gettext(this.getMonthName(), locale);\n    const y = this.getFullYear();\n    return gematriya(d) + ' ' + m + ' ' + gematriya(y);\n  }\n\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **before** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).before(6).greg() // Sat Feb 15 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  before(dayOfWeek: number): HDate {\n    return onOrBefore(dayOfWeek, this, -1);\n  }\n\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **on or before** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).onOrBefore(6).greg() // Sat Feb 15 2014\n   * new HDate(new Date('Saturday February 22, 2014')).onOrBefore(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Sunday February 23, 2014')).onOrBefore(6).greg() // Sat Feb 22 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  onOrBefore(dayOfWeek: number): HDate {\n    return onOrBefore(dayOfWeek, this, 0);\n  }\n\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **nearest** to this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).nearest(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Tuesday February 18, 2014')).nearest(6).greg() // Sat Feb 15 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  nearest(dayOfWeek: number): HDate {\n    return onOrBefore(dayOfWeek, this, 3);\n  }\n\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **on or after** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).onOrAfter(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Saturday February 22, 2014')).onOrAfter(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Sunday February 23, 2014')).onOrAfter(6).greg() // Sat Mar 01 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  onOrAfter(dayOfWeek: number): HDate {\n    return onOrBefore(dayOfWeek, this, 6);\n  }\n\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **after** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).after(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Saturday February 22, 2014')).after(6).greg() // Sat Mar 01 2014\n   * new HDate(new Date('Sunday February 23, 2014')).after(6).greg() // Sat Mar 01 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  after(dayOfWeek: number): HDate {\n    return onOrBefore(dayOfWeek, this, 7);\n  }\n\n  /**\n   * Returns the next Hebrew date\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.next(); // '16 Cheshvan 5769'\n   */\n  next(): HDate {\n    return new HDate(this.abs() + 1);\n  }\n\n  /**\n   * Returns the previous Hebrew date\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.prev(); // '14 Cheshvan 5769'\n   */\n  prev(): HDate {\n    return new HDate(this.abs() - 1);\n  }\n\n  /**\n   * Returns a cloned `HDate` object with a specified amount of time added\n   *\n   * Units are case insensitive, and support plural and short forms.\n   * Note, short forms are case sensitive.\n   *\n   * | Unit | Shorthand | Description\n   * | --- | --- | --- |\n   * | `day` | `d` | days |\n   * | `week` | `w` | weeks |\n   * | `month` | `M` | months |\n   * | `year` | `y` | years |\n   */\n  add(amount: number | string, units: FlexibleTimeUnit = 'd'): HDate {\n    amount =\n      typeof amount === 'string' ? parseInt(amount, 10) : (amount as number);\n    if (!amount) {\n      return new HDate(this);\n    }\n    units = standardizeUnits(units);\n    if (units === UNITS_DAY) {\n      return new HDate(this.abs() + amount);\n    } else if (units === UNITS_WEEK) {\n      return new HDate(this.abs() + 7 * amount);\n    } else if (units === UNITS_YEAR) {\n      return new HDate(\n        this.getDate(),\n        this.getMonth(),\n        this.getFullYear() + amount\n      );\n    } else {\n      // units === UNITS_MONTH\n      let hd = new HDate(this);\n      const sign = amount > 0 ? 1 : -1;\n      amount = Math.abs(amount);\n      for (let i = 0; i < amount; i++) {\n        hd = new HDate(hd.abs() + sign * hd.daysInMonth());\n      }\n      return hd;\n    }\n  }\n\n  /**\n   * Returns a cloned `HDate` object with a specified amount of time subracted\n   *\n   * Units are case insensitive, and support plural and short forms.\n   * Note, short forms are case sensitive.\n   *\n   * | Unit | Shorthand | Description\n   * | --- | --- | --- |\n   * | `day` | `d` | days |\n   * | `week` | `w` | weeks |\n   * | `month` | `M` | months |\n   * | `year` | `y` | years |\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd1 = new HDate(15, months.CHESHVAN, 5769);\n   * const hd2 = hd1.add(1, 'weeks'); // 7 Kislev 5769\n   * const hd3 = hd1.add(-3, 'M'); // 30 Av 5768\n   */\n  subtract(amount: number, units: FlexibleTimeUnit = 'd'): HDate {\n    return this.add(amount * -1, units);\n  }\n\n  /**\n   * Returns the difference in days between the two given HDates.\n   *\n   * The result is positive if `this` date is comes chronologically\n   * after the `other` date, and negative\n   * if the order of the two dates is reversed.\n   *\n   * The result is zero if the two dates are identical.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd1 = new HDate(25, months.KISLEV, 5770);\n   * const hd2 = new HDate(15, months.CHESHVAN, 5769);\n   * const days = hd1.deltaDays(hd2); // 394\n   * @param other Hebrew date to compare\n   */\n  deltaDays(other: HDate): number {\n    return this.abs() - other.abs();\n  }\n\n  /**\n   * Compares this Hebrew date to another date, returning `true` if the dates match.\n   * @param other Hebrew date to compare\n   * @example\n   * const hd1 = new HDate(new Date(2008, 10, 13));\n   * const hd2 = new HDate(15, 'Cheshvan', 5769);\n   * hd1.isSameDate(hd2); // true\n   */\n  isSameDate(other: HDate): boolean {\n    return this.yy === other.yy && this.mm === other.mm && this.dd === other.dd;\n  }\n\n  /**\n   * Returns a string representation of this Hebrew date using English transliterations\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.toString(); // '15 Cheshvan 5769'\n   */\n  toString(): string {\n    const day = this.getDate();\n    const fullYear = this.getFullYear();\n    const monthName = this.getMonthName();\n    return `${day} ${monthName} ${fullYear}`;\n  }\n\n  /**\n   * Returns true if Hebrew year is a leap year\n   * @param year Hebrew year\n   * @example\n   * HDate.isLeapYear(5783); // false\n   * HDate.isLeapYear(5784); // true\n   */\n  static isLeapYear(year: number): boolean {\n    return isLeapYear(year);\n  }\n\n  /**\n   * Number of months in this Hebrew year (either 12 or 13 depending on leap year)\n   * @param year Hebrew year\n   * @example\n   * HDate.monthsInYear(5783); // 12\n   * HDate.monthsInYear(5784); // 13\n   */\n  static monthsInYear(year: number): number {\n    return monthsInYear(year);\n  }\n\n  /**\n   * Number of days in Hebrew month in a given year (29 or 30)\n   * @param month Hebrew month (e.g. months.TISHREI)\n   * @param year Hebrew year\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.daysInMonth(months.CHESHVAN, 5769); // 29\n   */\n  static daysInMonth(month: number, year: number): number {\n    return daysInMonth(month, year);\n  }\n\n  /**\n   * Returns a transliterated string name of Hebrew month in year,\n   * for example 'Elul' or 'Cheshvan'.\n   * @param month Hebrew month (e.g. months.TISHREI)\n   * @param year Hebrew year\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.getMonthName(months.CHESHVAN, 5769); // 'Cheshvan'\n   */\n  static getMonthName(month: number, year: number): MonthName {\n    return getMonthName(month, year);\n  }\n\n  /**\n   * Returns the Hebrew month number (NISAN=1, TISHREI=7)\n   * @param month A number, or Hebrew month name string\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.monthNum(months.CHESHVAN); // 8\n   * HDate.monthNum('Cheshvan'); // 8\n   * HDate.monthNum('חשון'); // 8\n   */\n  static monthNum(month: number | string): number {\n    if (typeof month === 'number') {\n      if (isNaN(month) || month > 14) {\n        throw new RangeError(`bad monthNum: ${month}`);\n      }\n      return month;\n    }\n    return month.charCodeAt(0) >= 48 && month.charCodeAt(0) <= 57 /* number */\n      ? parseInt(month, 10)\n      : HDate.monthFromName(month);\n  }\n\n  /**\n   * Number of days in the Hebrew year.\n   * Regular years can have 353, 354, or 355 days.\n   * Leap years can have 383, 384, or 385 days.\n   * @param year Hebrew year\n   * @example\n   * HDate.daysInYear(5783); // 355\n   * HDate.daysInYear(5784); // 383\n   */\n  static daysInYear(year: number): number {\n    return daysInYear(year);\n  }\n\n  /**\n   * true if Cheshvan is long in Hebrew year\n   * @param year Hebrew year\n   * @example\n   * HDate.longCheshvan(5783); // true\n   * HDate.longCheshvan(5784); // false\n   */\n  static longCheshvan(year: number): boolean {\n    return longCheshvan(year);\n  }\n\n  /**\n   * true if Kislev is short in Hebrew year\n   * @param year Hebrew year\n   * @example\n   * HDate.shortKislev(5783); // false\n   * HDate.shortKislev(5784); // true\n   */\n  static shortKislev(year: number): boolean {\n    return shortKislev(year);\n  }\n\n  /**\n   * Converts Hebrew month string name to numeric\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.monthFromName(months.CHESHVAN); // 8\n   * HDate.monthFromName('Cheshvan'); // 8\n   * HDate.monthFromName('חשון'); // 8\n   */\n  static monthFromName(monthName: string | number): number {\n    if (typeof monthName === 'number') {\n      if (isNaN(monthName) || monthName < 1 || monthName > 14) {\n        throw new RangeError(`bad monthName: ${monthName}`);\n      }\n      return monthName;\n    }\n    const name = Locale.hebrewStripNikkud(monthName);\n    return monthFromName(name);\n  }\n\n  /**\n   * Convenience function for determining the R.D. date\n   * near a specified R.D. date, corresponding to the specified day of week.\n   *\n   * Note: Applying this function to d+6 gives us the `dayOfWeek` on or after an\n   * absolute day d. Similarly, applying it to d+3 gives the `dayOfWeek` nearest to\n   * absolute date d, applying it to d-1 gives the `dayOfWeek` previous to absolute\n   * date d, and applying it to d+7 gives the `dayOfWeek` following absolute date d.\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  static dayOnOrBefore(dayOfWeek: number, absdate: number): number {\n    return absdate - ((absdate - dayOfWeek) % 7);\n  }\n\n  /**\n   * Tests if the object is an instance of `HDate`\n   * @example\n   * HDate.isHDate(new HDate()); // true\n   * HDate.isHDate(new Date()); // false\n   * HDate.isHDate(null); // false\n   * HDate.isHDate(12345); // false\n   * HDate.isHDate('15 Cheshvan 5769'); // false\n   */\n  static isHDate(obj: any): boolean {\n    return (\n      obj !== null &&\n      typeof obj === 'object' &&\n      typeof obj.yy === 'number' &&\n      typeof obj.mm === 'number' &&\n      typeof obj.dd === 'number' &&\n      typeof obj.greg === 'function' &&\n      typeof obj.abs === 'function'\n    );\n  }\n\n  /**\n   * Construct a new instance of `HDate` from a Gematriya-formatted string\n   * @example\n   * HDate.fromGematriyaString('כ״ז בְּתַמּוּז תשפ״ג') // 27 Tamuz 5783\n   * HDate.fromGematriyaString('כ׳ סיון תש״ד') // 20 Sivan 5704\n   * HDate.fromGematriyaString('ה׳ אִיָיר תש״ח') // 5 Iyyar 5708\n   */\n  static fromGematriyaString(str: string, currentThousands = 5000): HDate {\n    const parts = str.split(' ').filter(x => x.length !== 0);\n    const numParts = parts.length;\n    if (numParts !== 3 && numParts !== 4) {\n      throw new RangeError(`cannot parse gematriya str: \"${str}\"`);\n    }\n    const day = gematriyaStrToNum(parts[0]);\n    const monthStr = numParts === 3 ? parts[1] : parts[1] + ' ' + parts[2];\n    const month = HDate.monthFromName(monthStr);\n    const yearStr = numParts === 3 ? parts[2] : parts[3];\n    let year = gematriyaStrToNum(yearStr);\n    if (year < 1000) {\n      year += currentThousands;\n    }\n    return new HDate(day, month, year);\n  }\n}\n\nfunction standardizeUnits(units: FlexibleTimeUnit): TimeUnit {\n  switch (units) {\n    case 'd':\n      return UNITS_DAY;\n    case 'w':\n      return UNITS_WEEK;\n    case 'M':\n      return UNITS_MONTH;\n    case 'y':\n      return UNITS_YEAR;\n  }\n  const str = String(units || '')\n    .toLowerCase()\n    .replace(/s$/, '');\n  switch (str) {\n    case UNITS_DAY:\n    case UNITS_WEEK:\n    case UNITS_MONTH:\n    case UNITS_YEAR:\n      return str;\n  }\n  throw new TypeError(`Invalid units '${units}'`);\n}\n\nfunction getDayOfTranslation(locale: string): string {\n  switch (locale) {\n    case 'en':\n    case 's':\n    case 'a':\n    case 'ashkenazi':\n      return ' of';\n    default:\n      break;\n  }\n  const ofStr = Locale.lookupTranslation('of', locale);\n  if (ofStr) {\n    return ' ' + ofStr;\n  }\n  if (locale.startsWith('ashkenazi')) {\n    return ' of';\n  }\n  return '';\n}\n\n/**\n * Sets the day of the month of the date. Returns the object it was called upon\n * @private\n * @param month A number, or Hebrew month name string\n */\nfunction setMonth(hd: HDate, month: number | string): HDate {\n  hd.mm = HDate.monthNum(month);\n  fix(hd);\n  return hd;\n}\n\nfunction setDate(hd: HDate, date: number): HDate {\n  hd.dd = date;\n  fix(hd);\n  return hd;\n}\n\nfunction fix(hd: HDate) {\n  fixMonth(hd);\n  fixDate(hd);\n}\n\nfunction fixDate(hd: HDate) {\n  if (hd.dd < 1) {\n    if (hd.mm === months.TISHREI) {\n      hd.yy -= 1;\n    }\n    hd.dd += daysInMonth(hd.mm, hd.yy);\n    hd.mm -= 1;\n    fix(hd);\n  }\n  if (hd.dd > daysInMonth(hd.mm, hd.yy)) {\n    if (hd.mm === months.ELUL) {\n      hd.yy += 1;\n    }\n    hd.dd -= daysInMonth(hd.mm, hd.yy);\n    if (hd.mm === monthsInYear(hd.yy)) {\n      hd.mm = 1; // rollover to NISAN\n    } else {\n      hd.mm += 1;\n    }\n    fix(hd);\n  }\n  fixMonth(hd);\n}\n\nfunction fixMonth(hd: HDate) {\n  if (hd.mm === months.ADAR_II && !hd.isLeapYear()) {\n    hd.mm -= 1; // to Adar I\n    fix(hd);\n  } else if (hd.mm < 1) {\n    hd.mm += monthsInYear(hd.yy);\n    hd.yy -= 1;\n    fix(hd);\n  } else if (hd.mm > monthsInYear(hd.yy)) {\n    hd.mm -= monthsInYear(hd.yy);\n    hd.yy += 1;\n    fix(hd);\n  }\n  delete hd.rd;\n}\n\nfunction onOrBefore(day: number, t: HDate, offset: number): HDate {\n  return new HDate(HDate.dayOnOrBefore(day, t.abs() + offset));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
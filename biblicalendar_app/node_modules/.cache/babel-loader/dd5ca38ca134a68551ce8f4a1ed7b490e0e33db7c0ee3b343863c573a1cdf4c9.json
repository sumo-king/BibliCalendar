{"ast":null,"code":"/*! @hebcal/core v5.9.0, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\nimport { Event, flags } from './event.js';\nimport { molad, HDate, Locale } from '@hebcal/hdate';\nimport { reformatTimeStr } from './reformatTimeStr.js';\nimport './locale.js';\n\n/* eslint-disable camelcase */\nconst shortDayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst heDayNames = ['רִאשׁוֹן', 'שֵׁנִי', 'שְׁלִישִׁי', 'רְבִיעִי', 'חֲמִישִׁי', 'שִׁישִּׁי', 'שַׁבָּת'];\nconst night = 'בַּלַּ֥יְלָה';\nfunction getHebrewTimeOfDay(hour) {\n  if (hour < 5) return night;else if (hour < 12) return 'בַּבֹּקֶר';else if (hour < 17) return 'בַּצׇּהֳרַיִים';else if (hour < 21) return 'בָּעֶרֶב';\n  return night;\n}\n/**\n * Represents a molad, the moment when the new moon is \"born\"\n */\nclass Molad {\n  /**\n   * Calculates the molad for a Hebrew month\n   * @param year\n   * @param month\n   */\n  constructor(year, month) {\n    this.m = molad(year, month);\n  }\n  /**\n   */\n  getYear() {\n    return this.m.year;\n  }\n  /**\n   */\n  getMonth() {\n    return this.m.month;\n  }\n  /**\n   */\n  getMonthName() {\n    return HDate.getMonthName(this.m.month, this.m.year);\n  }\n  /**\n   * @returns Day of Week (0=Sunday, 6=Saturday)\n   */\n  getDow() {\n    return this.m.dayOfWeek;\n  }\n  /**\n   * @returns hour of day (0-23)\n   */\n  getHour() {\n    return this.m.hour;\n  }\n  /**\n   * @returns minutes past hour (0-59)\n   */\n  getMinutes() {\n    return this.m.minutes;\n  }\n  /**\n   * @returns parts of a minute (0-17)\n   */\n  getChalakim() {\n    return this.m.chalakim;\n  }\n  /**\n   * @param [locale] Optional locale name (defaults to active locale)\n   * @param options\n   */\n  render(locale, options) {\n    var _a;\n    locale = locale !== null && locale !== undefined ? locale : Locale.getLocaleName();\n    if (typeof locale === 'string') {\n      locale = locale.toLowerCase();\n    }\n    const isHebrewLocale = locale === 'he' || locale === 'he-x-nonikud' || locale === 'h';\n    const monthName = Locale.gettext(this.getMonthName(), locale);\n    const dayNames = isHebrewLocale ? heDayNames : shortDayNames;\n    const dow = dayNames[this.getDow()];\n    const minutes = this.getMinutes();\n    const hour = this.getHour();\n    const chalakim = this.getChalakim();\n    const moladStr = Locale.gettext('Molad', locale);\n    const minutesStr = (_a = Locale.lookupTranslation('min', locale)) !== null && _a !== undefined ? _a : 'minutes';\n    const chalakimStr = Locale.gettext('chalakim', locale);\n    if (isHebrewLocale) {\n      const ampm = getHebrewTimeOfDay(hour);\n      const result = `${moladStr} ${monthName} יִהְיֶה בַּיּוֹם ${dow} בשָׁבוּעַ, ` + `בְּשָׁעָה ${hour} ${ampm}, ` + `ו-${minutes} ${minutesStr} ` + `ו-${chalakim} ${chalakimStr}`;\n      if (locale === 'he-x-nonikud') {\n        return Locale.hebrewStripNikkud(result);\n      }\n      return result;\n    }\n    const fmtTime = reformatTimeStr(`${hour}:00`, 'pm', options);\n    const month = monthName.replace(/'/g, '’');\n    return `${moladStr} ${month}: ${dow}, ${minutes} ${minutesStr} and ${chalakim} ${chalakimStr} after ${fmtTime}`;\n  }\n}\n/** Represents a Molad announcement on Shabbat Mevarchim */\nclass MoladEvent extends Event {\n  /**\n   * @param date Hebrew date event occurs\n   * @param hyear molad year\n   * @param hmonth molad month\n   * @param options\n   */\n  constructor(date, hyear, hmonth, options) {\n    const m = new Molad(hyear, hmonth);\n    const monthName = m.getMonthName();\n    super(date, `Molad ${monthName} ${hyear}`, flags.MOLAD);\n    this.molad = m;\n    this.options = options;\n  }\n  /**\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale) {\n    return this.molad.render(locale, this.options);\n  }\n}\nexport { Molad, MoladEvent };","map":{"version":3,"names":["shortDayNames","heDayNames","night","getHebrewTimeOfDay","hour","Molad","constructor","year","month","m","molad","getYear","getMonth","getMonthName","HDate","getDow","dayOfWeek","getHour","getMinutes","minutes","getChalakim","chalakim","render","locale","options","undefined","Locale","getLocaleName","toLowerCase","isHebrewLocale","monthName","gettext","dayNames","dow","moladStr","minutesStr","_a","lookupTranslation","chalakimStr","ampm","result","hebrewStripNikkud","fmtTime","reformatTimeStr","replace","MoladEvent","Event","date","hyear","hmonth","flags","MOLAD"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/molad.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport {Event, flags} from './event';\nimport {CalOptions} from './CalOptions';\nimport {HDate, Locale, molad, Molad as MoladBase} from '@hebcal/hdate';\nimport {reformatTimeStr} from './reformatTimeStr';\nimport './locale'; // Adds Hebrew and Ashkenazic translations\n\nconst shortDayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst heDayNames = [\n  'רִאשׁוֹן',\n  'שֵׁנִי',\n  'שְׁלִישִׁי',\n  'רְבִיעִי',\n  'חֲמִישִׁי',\n  'שִׁישִּׁי',\n  'שַׁבָּת',\n];\n\nconst night = 'בַּלַּ֥יְלָה';\n\nfunction getHebrewTimeOfDay(hour: number): string {\n  if (hour < 5) return night;\n  else if (hour < 12) return 'בַּבֹּקֶר';\n  else if (hour < 17) return 'בַּצׇּהֳרַיִים';\n  else if (hour < 21) return 'בָּעֶרֶב';\n  return night;\n}\n\n/**\n * Represents a molad, the moment when the new moon is \"born\"\n */\nexport class Molad {\n  private readonly m: MoladBase;\n  /**\n   * Calculates the molad for a Hebrew month\n   * @param year\n   * @param month\n   */\n  constructor(year: number, month: number) {\n    this.m = molad(year, month);\n  }\n  /**\n   */\n  getYear(): number {\n    return this.m.year;\n  }\n  /**\n   */\n  getMonth(): number {\n    return this.m.month;\n  }\n  /**\n   */\n  getMonthName(): string {\n    return HDate.getMonthName(this.m.month, this.m.year);\n  }\n  /**\n   * @returns Day of Week (0=Sunday, 6=Saturday)\n   */\n  getDow(): number {\n    return this.m.dayOfWeek;\n  }\n  /**\n   * @returns hour of day (0-23)\n   */\n  getHour(): number {\n    return this.m.hour;\n  }\n  /**\n   * @returns minutes past hour (0-59)\n   */\n  getMinutes(): number {\n    return this.m.minutes;\n  }\n  /**\n   * @returns parts of a minute (0-17)\n   */\n  getChalakim(): number {\n    return this.m.chalakim;\n  }\n  /**\n   * @param [locale] Optional locale name (defaults to active locale)\n   * @param options\n   */\n  render(locale?: string, options?: CalOptions): string {\n    locale = locale ?? Locale.getLocaleName();\n    if (typeof locale === 'string') {\n      locale = locale.toLowerCase();\n    }\n    const isHebrewLocale =\n      locale === 'he' || locale === 'he-x-nonikud' || locale === 'h';\n    const monthName = Locale.gettext(this.getMonthName(), locale);\n    const dayNames = isHebrewLocale ? heDayNames : shortDayNames;\n    const dow = dayNames[this.getDow()];\n    const minutes = this.getMinutes();\n    const hour = this.getHour();\n    const chalakim = this.getChalakim();\n    const moladStr = Locale.gettext('Molad', locale);\n    const minutesStr = Locale.lookupTranslation('min', locale) ?? 'minutes';\n    const chalakimStr = Locale.gettext('chalakim', locale);\n    if (isHebrewLocale) {\n      const ampm = getHebrewTimeOfDay(hour);\n      const result =\n        `${moladStr} ${monthName} יִהְיֶה בַּיּוֹם ${dow} בשָׁבוּעַ, ` +\n        `בְּשָׁעָה ${hour} ${ampm}, ` +\n        `ו-${minutes} ${minutesStr} ` +\n        `ו-${chalakim} ${chalakimStr}`;\n      if (locale === 'he-x-nonikud') {\n        return Locale.hebrewStripNikkud(result);\n      }\n      return result;\n    }\n    const fmtTime = reformatTimeStr(`${hour}:00`, 'pm', options);\n    const month = monthName.replace(/'/g, '’');\n    return `${moladStr} ${month}: ${dow}, ${minutes} ${minutesStr} and ${chalakim} ${chalakimStr} after ${fmtTime}`;\n  }\n}\n\n/** Represents a Molad announcement on Shabbat Mevarchim */\nexport class MoladEvent extends Event {\n  readonly molad: Molad;\n  private readonly options: CalOptions;\n  /**\n   * @param date Hebrew date event occurs\n   * @param hyear molad year\n   * @param hmonth molad month\n   * @param options\n   */\n  constructor(date: HDate, hyear: number, hmonth: number, options: CalOptions) {\n    const m = new Molad(hyear, hmonth);\n    const monthName = m.getMonthName();\n    super(date, `Molad ${monthName} ${hyear}`, flags.MOLAD);\n    this.molad = m;\n    this.options = options;\n  }\n  /**\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale?: string): string {\n    return this.molad.render(locale, this.options);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
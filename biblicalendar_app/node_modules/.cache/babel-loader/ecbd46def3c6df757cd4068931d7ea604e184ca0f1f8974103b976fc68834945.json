{"ast":null,"code":"/*! @hebcal/hdate v0.13.5, distributed under GPLv2 https://www.gnu.org/licenses/gpl-2.0.txt */\n/*\n * More minimal HDate\n */\nconst NISAN = 1;\nconst IYYAR = 2;\nconst SIVAN = 3;\nconst TAMUZ = 4;\nconst AV = 5;\nconst ELUL = 6;\nconst TISHREI = 7;\nconst CHESHVAN = 8;\nconst KISLEV = 9;\nconst TEVET = 10;\nconst SHVAT = 11;\nconst ADAR_I = 12;\nconst ADAR_II = 13;\n/**\n * Hebrew months of the year (NISAN=1, TISHREI=7)\n * @readonly\n * @enum {number}\n */\nconst months = {\n  /** Nissan / ניסן */\n  NISAN,\n  /** Iyyar / אייר */\n  IYYAR,\n  /** Sivan / סיון */\n  SIVAN,\n  /** Tamuz (sometimes Tammuz) / תמוז */\n  TAMUZ,\n  /** Av / אב */\n  AV,\n  /** Elul / אלול */\n  ELUL,\n  /** Tishrei / תִּשְׁרֵי */\n  TISHREI,\n  /** Cheshvan / חשון */\n  CHESHVAN,\n  /** Kislev / כסלו */\n  KISLEV,\n  /** Tevet / טבת */\n  TEVET,\n  /** Sh'vat / שבט */\n  SHVAT,\n  /** Adar or Adar Rishon / אדר */\n  ADAR_I,\n  /** Adar Sheini (only on leap years) / אדר ב׳ */\n  ADAR_II\n};\nconst NISAN_STR = 'Nisan';\nconst monthNames0 = ['', NISAN_STR, 'Iyyar', 'Sivan', 'Tamuz', 'Av', 'Elul', 'Tishrei', 'Cheshvan', 'Kislev', 'Tevet', \"Sh'vat\"];\n/*\n * Transliterations of Hebrew month names.\n * Regular years are index 0 and leap years are index 1.\n * @private\n */\nconst monthNames = [[...monthNames0, 'Adar', NISAN_STR], [...monthNames0, 'Adar I', 'Adar II', NISAN_STR]];\nconst edCache = new Map();\nconst EPOCH = -1373428;\n// Avg year length in the cycle (19 solar years with 235 lunar months)\nconst AVG_HEBYEAR_DAYS = 365.24682220597794;\n/**\n * @private\n */\nfunction assertNumber(n, name) {\n  if (typeof n !== 'number' || isNaN(n)) {\n    throw new TypeError(`param '${name}' not a number: ${n}`);\n  }\n}\n/**\n * Converts Hebrew date to R.D. (Rata Die) fixed days.\n * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian\n * Calendar.\n * @param year Hebrew year\n * @param month Hebrew month\n * @param day Hebrew date (1-30)\n * @example\n * const abs = hebrew2abs(5769, months.CHESHVAN, 15);\n */\nfunction hebrew2abs(year, month, day) {\n  assertNumber(year, 'year');\n  assertNumber(month, 'month');\n  assertNumber(day, 'day');\n  if (year < 1) {\n    throw new RangeError(`hebrew2abs: invalid year ${year}`);\n  }\n  let tempabs = day;\n  if (month < TISHREI) {\n    for (let m = TISHREI; m <= monthsInYear(year); m++) {\n      tempabs += daysInMonth(m, year);\n    }\n    for (let m = NISAN; m < month; m++) {\n      tempabs += daysInMonth(m, year);\n    }\n  } else {\n    for (let m = TISHREI; m < month; m++) {\n      tempabs += daysInMonth(m, year);\n    }\n  }\n  return EPOCH + elapsedDays(year) + tempabs - 1;\n}\n/**\n * Converts Hebrew date to R.D. (Rata Die) fixed days.\n * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian\n * Calendar.\n */\nfunction hd2abs(hdate) {\n  return hebrew2abs(hdate.yy, hdate.mm, hdate.dd);\n}\n/**\n * @private\n */\nfunction newYear(year) {\n  return EPOCH + elapsedDays(year);\n}\n/**\n * Converts absolute R.D. days to Hebrew date\n * @param abs absolute R.D. days\n */\nfunction abs2hebrew(abs) {\n  assertNumber(abs, 'abs');\n  abs = Math.trunc(abs);\n  if (abs <= EPOCH) {\n    throw new RangeError(`abs2hebrew: ${abs} is before epoch`);\n  }\n  // first, quickly approximate year\n  let year = Math.floor((abs - EPOCH) / AVG_HEBYEAR_DAYS);\n  while (newYear(year) <= abs) {\n    ++year;\n  }\n  --year;\n  let month = abs < hebrew2abs(year, 1, 1) ? 7 : 1;\n  while (abs > hebrew2abs(year, month, daysInMonth(month, year))) {\n    ++month;\n  }\n  const day = 1 + abs - hebrew2abs(year, month, 1);\n  return {\n    yy: year,\n    mm: month,\n    dd: day\n  };\n}\n/**\n * Returns true if Hebrew year is a leap year\n * @param year Hebrew year\n */\nfunction isLeapYear(year) {\n  return (1 + year * 7) % 19 < 7;\n}\n/**\n * Number of months in this Hebrew year (either 12 or 13 depending on leap year)\n * @param year Hebrew year\n */\nfunction monthsInYear(year) {\n  return 12 + +isLeapYear(year); // boolean is cast to 1 or 0\n}\n/**\n * Number of days in Hebrew month in a given year (29 or 30)\n * @param month Hebrew month (e.g. months.TISHREI)\n * @param year Hebrew year\n */\nfunction daysInMonth(month, year) {\n  switch (month) {\n    case IYYAR:\n    case TAMUZ:\n    case ELUL:\n    case TEVET:\n    case ADAR_II:\n      return 29;\n  }\n  if (month === ADAR_I && !isLeapYear(year) || month === CHESHVAN && !longCheshvan(year) || month === KISLEV && shortKislev(year)) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n/**\n * Returns a transliterated string name of Hebrew month in year,\n * for example 'Elul' or 'Cheshvan'.\n * @param month Hebrew month (e.g. months.TISHREI)\n * @param year Hebrew year\n */\nfunction getMonthName(month, year) {\n  assertNumber(month, 'month');\n  assertNumber(year, 'year');\n  if (month < 1 || month > 14) {\n    throw new TypeError(`bad monthNum: ${month}`);\n  }\n  return monthNames[+isLeapYear(year)][month];\n}\n/**\n * Days from sunday prior to start of Hebrew calendar to mean\n * conjunction of Tishrei in Hebrew YEAR\n * @param year Hebrew year\n */\nfunction elapsedDays(year) {\n  const n = edCache.get(year);\n  if (typeof n === 'number') {\n    return n;\n  }\n  const elapsed = elapsedDays0(year);\n  edCache.set(year, elapsed);\n  return elapsed;\n}\n/**\n * Days from sunday prior to start of Hebrew calendar to mean\n * conjunction of Tishrei in Hebrew YEAR\n * @private\n * @param year Hebrew year\n */\nfunction elapsedDays0(year) {\n  const prevYear = year - 1;\n  const mElapsed = 235 * Math.floor(prevYear / 19) +\n  // Months in complete 19 year lunar (Metonic) cycles so far\n  12 * (prevYear % 19) +\n  // Regular months in this cycle\n  Math.floor((prevYear % 19 * 7 + 1) / 19); // Leap months this cycle\n  const pElapsed = 204 + 793 * (mElapsed % 1080);\n  const hElapsed = 5 + 12 * mElapsed + 793 * Math.floor(mElapsed / 1080) + Math.floor(pElapsed / 1080);\n  const parts = pElapsed % 1080 + 1080 * (hElapsed % 24);\n  const day = 1 + 29 * mElapsed + Math.floor(hElapsed / 24);\n  let altDay = day;\n  if (parts >= 19440 || 2 === day % 7 && parts >= 9924 && !isLeapYear(year) || 1 === day % 7 && parts >= 16789 && isLeapYear(prevYear)) {\n    altDay++;\n  }\n  if (altDay % 7 === 0 || altDay % 7 === 3 || altDay % 7 === 5) {\n    return altDay + 1;\n  } else {\n    return altDay;\n  }\n}\n/**\n * Number of days in the hebrew YEAR.\n * A common Hebrew calendar year can have a length of 353, 354 or 355 days\n * A leap Hebrew calendar year can have a length of 383, 384 or 385 days\n * @param year Hebrew year\n */\nfunction daysInYear(year) {\n  return elapsedDays(year + 1) - elapsedDays(year);\n}\n/**\n * true if Cheshvan is long in Hebrew year\n * @param year Hebrew year\n */\nfunction longCheshvan(year) {\n  return daysInYear(year) % 10 === 5;\n}\n/**\n * true if Kislev is short in Hebrew year\n * @param year Hebrew year\n */\nfunction shortKislev(year) {\n  return daysInYear(year) % 10 === 3;\n}\n/**\n * Converts Hebrew month string name to numeric\n * @param monthName monthName\n */\nfunction monthFromName(monthName) {\n  if (typeof monthName === 'number') {\n    if (isNaN(monthName) || monthName < 1 || monthName > 14) {\n      throw new RangeError(`bad monthName: ${monthName}`);\n    }\n    return monthName;\n  }\n  let c = monthName.trim().toLowerCase();\n  // If Hebrew month starts with a bet (for example `בתמוז`) then ignore it\n  if (c[0] === 'ב') {\n    c = c.substring(1);\n  }\n  /*\n  the Hebrew months are unique to their second letter\n  N         Nisan  (November?)\n  I         Iyyar\n  E        Elul\n  C        Cheshvan\n  K        Kislev\n  1        1Adar\n  2        2Adar\n  Si Sh     Sivan, Shvat\n  Ta Ti Te Tamuz, Tishrei, Tevet\n  Av Ad    Av, Adar\n     אב אד אי אל   אב אדר אייר אלול\n  ח            חשון\n  ט            טבת\n  כ            כסלו\n  נ            ניסן\n  ס            סיון\n  ש            שבט\n  תמ תש        תמוז תשרי\n  */\n  switch (c[0]) {\n    case 'n':\n    case 'נ':\n      if (c[1] === 'o') {\n        break; /* this catches \"november\" */\n      }\n      return NISAN;\n    case 'i':\n      return IYYAR;\n    case 'e':\n      return ELUL;\n    case 'c':\n    case 'ח':\n      return CHESHVAN;\n    case 'k':\n    case 'כ':\n      return KISLEV;\n    case 's':\n      switch (c[1]) {\n        case 'i':\n          return SIVAN;\n        case 'h':\n          return SHVAT;\n      }\n      break;\n    case 't':\n      switch (c[1]) {\n        case 'a':\n          return TAMUZ;\n        case 'i':\n          return TISHREI;\n        case 'e':\n          return TEVET;\n      }\n      break;\n    case 'a':\n      switch (c[1]) {\n        case 'v':\n          return AV;\n        case 'd':\n          if (/(1|[^i]i|a|א)$/i.test(monthName)) {\n            return ADAR_I;\n          }\n          return ADAR_II;\n        // else assume sheini\n      }\n      break;\n    case 'ס':\n      return SIVAN;\n    case 'ט':\n      return TEVET;\n    case 'ש':\n      return SHVAT;\n    case 'א':\n      switch (c[1]) {\n        case 'ב':\n          return AV;\n        case 'ד':\n          if (/(1|[^i]i|a|א)$/i.test(monthName)) {\n            return ADAR_I;\n          }\n          return ADAR_II;\n        // else assume sheini\n        case 'י':\n          return IYYAR;\n        case 'ל':\n          return ELUL;\n      }\n      break;\n    case 'ת':\n      switch (c[1]) {\n        case 'מ':\n          return TAMUZ;\n        case 'ש':\n          return TISHREI;\n      }\n      break;\n  }\n  throw new RangeError(`bad monthName: ${monthName}`);\n}\nexport { abs2hebrew, daysInMonth, daysInYear, elapsedDays, getMonthName, hd2abs, hebrew2abs, isLeapYear, longCheshvan, monthFromName, months, monthsInYear, shortKislev };","map":{"version":3,"names":["NISAN","IYYAR","SIVAN","TAMUZ","AV","ELUL","TISHREI","CHESHVAN","KISLEV","TEVET","SHVAT","ADAR_I","ADAR_II","months","NISAN_STR","monthNames0","monthNames","edCache","Map","EPOCH","AVG_HEBYEAR_DAYS","assertNumber","n","name","isNaN","TypeError","hebrew2abs","year","month","day","RangeError","tempabs","m","monthsInYear","daysInMonth","elapsedDays","hd2abs","hdate","yy","mm","dd","newYear","abs2hebrew","abs","Math","trunc","floor","isLeapYear","longCheshvan","shortKislev","getMonthName","get","elapsed","elapsedDays0","set","prevYear","mElapsed","pElapsed","hElapsed","parts","altDay","daysInYear","monthFromName","monthName","c","trim","toLowerCase","substring","test"],"sources":["/Users/shelton/Desktop/Personal Projects/BibliCalendar/biblicalendar_app/node_modules/@hebcal/src/hdateBase.ts"],"sourcesContent":["/*\n * More minimal HDate\n */\n\nconst NISAN = 1;\nconst IYYAR = 2;\nconst SIVAN = 3;\nconst TAMUZ = 4;\nconst AV = 5;\nconst ELUL = 6;\nconst TISHREI = 7;\nconst CHESHVAN = 8;\nconst KISLEV = 9;\nconst TEVET = 10;\nconst SHVAT = 11;\nconst ADAR_I = 12;\nconst ADAR_II = 13;\n\n/**\n * Hebrew months of the year (NISAN=1, TISHREI=7)\n * @readonly\n * @enum {number}\n */\nexport const months = {\n  /** Nissan / ניסן */\n  NISAN,\n  /** Iyyar / אייר */\n  IYYAR,\n  /** Sivan / סיון */\n  SIVAN,\n  /** Tamuz (sometimes Tammuz) / תמוז */\n  TAMUZ,\n  /** Av / אב */\n  AV,\n  /** Elul / אלול */\n  ELUL,\n  /** Tishrei / תִּשְׁרֵי */\n  TISHREI,\n  /** Cheshvan / חשון */\n  CHESHVAN,\n  /** Kislev / כסלו */\n  KISLEV,\n  /** Tevet / טבת */\n  TEVET,\n  /** Sh'vat / שבט */\n  SHVAT,\n  /** Adar or Adar Rishon / אדר */\n  ADAR_I,\n  /** Adar Sheini (only on leap years) / אדר ב׳ */\n  ADAR_II,\n} as const;\n\nconst NISAN_STR = 'Nisan';\nconst monthNames0 = [\n  '',\n  NISAN_STR,\n  'Iyyar',\n  'Sivan',\n  'Tamuz',\n  'Av',\n  'Elul',\n  'Tishrei',\n  'Cheshvan',\n  'Kislev',\n  'Tevet',\n  \"Sh'vat\",\n] as const;\n\n/*\n * Transliterations of Hebrew month names.\n * Regular years are index 0 and leap years are index 1.\n * @private\n */\nconst monthNames = [\n  [...monthNames0, 'Adar', NISAN_STR],\n  [...monthNames0, 'Adar I', 'Adar II', NISAN_STR],\n] as const;\n\n/** Transliterated Hebrew month names. */\nexport type MonthName =\n  | 'Nisan'\n  | 'Iyyar'\n  | 'Sivan'\n  | 'Tamuz'\n  | 'Av'\n  | 'Elul'\n  | 'Tishrei'\n  | 'Cheshvan'\n  | 'Kislev'\n  | 'Tevet'\n  | \"Sh'vat\"\n  | 'Adar'\n  | 'Adar I'\n  | 'Adar II';\n\nconst edCache: Map<number, number> = new Map<number, number>();\n\nconst EPOCH = -1373428;\n// Avg year length in the cycle (19 solar years with 235 lunar months)\nconst AVG_HEBYEAR_DAYS = 365.24682220597794;\n\n/**\n * @private\n */\nfunction assertNumber(n: unknown, name: string) {\n  if (typeof n !== 'number' || isNaN(n)) {\n    throw new TypeError(`param '${name}' not a number: ${n}`);\n  }\n}\n\n/**\n * Converts Hebrew date to R.D. (Rata Die) fixed days.\n * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian\n * Calendar.\n * @param year Hebrew year\n * @param month Hebrew month\n * @param day Hebrew date (1-30)\n * @example\n * const abs = hebrew2abs(5769, months.CHESHVAN, 15);\n */\nexport function hebrew2abs(year: number, month: number, day: number): number {\n  assertNumber(year, 'year');\n  assertNumber(month, 'month');\n  assertNumber(day, 'day');\n\n  if (year < 1) {\n    throw new RangeError(`hebrew2abs: invalid year ${year}`);\n  }\n\n  let tempabs: number = day;\n\n  if (month < TISHREI) {\n    for (let m = TISHREI; m <= monthsInYear(year); m++) {\n      tempabs += daysInMonth(m, year);\n    }\n    for (let m = NISAN; m < month; m++) {\n      tempabs += daysInMonth(m, year);\n    }\n  } else {\n    for (let m = TISHREI; m < month; m++) {\n      tempabs += daysInMonth(m, year);\n    }\n  }\n\n  return EPOCH + elapsedDays(year) + tempabs - 1;\n}\n\n/**\n * Converts Hebrew date to R.D. (Rata Die) fixed days.\n * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian\n * Calendar.\n */\nexport function hd2abs(hdate: SimpleHebrewDate): number {\n  return hebrew2abs(hdate.yy, hdate.mm, hdate.dd);\n}\n\n/**\n * @private\n */\nfunction newYear(year: number): number {\n  return EPOCH + elapsedDays(year);\n}\n\nexport type SimpleHebrewDate = {\n  /** Hebrew year */\n  yy: number;\n  /** Hebrew month of year (1=NISAN, 7=TISHREI) */\n  mm: number;\n  /** Day of month (1-30) */\n  dd: number;\n};\n\n/**\n * Converts absolute R.D. days to Hebrew date\n * @param abs absolute R.D. days\n */\nexport function abs2hebrew(abs: number): SimpleHebrewDate {\n  assertNumber(abs, 'abs');\n  abs = Math.trunc(abs);\n  if (abs <= EPOCH) {\n    throw new RangeError(`abs2hebrew: ${abs} is before epoch`);\n  }\n  // first, quickly approximate year\n  let year = Math.floor((abs - EPOCH) / AVG_HEBYEAR_DAYS);\n  while (newYear(year) <= abs) {\n    ++year;\n  }\n  --year;\n\n  let month = abs < hebrew2abs(year, 1, 1) ? 7 : 1;\n  while (abs > hebrew2abs(year, month, daysInMonth(month, year))) {\n    ++month;\n  }\n\n  const day = 1 + abs - hebrew2abs(year, month, 1);\n  return {yy: year, mm: month, dd: day};\n}\n\n/**\n * Returns true if Hebrew year is a leap year\n * @param year Hebrew year\n */\nexport function isLeapYear(year: number): boolean {\n  return (1 + year * 7) % 19 < 7;\n}\n\n/**\n * Number of months in this Hebrew year (either 12 or 13 depending on leap year)\n * @param year Hebrew year\n */\nexport function monthsInYear(year: number): number {\n  return 12 + +isLeapYear(year); // boolean is cast to 1 or 0\n}\n\n/**\n * Number of days in Hebrew month in a given year (29 or 30)\n * @param month Hebrew month (e.g. months.TISHREI)\n * @param year Hebrew year\n */\nexport function daysInMonth(month: number, year: number): number {\n  switch (month) {\n    case IYYAR:\n    case TAMUZ:\n    case ELUL:\n    case TEVET:\n    case ADAR_II:\n      return 29;\n    default:\n      break;\n  }\n  if (\n    (month === ADAR_I && !isLeapYear(year)) ||\n    (month === CHESHVAN && !longCheshvan(year)) ||\n    (month === KISLEV && shortKislev(year))\n  ) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\n/**\n * Returns a transliterated string name of Hebrew month in year,\n * for example 'Elul' or 'Cheshvan'.\n * @param month Hebrew month (e.g. months.TISHREI)\n * @param year Hebrew year\n */\nexport function getMonthName(month: number, year: number): MonthName {\n  assertNumber(month, 'month');\n  assertNumber(year, 'year');\n  if (month < 1 || month > 14) {\n    throw new TypeError(`bad monthNum: ${month}`);\n  }\n  return monthNames[+isLeapYear(year)][month] as MonthName;\n}\n\n/**\n * Days from sunday prior to start of Hebrew calendar to mean\n * conjunction of Tishrei in Hebrew YEAR\n * @param year Hebrew year\n */\nexport function elapsedDays(year: number): number {\n  const n = edCache.get(year);\n  if (typeof n === 'number') {\n    return n;\n  }\n  const elapsed: number = elapsedDays0(year);\n  edCache.set(year, elapsed);\n  return elapsed;\n}\n\n/**\n * Days from sunday prior to start of Hebrew calendar to mean\n * conjunction of Tishrei in Hebrew YEAR\n * @private\n * @param year Hebrew year\n */\nfunction elapsedDays0(year: number): number {\n  const prevYear: number = year - 1;\n  const mElapsed: number =\n    235 * Math.floor(prevYear / 19) + // Months in complete 19 year lunar (Metonic) cycles so far\n    12 * (prevYear % 19) + // Regular months in this cycle\n    Math.floor(((prevYear % 19) * 7 + 1) / 19); // Leap months this cycle\n\n  const pElapsed: number = 204 + 793 * (mElapsed % 1080);\n\n  const hElapsed: number =\n    5 +\n    12 * mElapsed +\n    793 * Math.floor(mElapsed / 1080) +\n    Math.floor(pElapsed / 1080);\n\n  const parts: number = (pElapsed % 1080) + 1080 * (hElapsed % 24);\n\n  const day: number = 1 + 29 * mElapsed + Math.floor(hElapsed / 24);\n  let altDay: number = day;\n\n  if (\n    parts >= 19440 ||\n    (2 === day % 7 && parts >= 9924 && !isLeapYear(year)) ||\n    (1 === day % 7 && parts >= 16789 && isLeapYear(prevYear))\n  ) {\n    altDay++;\n  }\n\n  if (altDay % 7 === 0 || altDay % 7 === 3 || altDay % 7 === 5) {\n    return altDay + 1;\n  } else {\n    return altDay;\n  }\n}\n\n/**\n * Number of days in the hebrew YEAR.\n * A common Hebrew calendar year can have a length of 353, 354 or 355 days\n * A leap Hebrew calendar year can have a length of 383, 384 or 385 days\n * @param year Hebrew year\n */\nexport function daysInYear(year: number): number {\n  return elapsedDays(year + 1) - elapsedDays(year);\n}\n\n/**\n * true if Cheshvan is long in Hebrew year\n * @param year Hebrew year\n */\nexport function longCheshvan(year: number): boolean {\n  return daysInYear(year) % 10 === 5;\n}\n\n/**\n * true if Kislev is short in Hebrew year\n * @param year Hebrew year\n */\nexport function shortKislev(year: number): boolean {\n  return daysInYear(year) % 10 === 3;\n}\n\n/**\n * Converts Hebrew month string name to numeric\n * @param monthName monthName\n */\nexport function monthFromName(monthName: string): number {\n  if (typeof monthName === 'number') {\n    if (isNaN(monthName) || monthName < 1 || monthName > 14) {\n      throw new RangeError(`bad monthName: ${monthName}`);\n    }\n    return monthName;\n  }\n  let c = monthName.trim().toLowerCase();\n  // If Hebrew month starts with a bet (for example `בתמוז`) then ignore it\n  if (c[0] === 'ב') {\n    c = c.substring(1);\n  }\n  /*\n  the Hebrew months are unique to their second letter\n  N         Nisan  (November?)\n  I         Iyyar\n  E        Elul\n  C        Cheshvan\n  K        Kislev\n  1        1Adar\n  2        2Adar\n  Si Sh     Sivan, Shvat\n  Ta Ti Te Tamuz, Tishrei, Tevet\n  Av Ad    Av, Adar\n\n  אב אד אי אל   אב אדר אייר אלול\n  ח            חשון\n  ט            טבת\n  כ            כסלו\n  נ            ניסן\n  ס            סיון\n  ש            שבט\n  תמ תש        תמוז תשרי\n  */\n  switch (c[0]) {\n    case 'n':\n    case 'נ':\n      if (c[1] === 'o') {\n        break; /* this catches \"november\" */\n      }\n      return NISAN;\n    case 'i':\n      return IYYAR;\n    case 'e':\n      return ELUL;\n    case 'c':\n    case 'ח':\n      return CHESHVAN;\n    case 'k':\n    case 'כ':\n      return KISLEV;\n    case 's':\n      switch (c[1]) {\n        case 'i':\n          return SIVAN;\n        case 'h':\n          return SHVAT;\n        default:\n          break;\n      }\n      break;\n    case 't':\n      switch (c[1]) {\n        case 'a':\n          return TAMUZ;\n        case 'i':\n          return TISHREI;\n        case 'e':\n          return TEVET;\n        default:\n          break;\n      }\n      break;\n    case 'a':\n      switch (c[1]) {\n        case 'v':\n          return AV;\n        case 'd':\n          if (/(1|[^i]i|a|א)$/i.test(monthName)) {\n            return ADAR_I;\n          }\n          return ADAR_II; // else assume sheini\n        default:\n          break;\n      }\n      break;\n    case 'ס':\n      return SIVAN;\n    case 'ט':\n      return TEVET;\n    case 'ש':\n      return SHVAT;\n    case 'א':\n      switch (c[1]) {\n        case 'ב':\n          return AV;\n        case 'ד':\n          if (/(1|[^i]i|a|א)$/i.test(monthName)) {\n            return ADAR_I;\n          }\n          return ADAR_II; // else assume sheini\n        case 'י':\n          return IYYAR;\n        case 'ל':\n          return ELUL;\n        default:\n          break;\n      }\n      break;\n    case 'ת':\n      switch (c[1]) {\n        case 'מ':\n          return TAMUZ;\n        case 'ש':\n          return TISHREI;\n        default:\n          break;\n      }\n      break;\n  }\n  throw new RangeError(`bad monthName: ${monthName}`);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}